<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>임창수</title>
    <link>https://markruler.github.io/</link>
    <description>Recent content on 임창수</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <managingEditor>imcxsu@gmail.com (Im Changsu)</managingEditor>
    <webMaster>imcxsu@gmail.com (Im Changsu)</webMaster>
    <copyright>Im Changsu 2020 - 2024</copyright>
    <lastBuildDate>Mon, 16 Dec 2024 21:26:00 +0900</lastBuildDate>
    
        <atom:link href="https://markruler.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>한국어를 지원하지 않는 스팀 게임의 비공식 한국어 패치 만들기</title>
        <link>https://markruler.github.io/posts/reverse-engineering/game-localization/</link>
        <pubDate>Mon, 16 Dec 2024 21:26:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/reverse-engineering/game-localization/</guid>
        <description>임창수 https://markruler.github.io/posts/reverse-engineering/game-localization/ -&lt;p&gt;스팀(Steam) 게임들을 위한 모드나 패치 도구가 많아서 고전게임보다 비교적 난이도가 쉽습니다.&lt;/p&gt;
&lt;h1 id=&#34;게임-저작권과-한국어-패치&#34;&gt;게임 저작권과 한국어 패치&lt;/h1&gt;
&lt;p&gt;엄연히 게임 파일을 수정하고 배포하는 것은 저작권법 위반입니다.
배포가 목적이라면 반드시 게임 개발사에 허락을 먼저 받아야 합니다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;한국어 패치 제작자들은 호의적으로 패치하는 경우가 대부분이며,
인디 게임 개발사에서는 번역할 여건이 되지 않아서 이에 호의적으로 반응하는 경우가 많습니다.
제가 번역한 게임의 개발사도 크레딧(Credit)에 제 이름을 명시해주겠다는 제의까지 해주었습니다.
하지만 일부 개발사들은 고소까지 하는 사례도 있다고 하니 법적인 책임은 반드시 숙지해야 합니다.&lt;/p&gt;
&lt;p&gt;고소까지 하는 게임 개발사의 마음도 충분히 이해됩니다.
첫번째 이유는 이미 한국어 패치를 계획하고 있다면
게임 개발사, 유통사, 번역사 모두에게 손해가 발생할 수 있기 때문입니다.
두번째 이유는 게임 데이터를 얻고 변조한다는 점에서
한국어 패치 파일을 만든다는 것이 게임 핵을 만드는 것과 한끗 차이이기 때문입니다.
패치 제작자의 의도에 따라 완전히 다른 패치 프로그램(Patcher)이 만들어지는 것이죠.
그래서 멀티 게임을 운영하는 개발사에서는 유독 민감하게 반응하는 것 같습니다.&lt;/p&gt;
&lt;h1 id=&#34;대표적인-게임-엔진별-한국어-패치-제작-방법&#34;&gt;대표적인 게임 엔진별 한국어 패치 제작 방법&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;SteamDB 기준 가장 많이 사용된 게임 엔진부터 나열했습니다.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;기본적으로 제가 패치하는 방법은 다음과 같습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;게임 엔진별 언팩 도구를 사용하여 게임 파일을 추출합니다(unpack).&lt;/li&gt;
&lt;li&gt;스크립트(script 혹은 dialog)를 번역하고 수정합니다.&lt;/li&gt;
&lt;li&gt;한글을 지원하지 않는 폰트인 경우 폰트를 생성합니다.&lt;/li&gt;
&lt;li&gt;번역된 스크립트와 폰트를 다시 패키징하여(repack) 게임에 적용합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;한 가지 언어(주로 영어)만 제공하는 게임은 스크립트가 별도로 있지 않고,
게임 장면에 직접 포함되어 있는 경우가 있습니다.
이 경우 파일 카빙을 하거나 개발사에 직접 요청해야 합니다.
폰트도 한글을 지원하지 않는 경우가 많습니다.&lt;/p&gt;
&lt;h2 id=&#34;언팩-도구-사용하기&#34;&gt;언팩 도구 사용하기&lt;/h2&gt;
&lt;p&gt;인기 있는 게임 엔진들은 이미 언팩(unpack) 도구가 존재합니다.&lt;/p&gt;
&lt;h3 id=&#34;유니티-unity&#34;&gt;유니티 (Unity)&lt;/h3&gt;
&lt;p&gt;언팩-리팩 과정은 &lt;a href=&#34;https://github.com/nesrak1/UABEA&#34;&gt;UABEA&lt;/a&gt;를 사용합니다.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/FontAssetsSDF.html&#34;&gt;SDF(Signed Distance Fields)&lt;/a&gt; 폰트 생성 시
Glyph 관련 부분을 제외한 모든 부분을 원본과 동일하게 만들어야 한다는 것에 유의해야 합니다.
자세한 폰트 교체 방법은 &lt;a href=&#34;https://snowyegret.tistory.com/21&#34;&gt;Snowyegret&lt;/a&gt;님의 글을 참고하세요.&lt;/p&gt;
&lt;p&gt;IL2CPP&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;로 빌드된 유니티 게임은 &lt;a href=&#34;https://github.com/nesrak1/AddressablesTools&#34;&gt;nesrak1/AddressablesTools&lt;/a&gt;을 사용해서
&lt;code&gt;catalog.json&lt;/code&gt; 파일을 수정해야 합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Example patchcrc catalog.json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;언리얼-엔진-unreal-engine&#34;&gt;언리얼 엔진 (Unreal Engine)&lt;/h3&gt;
&lt;p&gt;5는 툴이 없어서 시도해보지 못했습니다.
4는 해외 커뮤니티에서 &lt;a href=&#34;https://gbatemp.net/threads/how-to-unpack-and-repack-unreal-engine-4-files.531784/&#34;&gt;masagrator라는 유저가 작성한 글과 툴&lt;/a&gt;을 참고하세요.&lt;/p&gt;
&lt;p&gt;다른 게임과 달리 Epic Games는 언팩 도구(&lt;code&gt;UnrealPak&lt;/code&gt;)를 직접 제공합니다.
패치 파일을 원본 pak 파일 위치에 &lt;code&gt;_p&lt;/code&gt;라는 접미사를 붙이면 적용됩니다.&lt;/p&gt;
&lt;h3 id=&#34;게임메이커-gamemaker-studio-2&#34;&gt;게임메이커 (GameMaker Studio 2)&lt;/h3&gt;
&lt;p&gt;언팩-리팩 과정은 언더테일 모드 툴인 &lt;a href=&#34;https://github.com/UnderminersTeam/UndertaleModTool/releases&#34;&gt;UnderminersTeam/UndertaleModTool&lt;/a&gt;을 사용합니다.&lt;/p&gt;
&lt;p&gt;자세한 폰트 교체 방법은 &lt;a href=&#34;https://snowyegret.tistory.com/65&#34;&gt;Sonwyegret&lt;/a&gt;님의 글을 참고하세요.
폰트 교체 시 데이터 구조를 알고 파이썬과 같은 스크립트 언어를 안다면 좀 더 수월하게 패치할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;렌파이-renpy---pygame&#34;&gt;렌파이 (Ren&amp;rsquo;Py - PyGame)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Lattyware/unrpa&#34;&gt;unrpa&lt;/a&gt; 모듈을 사용해서 패치할 파일을 언팩-리팩해서 게임 경로에 두면 적용됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# unrpa 설치&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python -m pip install unrpa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# RPA 파일 추출&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python -m unrpa yourfile.rpa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 수정 후 패치 파일 리팩&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python -m unrpa -mp patch patch.rpa
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;고도-godot&#34;&gt;고도 (Godot)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GDRETools/gdsdecomp&#34;&gt;GDRETools/gdsdecomp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;translation.csv&lt;/code&gt; 파일 추출을 지원하지 않아서 시도하지 못했었는데,
&lt;a href=&#34;https://github.com/GDRETools/gdsdecomp/releases/tag/v0.8.0&#34;&gt;v0.8.0&lt;/a&gt; 버전부터 가능해졌다고 합니다.&lt;/p&gt;
&lt;h2 id=&#34;파일-카빙-file-carving&#34;&gt;파일 카빙 (File Carving)&lt;/h2&gt;
&lt;p&gt;만약 적절한 언팩 도구가 없는 경우 직접 파일을 추출해야 합니다.
이때 &lt;a href=&#34;../file-signature/#1-%EC%8B%9C%EA%B7%B8%EB%8B%88%EC%B2%98-%EA%B8%B0%EB%B0%98-%EC%B9%B4%EB%B9%99&#34;&gt;파일 카빙&lt;/a&gt;이 필요합니다.
우선 파일 시그니처를 찾거나 유추해서 파일을 추출합니다.
이후 파일을 다시 패키징(repack)하여 게임에 적용합니다.&lt;/p&gt;
&lt;h3 id=&#34;love2d&#34;&gt;Love2D&lt;/h3&gt;
&lt;p&gt;Love2D 게임은 &lt;code&gt;.love&lt;/code&gt; 파일로 패키징되어 있습니다.
&lt;code&gt;.love&lt;/code&gt; 파일은 ZIP 파일 기반의 포맷입니다.
일반적인 unzip 도구로 압축을 풀면 게임 파일을 확인할 수 있지만,
패치 도구(Patch)를 만들기 위해 직접 언팩하려면 파일 시그니처를 찾아야 합니다.
ZIP 포맷의 파일 시그니처는 &lt;code&gt;PK&lt;/code&gt;이기 때문에 이를 찾아내어 파일을 추출하고,
Love2D 개발툴을 사용해서 다시 패키징합니다.&lt;/p&gt;
&lt;h3 id=&#34;고전-게임&#34;&gt;고전 게임&lt;/h3&gt;
&lt;p&gt;고전 게임은 롬 카트리지에 저장되어 있습니다.&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id=&#34;실시간-번역&#34;&gt;실시간 번역&lt;/h2&gt;
&lt;p&gt;화면에 스크립트가 렌더링되고 텍스트를 추출해서 번역하는 방식입니다.
그래서 딜레이가 꽤 있습니다.
번역 방식은 인터넷을 통해 기계 번역하는 방법과 미리 번역된 파일을 활용해서 치환하는 방법이 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;xunity-auto-translator&#34;&gt;XUnity Auto Translator&lt;/h3&gt;
&lt;p&gt;한국어가 없는 신규 출시 유니티 게임을 플레이하고 싶을 때 유저들이 많이 사용하는 편입니다.
&lt;strong&gt;BepInEx&lt;/strong&gt;을 사용해서 게임 텍스트를 추출하고 치환합니다.
다만 게임과의 충돌로 인해 게임이 실행되지 않을 수도 있고, 게임 플레이 도중에 진행 불가 버그가 발생할 수도 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bbepis/XUnity.AutoTranslator&#34;&gt;bbepis/XUnity.AutoTranslator&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://page.onstove.com/indie/global/view/9835166&#34;&gt;사용 방법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mort-monkeyheads-ocr-realtime-translator&#34;&gt;MORT (MonkeyHead&amp;rsquo;s OCR Realtime Translator)&lt;/h3&gt;
&lt;p&gt;국내 유저가 만들고 계속 업데이트 중인 툴입니다.
유니티 외 게임에서도 사용할 수 있습니다.
&lt;strong&gt;OCR&lt;/strong&gt;을 사용해서 화면에 출력된 텍스트를 읽는다고 합니다.
그래서 게임 텍스트 자체를 치환하는 것이 아닌 추가 레이어를 두기 때문에 게임 플레이 시 몰입을 방해할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.naver.com/killkimno/223497997082&#34;&gt;MORT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;더-읽을거리&#34;&gt;더 읽을거리&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.inven.co.kr/webzine/news/?news=289168&#34;&gt;[인터뷰] 저작권법과 유저 한글패치&lt;/a&gt; - 인벤 &amp;amp; 이철우 게임·엔터테인먼트 전문 변호사&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cafe.naver.com/hansicgu/19375&#34;&gt;더 다양한 한국어 패치 방법&lt;/a&gt; - 한식구&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ko.wikipedia.org/wiki/%ED%95%9C%EA%B8%80_%EC%99%84%EC%84%B1%ED%98%95_%EC%9D%B8%EC%BD%94%EB%94%A9&#34;&gt;한글 완성형 인코딩&lt;/a&gt; - 위키백과&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://namu.wiki/w/%EC%99%84%EC%84%B1%ED%98%95&#34;&gt;완성형 한글&lt;/a&gt; - 나무위키&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.law.go.kr/%EB%B2%95%EB%A0%B9/%EC%A0%80%EC%9E%91%EA%B6%8C%EB%B2%95/(20240828,20358,20240227)/%EC%A0%9C101%EC%A1%B0%EC%9D%984&#34;&gt;제101조의4(프로그램코드역분석)&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://steamdb.info/tech/&#34;&gt;What are games built with and what technologies do they use?&lt;/a&gt; - SteamDB&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;원본 패치 툴인 &lt;a href=&#34;https://github.com/SeriousCache/UABE&#34;&gt;UABE (Unity Asset Bundle Extractor)&lt;/a&gt;는 업데이트가 중단되었습니다.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.unity3d.com/6000.0/Documentation/Manual/scripting-backends-il2cpp.html&#34;&gt;IL2CPP&lt;/a&gt;는 유니티의 스크립트를 C++로 컴파일하는 기술입니다.
유니티는 기본적으로 &lt;strong&gt;Mono&lt;/strong&gt; 런타임을 사용해 C# 코드를 &lt;strong&gt;Intermediate Language — IL&lt;/strong&gt;로 컴파일하고,
이를 런타임에서 Just-In-Time (JIT) 방식으로 실행합니다.
&lt;strong&gt;AOT&lt;/strong&gt;(Ahead-of-Time Compilation) 컴파일은 런타임에서 코드를 컴파일하는 것이 아니라
미리 네이티브 코드로 컴파일하는 방식입니다.
JIT를 사용할 수 없는 플랫폼(ex: iOS, WebGL, Console)에서 사용됩니다.
IL2CPP는 AOT 방식의 일종으로 IL 코드를 C++ 코드로 변환 후 네이티브 코드로 컴파일합니다.
C++ 언어는 대부분의 플랫폼에서 지원되기 때문에 이 방식을 사용하면 플랫폼 호환성이 높아집니다.&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;롬 카트리지(&lt;a href=&#34;https://en.wikipedia.org/wiki/ROM_cartridge&#34;&gt;ROM cartridge&lt;/a&gt;)에 저장된 패키지 게임.
예를 들어, NES, GBA, NEOGEO, PS1 등의 콘솔 게임들이 있습니다.
파일 시그니처를 모른채 직접 추출하고 패치해야 해서 난이도가 어렵다고 생각합니다.&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
- https://markruler.github.io/posts/reverse-engineering/game-localization/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>파일 시그니처와 파일 카빙: 바이너리 데이터가 이상한 문자열로 표현되는 이유</title>
        <link>https://markruler.github.io/posts/reverse-engineering/file-signature/</link>
        <pubDate>Tue, 10 Dec 2024 22:46:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/reverse-engineering/file-signature/</guid>
        <description>임창수 https://markruler.github.io/posts/reverse-engineering/file-signature/ -&lt;h1 id=&#34;개요&#34;&gt;개요&lt;/h1&gt;
&lt;p&gt;이미지를 다운로드하면 응답 데이터로 이상한 문자열이 출력됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Youtube의 빈 썸네일 이미지를 다운로드 받습니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -L -o - https://i.ytimg.com/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;����JFIF���
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;�      !�
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;!&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;12ARaBqr��U�����������Qbd�������
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;                                  ?�@��t��2�4�2�4��&amp;amp;`�f�b��*)��6�j�pVZ7՚�ތC:#uf��§���&amp;lt;�Z�W
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;�oMku�@��&amp;lt;\�O����H����M?^_��n
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;                             Z��W�:&amp;gt;vW���ҟ˃lr�h�8e�z*ڷ�zw�ie4�
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;e�C�#:=(���R�&amp;#39;F��0���e�
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;                       �
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;                        ���T���9�p�z�n/1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;                                        �mSV��t�V�&amp;#34;&lt;/span&gt;��U �MI�;w��{O%��q
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                                     �[&lt;span style=&#34;color:#eedd82&#34;&gt;$x&lt;/span&gt;�7UV��⫫�t����=6�l�&lt;span style=&#34;color:#87ceeb&#34;&gt;`&lt;/span&gt;Si)u7	u�^z*UW��[���L�˭��a?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                                                                                            yn��mN���K��:��Z��&amp;amp;_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                                                                                                                ���{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ����j�sj�j-T���U�^m�2&lt;span style=&#34;color:#87ceeb&#34;&gt;\�&lt;/span&gt;O7��M�{�V�v��Vݝz�ԞRe|8��?�4qL5�i��Z��V�2e�ʝ��&amp;#39;����%zV����v�8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.A.@��F���&amp;gt;�8]�JU��ҕj�z�Vb~��o)*�Ҍ������/�n���{m�Ա��vI��U�qoZ�+U��Z{�&amp;amp;Z��;��B�������k�XЏR�;*t��	|J�-���ku�Kk5_s�[8�te��d�kĮl��%�{]�i���ɩ{5}%Y���in��sYa��*�ɭ��߯ko&amp;gt;��� f��,[��ٷ�h��?X|Yg�j?��1���s��t��� HJ�
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                             �^�f�4��Vނu-m�շ�����&lt;span style=&#34;color:#87ceeb&#34;&gt;`&lt;/span&gt;l���^���U{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                                            &amp;amp;H��%
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;�는 유니코드 replacement character(&lt;code&gt;U+FFFD&lt;/code&gt;)로, 해석할 수 없는 문자를 표시하기 위해 사용됩니다.&lt;/p&gt;
&lt;p&gt;이번엔 hexdump로 만들어주는 &lt;code&gt;xxd&lt;/code&gt; 명령어를 파이프로 이어보겠습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;whatis xxd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# xxd (1)              - make a hexdump or do the reverse.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -L -o - https://i.ytimg.com/ | xxd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;뭔지 모르겠지만 응답 데이터 앞쪽에 &lt;code&gt;JFIF&lt;/code&gt;가 적혀있습니다.
JFIF 파일 포맷일까요?
이후엔 또 알 수 없는 문자열이 출력됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                 Dload  Upload   Total   Spent    Left  Speed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;  &lt;span style=&#34;color:#f60&#34;&gt;1097&lt;/span&gt;  &lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;  &lt;span style=&#34;color:#f60&#34;&gt;1097&lt;/span&gt;    &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;     &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;   &lt;span style=&#34;color:#f60&#34;&gt;4712&lt;/span&gt;      &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; --:--:-- --:--:-- --:--:--  &lt;span style=&#34;color:#f60&#34;&gt;4728&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000: ffd8 ffe0 &lt;span style=&#34;color:#f60&#34;&gt;0010&lt;/span&gt; 4a46 &lt;span style=&#34;color:#f60&#34;&gt;4946&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0001&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0100&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0001&lt;/span&gt;  ......JFIF......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000010: &lt;span style=&#34;color:#f60&#34;&gt;0001&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; ffdb &lt;span style=&#34;color:#f60&#34;&gt;0084&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0005&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0304&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0705&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0705&lt;/span&gt;  ................
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000020: &lt;span style=&#34;color:#f60&#34;&gt;0505&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0506&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0508&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0506&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0505&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0505&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0805&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0507&lt;/span&gt;  ................
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000030: &lt;span style=&#34;color:#f60&#34;&gt;0508&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0505&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0509&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0608&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0905&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0513&lt;/span&gt; 0a1c 0b07  ................
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000040: 081a &lt;span style=&#34;color:#f60&#34;&gt;0908&lt;/span&gt; 050e &lt;span style=&#34;color:#f60&#34;&gt;2118&lt;/span&gt; 1a1d 111f 131f 130b  ......!.........
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000050: &lt;span style=&#34;color:#f60&#34;&gt;2218&lt;/span&gt; 221e 181c &lt;span style=&#34;color:#f60&#34;&gt;1213&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1201&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0505&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0507&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0607&lt;/span&gt;  &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;.............
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000060: &lt;span style=&#34;color:#f60&#34;&gt;0508&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0805&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1208&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0508&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt;  ................
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000070: &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt;  ................
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000080: &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt;  ................
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000090: &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1212&lt;/span&gt; ffc0 &lt;span style=&#34;color:#f60&#34;&gt;0011&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0800&lt;/span&gt;  ................
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000000a0: 5a00 &lt;span style=&#34;color:#f60&#34;&gt;7803&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0122&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0002&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1101&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0311&lt;/span&gt; 01ff c400  Z.x..&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;..........
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;000000b0: 1b00 0100 0203 0101 0000 0000 0000 0000  ................
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;000000c0: 0000 0001 0402 0307 0605 ffc4 003d 1000  .............=..
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;000000d0: 0201 0203 0307 060d 0500 0000 0000 0000  ................
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;000000e0: 0201 0304 0511 1206 1321 0722 3132 4152  .........!.&amp;#34;&lt;/span&gt;12AR
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000000f0: &lt;span style=&#34;color:#f60&#34;&gt;6114&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4271&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;7292&lt;/span&gt; d215 &lt;span style=&#34;color:#f60&#34;&gt;5581&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;8491&lt;/span&gt; 94b1 c1c2  a.Bqr...U.......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000100: c3d1 d3f0 &lt;span style=&#34;color:#f60&#34;&gt;1751&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;6264&lt;/span&gt; b3ff c400 &lt;span style=&#34;color:#f60&#34;&gt;1401&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0100&lt;/span&gt;  .....Qbd........
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000110: &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; 00ff  ................
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000120: c400 &lt;span style=&#34;color:#f60&#34;&gt;1411&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0100&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt;  ................
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000130: &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; 00ff da00 0c03 &lt;span style=&#34;color:#f60&#34;&gt;0100&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0211&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0311&lt;/span&gt;  ................
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000140: 003f 00ef &lt;span style=&#34;color:#f60&#34;&gt;4000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0098&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;8274&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;8188&lt;/span&gt; 32d0  .?..@......t..2.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000150: &lt;span style=&#34;color:#f60&#34;&gt;3401&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;8832&lt;/span&gt; d034 &lt;span style=&#34;color:#f60&#34;&gt;8188&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2660&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;8000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt;  4..2.4..&amp;amp;&lt;span style=&#34;color:#87ceeb&#34;&gt;`&lt;/span&gt;......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000160: &lt;span style=&#34;color:#f60&#34;&gt;0010&lt;/span&gt; 66aa 62a5 8a2a &lt;span style=&#34;color:#f60&#34;&gt;0129&lt;/span&gt; 1b96 81f2 &lt;span style=&#34;color:#f60&#34;&gt;3683&lt;/span&gt;  ..f.b..*.)....6.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000170: 6aec &lt;span style=&#34;color:#f60&#34;&gt;7056&lt;/span&gt; 5a37 1bda d59a 15da de8c 433a  j.pVZ7........C:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000003b0: 495a 369b c7de cae4 af5a &lt;span style=&#34;color:#f60&#34;&gt;5251&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1297&lt;/span&gt; 7a63  IZ6......ZRQ..zc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000003c0: &lt;span style=&#34;color:#f60&#34;&gt;5673&lt;/span&gt; 97de 74ba 8c06 a620 &lt;span style=&#34;color:#f60&#34;&gt;4800&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt;  Vs..t.... H.....
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000003d0: 4ac9 000d 9ab5 &lt;span style=&#34;color:#f60&#34;&gt;7359&lt;/span&gt; 61a3 bb2a b31e c9ad  J.....sYa..*....
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000003e0: adad dfaf 6b6f 3eb5 bd19 fc20 &lt;span style=&#34;color:#f60&#34;&gt;6606&lt;/span&gt; a6c3  ....ko&amp;gt;.... f...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000003f0: 2c5b ad87 d9b7 cd68 fba6 3f04 587c &lt;span style=&#34;color:#f60&#34;&gt;5967&lt;/span&gt;  ,[.....h..?.X|Yg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000400: f56a 3fa1 bf31 981a d70c b25e ae1f 66bf  .j?..1.....^..f.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000410: 34a3 ee9b 56de &lt;span style=&#34;color:#f60&#34;&gt;8275&lt;/span&gt; 2d6d d3d5 b7a2 bf84  4...V..u-m......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000420: 8cc6 606c 97ec ec5e aac7 058f 557b 0c26  ..&lt;span style=&#34;color:#87ceeb&#34;&gt;`&lt;/span&gt;l...^....U{.&amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000430: &lt;span style=&#34;color:#f60&#34;&gt;4800&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt;  H...............
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000440: &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0000&lt;/span&gt; 7fff d9                   .........
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이는 이진(binary) 데이터를 16진수(hexadecimal) 혹은 터미널, 브라우저와 같은 실행 프로그램에서 지원하는 문자열로 표현된 것입니다.&lt;/p&gt;
&lt;p&gt;이번엔 HTML 문서를 PDF로 변환해서 응답하는 서버로 테스트 해보겠습니다.
&lt;a href=&#34;https://github.com/markruler/htmltopdf&#34;&gt;데모 서버&lt;/a&gt;를 실행 후
다음과 같은 코드로 요청을 보내면 PDF 파일을 받을 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;let&lt;/span&gt; myHeaders = &lt;span style=&#34;color:#f00&#34;&gt;new&lt;/span&gt; Headers();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;myHeaders.append(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;application/x-www-form-urlencoded&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;let&lt;/span&gt; urlencoded = &lt;span style=&#34;color:#f00&#34;&gt;new&lt;/span&gt; URLSearchParams();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;urlencoded.append(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;html&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&amp;lt;div&amp;gt;&amp;lt;span&amp;gt;Test&amp;lt;/span&amp;gt; Text&amp;lt;/div&amp;gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;urlencoded.append(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;css&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;span{color:red;}span{font-size:30px;}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;urlencoded.append(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;orientation&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;landscape&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;urlencoded.append(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;filename&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;test-filename&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;let&lt;/span&gt; requestOptions = {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  method: &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  headers: myHeaders,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  body: urlencoded,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  redirect: &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;follow&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fetch(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;/pdf/content&amp;#34;&lt;/span&gt;, requestOptions)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .then(response =&amp;gt; response.text())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .then(result =&amp;gt; console.log(result))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#f00&#34;&gt;catch&lt;/span&gt;(error =&amp;gt; console.log(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;, error));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;console.log()&lt;/code&gt;로 출력된 응답 데이터는 &lt;code&gt;%PDF&lt;/code&gt;라는 문자를 시작으로 다양한 형식의 데이터가 혼합되어 있습니다.
PDF 형식이라는 것을 유추할 수 있습니다.
반면 네트워크 패널에서 응답(Response) 데이터는 16진수로 표현됩니다.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/reverse-engineering/file-signature/hex-pdf.png&#34; alt=&#34;Hexadecimal PDF&#34;&gt;&lt;/p&gt;
&lt;p&gt;크롬 브라우저는 그동안 네트워크 패널에서 바이너리 데이터를 응답받으면
&amp;ldquo;The request has no response data available.&amp;ldquo;이라는 메시지와 함께 표시하지 않거나 UTF-8로 디코딩하여 출력했습니다.
최근 업데이트&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; 이후 16진수로 표현하도록 변경되었습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/reverse-engineering/file-signature/google-chrome-123.0.6312.122-network-img-response.png&#34; alt=&#34;google-chrome-123.0.6312.122-network-img-response&#34;&gt;&lt;/p&gt;
&lt;p&gt;크롬의 Preview 탭은 해당 파일 포맷에 맞게 미리보기가 출력됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/reverse-engineering/file-signature/google-chrome-123.0.6312.122-network-img-preview.png&#34; alt=&#34;google-chrome-123.0.6312.122-network-img-preview&#34;&gt;&lt;/p&gt;
&lt;p&gt;그렇다면 이 괴상한 문자열들은 어떻게 해석해야 할까요?&lt;/p&gt;
&lt;h1 id=&#34;파일-시그니처&#34;&gt;파일 시그니처&lt;/h1&gt;
&lt;p&gt;파일 시그니처(File Signature)는 파일의 특정 부분에 위치한 고유한 바이트 패턴입니다.
파일이 어떤 포맷인지 알려주는 식별자 역할을 합니다.
매직 넘버(magic numbers)라고도 부르죠.&lt;/p&gt;
&lt;p&gt;실행 프로그램(Reader)들은 파일 시그니처를 확인하여 파일 포맷을 판별하고,
해당 파일 포맷에 맞게 데이터를 해석하고 표현합니다.
가장 먼저 봤던 &lt;code&gt;JFIF&lt;/code&gt; 파일이나 &lt;code&gt;%PDF&lt;/code&gt; 모두 파일의 앞쪽에 위치하는 헤더 시그니처입니다.
(모든 파일 형식이 이름과 동일하게 시그니처를 정하진 않습니다.)&lt;/p&gt;
&lt;p&gt;파일의 시그니처를 확인하는 번거로운 작업을 줄이기 위해
웹에서는 응답 헤더에 &amp;ldquo;Content-Type&amp;quot;을 지정하고
GUI 환경 데스크탑에서는 &amp;ldquo;파일 확장자(File Extension)&amp;ldquo;를 지정합니다.&lt;/p&gt;
&lt;h1 id=&#34;파일-카빙&#34;&gt;파일 카빙&lt;/h1&gt;
&lt;p&gt;파일 카빙(File Carving)은 파일 시그니처 기반으로 저장 매체에서 파일 내용을 복구하는 기술입니다&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dfrc.korea.ac.kr/&#34;&gt;DFRC (Digital Forensic Research Center)&lt;/a&gt; 자료를 참조했습니다.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20180815025824/http://forensic.korea.ac.kr/DFWIKI/index.php/%EB%8D%B0%EC%9D%B4%ED%84%B0_%EB%B3%B5%EA%B5%AC&#34;&gt;파일 복구&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/URsDgiD0FwA?list=PLx4zTdLSy3x7wBShSxO-gykGUPrH1LF4L&amp;amp;t=1657&#34;&gt;램 슬랙&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-시그니처-기반-카빙&#34;&gt;1. 시그니처 기반 카빙&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;주요 과정
&lt;ul&gt;
&lt;li&gt;header 시그니처 탐지: 저장 매체의 로우 데이터(raw data)에서 파일 헤더 시그니처를 검색합니다.&lt;/li&gt;
&lt;li&gt;footer 시그니처 탐지: 같은 방식으로 파일의 푸터 시그니처를 검색합니다.&lt;/li&gt;
&lt;li&gt;데이터 추출: 헤더 시그니처와 푸터 시그니처 사이의 데이터를 추출하여 파일로 복원합니다.&lt;/li&gt;
&lt;li&gt;파일 검사 및 재구성: 복원된 파일의 무결성과 유효성을 검사하여 제대로 복구되었는지 확인합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;한계점
&lt;ul&gt;
&lt;li&gt;조각난 파일(Fragmented File): 파일이 여러 조각으로 분리되어 저장된 경우 복구가 어렵습니다.&lt;/li&gt;
&lt;li&gt;파일 손상: 데이터 일부가 손실되었거나 덮어씌워진 경우 복원이 불완전할 수 있습니다.&lt;/li&gt;
&lt;li&gt;정확도: 잘못된 시그니처 탐지로 인해 오탐(False Positive)이 발생할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-파일-구조체-카빙&#34;&gt;2. 파일 구조체 카빙&lt;/h2&gt;
&lt;p&gt;파일의 내부 구조를 분석하고 검증하여 파일을 복구합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파일 미리보기 지원하는 파일은 파일 포맷 내부에 실제 내용과 썸네일(Thumbnail)을 포함하는데,
썸네일도 해당 파일 포맷과 동일한 구조로 되어 있어 시그니처가 2개 이상 존재합니다.&lt;/li&gt;
&lt;li&gt;ZIP 파일의 경우 헤더 시그니처가 &lt;code&gt;PK34&lt;/code&gt;(hex: &lt;code&gt;50 4B 03 04&lt;/code&gt;)이며, 푸터 시그니처가 &lt;code&gt;PK56&lt;/code&gt;(hex: &lt;code&gt;50 4B 05 06&lt;/code&gt;) 입니다.
파일 헤더에는 파일 크기와 CRC32 체크섬이 포함된 메타데이터가 있습니다.
단편화된 파일을 재구성하는 경우 파일 구조를 바탕으로 데이터 블록을 논리적으로 연결합니다.
이후 메타데이터에서 체크섬을 검증하여 파일의 무결성을 확인합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-램-슬랙-카빙&#34;&gt;3. 램 슬랙 카빙&lt;/h2&gt;
&lt;p&gt;파일의 내용을 디스크에 기록할 때 파일 크기가 512의 배수가 되지 않으면 &lt;code&gt;0x00&lt;/code&gt;으로 채워지는 영역을 램 슬랙이라고 합니다.
디스크 섹터의 크기가 512 bytes일 때 파일의 크기가 512의 배수가 아닌 경우 나머지 부분은 램 슬랙으로 채워집니다.
시그니처 기반 카빙 기법에서 푸터 시그니처와 함께 램 슬랙을 확인하게 되면 많은 오탐을 줄일 수 있습니다.&lt;/p&gt;
&lt;h1 id=&#34;더-읽을거리&#34;&gt;더 읽을거리&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/M-_Fdgf9IZo?list=PLx4zTdLSy3x7wBShSxO-gykGUPrH1LF4L&#34;&gt;(Youtube) 디지털 데이터의 저장과 표현: 문자 코드와 파일&lt;/a&gt; - DFRC (Digital Forensic Research Center)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.garykessler.net/library/file_sigs.html&#34;&gt;GCK&amp;rsquo;S FILE SIGNATURES TABLE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_file_signatures&#34;&gt;List of file signatures&lt;/a&gt; - Wikipedia&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.file-recovery.com/signatures.htm&#34;&gt;The concept of file signatures recovery&lt;/a&gt; - Active@ File Recovery&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/File_carving&#34;&gt;File Carving&lt;/a&gt; - Wikipedia&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.chrome.com/docs/devtools/memory-inspector&#34;&gt;Memory Inspector&lt;/a&gt;가 네트워크 패널에도 적용된 것으로 보입니다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;정확히 언제인지는 모르겠지만 Google Chrome 131 전후로&amp;hellip;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://youtu.be/60FtdnBey-E?list=PLx4zTdLSy3x7wBShSxO-gykGUPrH1LF4L&amp;amp;t=745&#34;&gt;(Youtube) 삭제 파일 복구 기술&lt;/a&gt; - DFRC (Digital Forensic Research Center)&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
- https://markruler.github.io/posts/reverse-engineering/file-signature/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>웹 페이지 응답 방법과 프레임워크</title>
        <link>https://markruler.github.io/posts/web/respond-web-page/</link>
        <pubDate>Sun, 24 Nov 2024 23:32:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/web/respond-web-page/</guid>
        <description>임창수 https://markruler.github.io/posts/web/respond-web-page/ -&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#cgi-common-gateway-interface&#34;&gt;CGI (Common Gateway Interface)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ssr-server-side-rendering&#34;&gt;SSR (Server-Side Rendering)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EC%84%9C%EB%B2%84-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%97%94%EC%A7%84&#34;&gt;서버 템플릿 엔진&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#csr-client-side-rendering&#34;&gt;CSR (Client-side Rendering)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#spa-single-page-application&#34;&gt;SPA (Single Page Application)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#web-api-web-component&#34;&gt;Web API: Web Component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pwa-progressive-web-apps&#34;&gt;PWA (Progressive Web Apps)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ssg-static-site-generation&#34;&gt;SSG (Static Site Generation)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cms-content-management-system&#34;&gt;CMS (Content Management System)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#micro-frontend-architecture-mfa&#34;&gt;Micro Frontend Architecture (MFA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EC%95%84%EC%9D%BC%EB%9E%9C%EB%93%9C-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90-island-architecture&#34;&gt;아일랜드 아키텍쳐 Island Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EC%9B%B9%EB%B7%B0webview---%EB%AA%A8%EB%B0%94%EC%9D%BC-%EC%95%B1%EC%97%90%EC%84%9C&#34;&gt;웹뷰(WebView) - 모바일 앱에서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EB%8D%94-%EC%9D%BD%EC%9D%84%EA%B1%B0%EB%A6%AC&#34;&gt;더 읽을거리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;cgi-common-gateway-interface&#34;&gt;CGI (Common Gateway Interface)&lt;/h1&gt;
&lt;p&gt;웹 서버와 외부 프로그램(애플리케이션) 간에 데이터를 주고받기 위한 인터페이스다.
웹 서버가 클라이언트(브라우저)로부터 요청을 받으면, CGI 프로그램을 호출하여 동적으로 콘텐츠를 생성한 뒤, 그 결과를 클라이언트에 반환한다.&lt;/p&gt;
&lt;h1 id=&#34;ssr-server-side-rendering&#34;&gt;SSR (Server-Side Rendering)&lt;/h1&gt;
&lt;p&gt;서버에서 콘텐츠를 렌더링하여 완전한 HTML을 클라이언트에게 전달한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;여기서 렌더링한다는 의미는 화면을 그린다는 게 아니라 DOM 구조를 만든다는 것이다.&lt;/li&gt;
&lt;li&gt;렌더링을 서버에서 수행하기 때문에 CSR에 비해 상대적으로 최초 페이지 응답 속도가 느리다.
&lt;ul&gt;
&lt;li&gt;서버가 한국에 있고 클라이언트가 해외에 있다면 빈 페이지도 받지 못하고 오래 기다리게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;검색 엔진 봇이 완전한 HTML을 받기 때문에 SEO에 유리하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;서버-템플릿-엔진&#34;&gt;서버 템플릿 엔진&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Tomcat의 Jasper
&lt;ul&gt;
&lt;li&gt;JSP(JavaServer Pages) 파일을 서블릿 코드로 변환하고 컴파일하는 데 사용되는 JSP 엔진이다.&lt;/li&gt;
&lt;li&gt;include 지시어를 사용해서 여러 부분으로 코드 조각을 나눌 수 있다.&lt;/li&gt;
&lt;li&gt;static include 방식을 이용해 빌드된 React, Vue 프로젝트의 &lt;code&gt;index.html&lt;/code&gt;을 포함시킬 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Microsoft의 Razor
&lt;ul&gt;
&lt;li&gt;C# 코드와 HTML을 결합한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Twig, Smarty, Blade
&lt;ul&gt;
&lt;li&gt;PHP 템플릿 엔진들이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;csr-client-side-rendering&#34;&gt;CSR (Client-side Rendering)&lt;/h1&gt;
&lt;p&gt;클라이언트(브라우저)에서 콘텐츠를 렌더링한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;물을 부어 보충한다는 의미로 Hydration이라고도 한다. 초기 렌더링(SSR)과 구분지어 표현하기 위해 사용하는 듯하다.&lt;/li&gt;
&lt;li&gt;서버에서 HTML 문서를 응답받아서 브라우저가 DOM을 렌더링 한 후 추가로 렌더링한다.&lt;/li&gt;
&lt;li&gt;경우에 따라 오리진 서버에서 받을 필요가 없기 때문에 캐시된 문서를 받을 수 있다.&lt;/li&gt;
&lt;li&gt;동일한 페이지라면 서버에서 렌더링하는 SSR보다 페이지 응답 속도가 빠르다.&lt;/li&gt;
&lt;li&gt;검색 엔진 봇이 크롤링할 때 빈 페이지로 보인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spa-single-page-application&#34;&gt;SPA (Single Page Application)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Vue, React, Angular&lt;/li&gt;
&lt;li&gt;사용자가 웹 애플리케이션 상호 작용할 때 전체 페이지를 새로 고치지 않고, 필요한 데이터만 서버와 교환하여 동적으로 콘텐츠를 업데이트하는 웹 애플리케이션 구조다.&lt;/li&gt;
&lt;li&gt;Vue를 JSP와 비교해서 예를 들면,
&lt;ul&gt;
&lt;li&gt;Vue App
&lt;ul&gt;
&lt;li&gt;JSP 페이지 하나와 동일.&lt;/li&gt;
&lt;li&gt;컴포넌트들의 모임.&lt;/li&gt;
&lt;li&gt;여러 JSP로 분리시켜서 include한다면 include 지시어가 명시된 root 페이지가 app&lt;/li&gt;
&lt;li&gt;정확하게는 다름. JSP는 Component 단위별로 분리하는 것이 아니라 head, footer, 공통 스크립트 등으로 분리하는 경우가 많음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vue Component
&lt;ul&gt;
&lt;li&gt;공통 컴포넌트.&lt;/li&gt;
&lt;li&gt;분리된 JSP.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;web-api-web-component&#34;&gt;Web API: Web Component&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;그 기능을 나머지 코드로부터 캡슐화하여 재사용 가능한 커스텀 엘리먼트를 생성하고 웹 앱에서 활용할 수 있도록 해주는 다양한 기술들의 모음.&lt;/li&gt;
&lt;li&gt;표준이기 때문에 React, Vue와 같은 프레임워크에 종속되지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pwa-progressive-web-apps&#34;&gt;PWA (Progressive Web Apps)&lt;/h2&gt;
&lt;p&gt;단일 코드베이스로 모든 기기의 모든 웹 사용자에게 도달하는 동시에 향상된 기능을 제공하기 위해 최신 API로 빌드되고 향상된 웹 앱이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;캐시된 페이지를 기반으로 오프라인에서도 동작할 수 있다.&lt;/li&gt;
&lt;li&gt;웹 앱이지만 모바일 앱처럼 설치할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;ssg-static-site-generation&#34;&gt;SSG (Static Site Generation)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Gatsby(Javascript), Hugo(Go), Jekyll(Ruby)&lt;/li&gt;
&lt;li&gt;주로 템플릿을 활용해서 정적 웹 페이지를 생성 후 웹 서버로 서빙한다.&lt;/li&gt;
&lt;li&gt;동적 데이터가 필요없는 경우 사용할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://markruler.github.io/&#34;&gt;블로그&lt;/a&gt;나 &lt;a href=&#34;https://beott.kr/&#34;&gt;웹진&lt;/a&gt;, 혹은 회사 소개 페이지 등에 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;cms-content-management-system&#34;&gt;CMS (Content Management System)&lt;/h1&gt;
&lt;p&gt;웹사이트나 애플리케이션의 콘텐츠를 생성, 수정, 관리, 출판할 수 있는 시스템이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;구축되면 개발자가 아닌 사람도 쉽게 글을 작성할 수 있다.&lt;/li&gt;
&lt;li&gt;잼스택(JAMStack)
&lt;ul&gt;
&lt;li&gt;DB 없이 JavaScript, API, Markup을 기반으로 하는 웹 아키텍처.&lt;/li&gt;
&lt;li&gt;내 블로그처럼 Hugo로 빌드한 웹 사이트를 GitHub Pages로 배포한 것도 JAMStack에 해당한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DB 사용
&lt;ul&gt;
&lt;li&gt;스트라피(Strapi), 워드프레스(WordPress), 줌라(Joomla), 드루팔(Drupal)&lt;/li&gt;
&lt;li&gt;CMS를 위한 별도 DB와 서버를 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;micro-frontend-architecture-mfa&#34;&gt;Micro Frontend Architecture (MFA)&lt;/h1&gt;
&lt;p&gt;각 &amp;lsquo;마이크로-프론트엔드&amp;rsquo;는 독립적으로 개발 및 배포가 가능하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;각자 다른 기술 스택을 사용할 수도 있다.&lt;/li&gt;
&lt;li&gt;대규모 프로젝트에서 서로 다른 팀들이 각각의 프론트엔드 파트를 개발하는 데 적합하다.&lt;/li&gt;
&lt;li&gt;하나의 app(페이지)에 여러 app 혹은 component가 포함된다.&lt;/li&gt;
&lt;li&gt;혹은 하나의 프로젝트에 여러 app이 포함된다.
&lt;ul&gt;
&lt;li&gt;어떤 페이지는 JSP, 어떤 페이지는 React, 어떤 페이지는 Vue.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;아일랜드-아키텍쳐-island-architecture&#34;&gt;아일랜드 아키텍쳐 Island Architecture&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;웹페이지의 필요에 따라 일부는 SSG로 렌더링하고, 일부는 Progressive Hydration(Re-hydration)한다.
&lt;ul&gt;
&lt;li&gt;필요할 때만 자바스크립트를 로드하여 성능을 최적화한다.&lt;/li&gt;
&lt;li&gt;전체 페이지가 아니라 개별 컴포넌트 단위로 자바스크립트를 실행해 불필요한 코드 로드를 방지한다.&lt;/li&gt;
&lt;li&gt;하나의 app(페이지)에 여러 프레임워크의 Component가 있을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;대표적으로 Astro, Ebay의 Marko 같은 도구가 Island Architecture를 지원한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;웹뷰webview---모바일-앱에서&#34;&gt;웹뷰(WebView) - 모바일 앱에서&lt;/h1&gt;
&lt;p&gt;웹뷰란 네이티브 앱에 내재되어 있는 웹 브라우저다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;특별한 경우가 아니라면 앱 스토어의 검수를 받을 필요가 없기 때문에 자주 업데이트 할 수 있다.&lt;/li&gt;
&lt;li&gt;네이티브 앱은 서버에서 웹 페이지를 응답 받을 필요없이 디바이스에서 바로 렌더링한다. 반면 웹뷰는 서버에서 웹 페이지를 받아야 하기 때문에 레이턴시가 발생한다.&lt;/li&gt;
&lt;li&gt;네이티브 앱은 수정 사항을 배포할 때 앱 스토어의 검수가 필요하다. (약 1~3일 소요)&lt;/li&gt;
&lt;li&gt;웹뷰만으로 구성된 앱은 스토어 심사가 어려울 수도 있다.&lt;/li&gt;
&lt;li&gt;추가로 고려해야 할 부분: 웹뷰 간 이동, 웹뷰-네이티브 간 이동, 뒤로가기 제스처나 버튼, DeepLink&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;더-읽을거리&#34;&gt;더 읽을거리&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://patterns-dev-kr.github.io/&#34;&gt;모던 웹 앱 디자인 패턴&lt;/a&gt; | Patterns.dev.kr
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.patterns.dev/&#34;&gt;origin&lt;/a&gt; | Patterns.dev&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CMS
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/pinkfong/strapi-1%EB%85%84%EC%9D%B4%EB%A9%B4-%ED%92%80%EC%8A%A4%ED%83%9D%EC%9D%84-%EC%9D%8A%EB%8A%94%EB%8B%A4-part-1-2-5641f5651097&#34;&gt;Strapi 1년이면 풀스택을 읊는다&lt;/a&gt; | 더핑크퐁컴퍼니&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PWA
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.dev/articles/what-are-pwas&#34;&gt;What are Progressive Web Apps?&lt;/a&gt; | web.dev&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web Components
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ko/docs/Web/API/Web_components&#34;&gt;Web Components&lt;/a&gt; | MDN Web Docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ko/docs/Web/API/Web_components/Using_custom_elements&#34;&gt;Using custom elements&lt;/a&gt; | MDN Web Docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ko/docs/Web/API/Web_components/Using_shadow_DOM&#34;&gt;Using shadow DOM&lt;/a&gt; | MDN Web Docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_templates_and_slots&#34;&gt;Using templates and slots&lt;/a&gt; | MDN Web Docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ui.toast.com/posts/ko_20171215&#34;&gt;웹 컴포넌트(5) - lit-html로 React 처럼 코딩하기&lt;/a&gt; | TOAST UI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;아일랜드 아키텍쳐
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://patterns-dev-kr.github.io/rendering-patterns/the-island-architecture/&#34;&gt;The Island Architecture&lt;/a&gt; | Patterns.dev.kr&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;웹뷰
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.tosspayments.com/resources/glossary/webview&#34;&gt;웹뷰(WebView)&lt;/a&gt; | Toss Payments 용어 사전&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/4UD4EB00AME&#34;&gt;아니, 여기도 웹뷰였어요?&lt;/a&gt; | 2024 당근 테크 밋업&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://boostbrothers.github.io/hospital-detail-webview/&#34;&gt;병원 상세 웹뷰 통신 및 크로스 브라우징&lt;/a&gt; | BBROS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://markruler.github.io/posts/web/respond-web-page/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>Facebook은 경쟁사의 암호화된 모바일 앱 트래픽을 어떻게 가로챘을까?</title>
        <link>https://markruler.github.io/posts/network/onavo-facebook-ssl-mitm-technical-analysis/</link>
        <pubDate>Thu, 12 Sep 2024 00:17:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/network/onavo-facebook-ssl-mitm-technical-analysis/</guid>
        <description>임창수 https://markruler.github.io/posts/network/onavo-facebook-ssl-mitm-technical-analysis/ -&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://doubleagent.net/onavo-facebook-ssl-mitm-technical-analysis/&#34;&gt;How did Facebook intercept their competitor&amp;rsquo;s encrypted mobile app traffic?&lt;/a&gt;
| &lt;a href=&#34;https://x.com/haxrob&#34;&gt;HaxRob&lt;/a&gt;, 2024년 4월 14일&lt;/li&gt;
&lt;li&gt;저자의 허락을 받고 번역했습니다.&lt;/li&gt;
&lt;li&gt;각주는 역주입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;이 글은 페이스북(Facebook) 집단 소송에서 밝혀진 정보를 바탕으로 한 기술 조사입니다.
페이스북은 경쟁사의 정보를 얻기 위해 Onavo Protect 앱을 실행 중인 사용자 기기에서 암호화된 트래픽을 도청했었다는 이유로 재판이 진행 중입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/network/onavo-facebook-ssl-mitm-technical-analysis/fbdark-1.webp&#34; alt=&#34;How did Facebook intercept their competitor&amp;rsquo;s encrypted mobile app traffic?&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;2024년 7월 28일 - 👋Hello &lt;a href=&#34;https://news.ycombinator.com/item?id=41090304&#34;&gt;Hackernews&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;현재 메타(Meta)를 상대로 한 집단 소송이 진행 중이며,
법원 문서에 따르면* 메타가 &lt;a href=&#34;https://en.wikipedia.org/wiki/Electronic_Communications_Privacy_Act&#34;&gt;도청법(Wiretap Act)&lt;/a&gt;을 위반했을 가능성이 있다고 언급되어 있습니다.
이 글에서의 분석은 &lt;a href=&#34;https://www.documentcloud.org/documents/24520332-merged-fb&#34;&gt;법원 문서&lt;/a&gt; 내용과
안드로이드(Android) 용 Onavo Protect 앱 패키지의 아카이브된 버전을 리버스 엔지니어링한 결과를 바탕으로 하고 있습니다.&lt;/p&gt;
&lt;p&gt;법원 문서에 따르면, 페이스북이 사용자의 암호화된 HTTPS 트래픽을 가로채기 위해
&lt;a href=&#34;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&#34;&gt;중간자 공격(MITM)&lt;/a&gt;으로 간주될 수 있는 방법을 사용했다고 합니다.
페이스북은 이 기술을 &amp;ldquo;ssl bump&amp;quot;라고 불렀으며,
이는 &lt;a href=&#34;https://www.squid-cache.org/&#34;&gt;Squid 캐싱&lt;/a&gt; 프록시 소프트웨어의 transparent proxy &lt;a href=&#34;https://www.squid-cache.org/Doc/config/ssl_bump/&#34;&gt;기능 (ssl_bump)&lt;/a&gt;에서 유래된 이름입니다.
해당 기술은 스냅챗(Snapchat), 유튜브(YouTube), 아마존(Amazon)의 특정 도메인을 (추정컨대) 복호화하는 데 사용되었다고 합니다.
이 사건에 대한 추가 배경 정보는 최근 &lt;a href=&#34;https://techcrunch.com/2024/03/26/facebook-secret-project-snooped-snapchat-user-traffic/&#34;&gt;TechCrunch&lt;/a&gt; 기사를 읽어볼 것을 권장합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[2024-07-28] - 이는 &lt;a href=&#34;https://techcrunch.com/2019/01/29/facebook-project-atlas/&#34;&gt;2019년에 TechCrunch가 공개한&lt;/a&gt; 내용과 다릅니다.
당시 페이스북은 10대 청소년들에게 사용 습관 데이터를 수집하기 위해 돈을 지불했고,
그 결과 Onavo 앱은 앱 스토어에서 삭제되고 &lt;a href=&#34;https://www.accc.gov.au/media-release/20m-penalty-for-meta-companies-for-conduct-liable-to-mislead-consumers-about-use-of-their-data&#34;&gt;벌금이 부과되었습니다&lt;/a&gt;.
이번에 새롭게 밝혀진 중간자 공격(MITM) 정보와 관련하여, 현재 명확하지 않은 점은 모든 앱 사용자의 트래픽이 &amp;ldquo;가로채기&amp;rdquo; 되었는지, 아니면 일부 사용자만 해당되었는지입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;*한 HN 사용자는 다음과 같이 &lt;a href=&#34;https://news.ycombinator.com/item?id=41091505&amp;amp;ref=doubleagent.net&#34;&gt;명확히 합니다&lt;/a&gt;.&lt;br&gt;
&lt;br&gt;
&amp;ldquo;이것은 도청법 위반 소송이 아닙니다. 독점 금지 소송으로, 청구 내용은 모두 셔먼법&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 위반에 관한 것입니다.
원고 측 변호사들이 자료 조사 과정에서 페이스북이 도청법을 위반했을 가능성이 있다는 증거를 &lt;em&gt;우연히&lt;/em&gt; 발견했습니다.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://doubleagent.net/content/images/2024/07/image-1.png&#34; alt=&#34;Case 3:20-cv-08570-JD Document 735 Filed 03/23/24 Page 1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;*Case 3:20-cv-08570-JD Document 735 Filed 03/23/24 Page 1&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;이 글은 제한적이고 부분적인 정보로 인해 일부 사실이 부정확하거나 불완전할 수 있습니다.
따라서 수정이 필요하거나 새로운 사실이 발견될 경우 이 글은 업데이트될 수 있습니다.
새로운 콘텐츠를 받아보고 싶으시면 &lt;a href=&#34;https://doubleagent.net/onavo-facebook-ssl-mitm-technical-analysis/&#34;&gt;저자의 블로그&lt;/a&gt;를 구독하시거나
&lt;a href=&#34;https://twitter.com/haxrob&#34;&gt;저자의 X&lt;/a&gt;를 팔로우하세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%EA%B0%9C%EC%9A%94&#34;&gt;개요&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EB%8F%99%EA%B8%B0&#34;&gt;동기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EB%B6%84%EC%84%9D&#34;&gt;분석&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ca-%EC%9D%B8%EC%A6%9D%EC%84%9C&#34;&gt;CA 인증서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%ED%95%B5%EC%8B%AC-%EC%A7%88%EB%AC%B8%EC%9C%BC%EB%A1%9C-%EB%8F%8C%EC%95%84%EA%B0%80%EC%84%9C&#34;&gt;핵심 질문으로 돌아가서&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EB%98%90-%EB%AC%B4%EC%97%87%EC%9D%B4-%EC%9E%88%EC%9D%84%EA%B9%8C%EC%9A%94&#34;&gt;또 무엇이 있을까요?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EB%A7%88%EB%AC%B4%EB%A6%AC&#34;&gt;마무리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;개요&#34;&gt;개요&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.androidrank.org/application/onavo_protect_from_facebook/com.onavo.spaceship&#34;&gt;1,000만 건&lt;/a&gt;이 넘는
안드로이드 설치를 기록한 &lt;a href=&#34;https://apkpure.com/onavo-protect-from-facebook/com.onavo.spaceship&#34;&gt;Onavo Protect 안드로이드 앱&lt;/a&gt;에는
기기의 사용자 신뢰 저장소(user trust store)에 &amp;ldquo;Facebook Research&amp;quot;에서 발급한 CA(인증 기관) 인증서를 설치하도록 유도하는 코드가 포함되어 있었습니다.
이 인증서는 페이스북이 TLS 트래픽을 복호화하기 위해 필요했습니다.&lt;/li&gt;
&lt;li&gt;2016년에 배포된 일부 구 버전 앱에는 embedded assets으로 Facebook Research CA 인증서가 포함되어 있습니다.
그 중 하나의 인증서는 2027년까지 유효합니다.
법원 문서의 자료 조사 내용에 따르면, 인증서는 &amp;ldquo;서버에서 생성되어 기기로 전송된다&amp;quot;고 명시되어 있습니다.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;ssl bump&amp;rdquo; 기능이 Protect 앱에 도입된 직후, 최신 버전의 안드로이드가 출시되었으며,
이 버전에는 향상된 보안 제어 기능이 포함되어 있어 이 방법이 최신 운영체제를 사용하는 기기에서는 더 이상 작동하지 않게 되었습니다.&lt;/li&gt;
&lt;li&gt;이전 스냅챗 앱을 검토한 결과, 해당 앱의 분석 도메인(analytics domain)은 인증서 고정&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;을 적용하지 않았음을 알 수 있었습니다.
이는 중간자 공격(MITM) 또는 &amp;ldquo;ssl bumping&amp;quot;이 앞서 설명한 대로 작동했을 가능성이 있음을 의미합니다.&lt;/li&gt;
&lt;li&gt;사용자가 부여한 권한을 악용하여 다른 앱의 사용 통계를 수집하는 핵심 기능 외에도,
모바일 가입자 &lt;a href=&#34;https://en.wikipedia.org/wiki/International_mobile_subscriber_identity&#34;&gt;IMSI&lt;/a&gt;와 같은
민감한 데이터를 수집하는 의심스러운 기능이 추가로 있는 것으로 보입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아마도 구성은 다음 그림과 비슷했을 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://doubleagent.net/content/images/2024/04/fb1-3-1.png&#34; alt=&#34;An interpretation of FB&amp;rsquo;s setup based on court documents and app analysis&#34;&gt;&lt;/p&gt;
&lt;p&gt;신뢰할 수 있는 인증서가 기기에 설치되어 있으며,
디바이스의 모든 트래픽이 VPN을 통해 페이스북이 관리하는 인프라로 전송되고,
트래픽은 &amp;lsquo;ssl bump&amp;rsquo; 기능이 설정된 transparent proxy&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;로 구성된 Squid 캐싱 프록시로 리다이렉션됩니다.
문서에 따르면 스냅챗, 아마존, 유튜브에 속한 다양한 도메인들이 관심 대상이었습니다.
다른 사용자 트래픽이 가로채졌는지 아니면 단순히 프록시 처리만 되었는지는 알 수 없습니다.
이러한 정보는 아카이브된 Onavo Protect 앱을 살펴봐도 얻을 수 없으며,
현재로서는 공개된 법원 문서에 의존할 수밖에 없습니다.&lt;/p&gt;
&lt;p&gt;시간이 지나면서 transparent TLS 프록시를 사용하는 그들의 전략은
안드로이드의 보안 제어(security controls)가 개선됨에 따라 성공률이 감소하고 있었습니다.
또한 인증서 고정의 도입도 문제가 된다고 했습니다.
이에 대한 대안으로 페이스북은 접근성(Accessibility) API를 사용하는 방안을 고려하고 있었습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://doubleagent.net/content/images/2024/04/image-14.png&#34; alt=&#34;Page 3 - Case 3:20-cv-08570-JD Document 736&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Page 3 - Case 3:20-cv-08570-JD Document 736&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;구글(Google)이 자사의 운영 체제에서 접근성 기능 사용에 대해 다음과 같이 말하고 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;장애가 있는 사람들이 기기에 접근하거나 그들의 장애로 인한 문제를 해결하는 데 도움을 주기 위해 설계된 서비스만이 접근성 도구로 선언될 자격이 있습니다.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;장애가 있는 사람들을 지원하기 위해 설계된 기능을 경쟁 우위를 위해 악용하려는 기업이 있다는 것을 짐작할 수 있습니다.
Android 접근성 기능의 남용은 주로
&lt;a href=&#34;https://blog.pradeo.com/accessibility-services-mobile-analysis-malware&#34;&gt;뱅킹 멀웨어&lt;/a&gt;와 같은 악성 애플리케이션에 의해 발생하는 것으로 알려져 있습니다.&lt;/p&gt;
&lt;h1 id=&#34;동기&#34;&gt;동기&lt;/h1&gt;
&lt;p&gt;마크 주커버그(Mark Zuckerberg)는 스냅챗에서 &amp;ldquo;&lt;em&gt;신뢰할 수 있는 분석&lt;/em&gt;&amp;ldquo;의 필요성을 언급합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://doubleagent.net/content/images/2024/04/image-4.png&#34; alt=&#34;Mark Zuckerberg PX2255&#34;&gt;&lt;/p&gt;
&lt;p&gt;해결책은? &amp;ldquo;&lt;em&gt;특정 하위 도메인의 트래픽을 가로채기 위해 iOS 및 Android에 설치할 수 있는 키트&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://doubleagent.net/content/images/size/w1000/2024/04/image-6.png&#34; alt=&#34;Danny Ferrante&#34;&gt;&lt;/p&gt;
&lt;p&gt;제 생각에는 특정 도메인의 트래픽을 가로채기 위해 Onavo Protect VPN 앱을 활용하는 것 외에도
핵심 기술을 리브랜딩하여 다른 애플리케이션에 배포하려는 의도가 있었습니다.
페이스북은 2013년에 약 1억 2천만 달러에 Onavo를 &lt;a href=&#34;https://techcrunch.com/2013/10/13/facebook-buys-mobile-analytics-company-onavo-and-finally-gets-its-office-in-israel/&#34;&gt;인수했으며&lt;/a&gt;
이 기술을 잘 활용할 필요가 있었습니다.
이 가격은 사람들이 사용하는 휴대폰과 태블릿에서 경쟁사 정보를 얻는 능력에 대해 그들이 얼마나 높은 가치를 두었는지 명확하게 보여줍니다.&lt;/p&gt;
&lt;p&gt;iOS 버전에 대한 &lt;a href=&#34;https://medium.com/@chronic_9612/notes-on-analytics-and-tracking-in-onavo-protect-for-ios-904bdff346c0&#34;&gt;이전 연구&lt;/a&gt;에서는
Onavo VPN 앱이 아이폰(iPhone)에서 일부 사용 정보를 수집하고 있었음을 지적하고 있습니다.
안드로이드에서는 이 앱이 사용자에게 앱 데이터 사용량을 보여준다는 명목으로 부여된 권한을 활용하여
사용자 기기에서 훨씬 더 세밀한 통계를 수집하고 있음을 확인할 수 있습니다(아래에 포함된 영상에서 이 모습이 어떻게 나타났는지 확인할 수 있습니다).
그러나 이것만으로는 충분하지 않았고, 페이스북은 한 걸음 더 나아가
특정 경쟁사의 분석 도메인으로 향하는 암호화된 트래픽을 가로채어 &amp;ldquo;&lt;strong&gt;인앱 액션(in-app actions)&lt;/strong&gt;&amp;ldquo;에 대한 데이터를 얻으려 했습니다.&lt;/p&gt;
&lt;p&gt;그들이 해야 할 일은 사용자가 사용자 휴대폰의 신뢰 저장소(trust store)에 커스텀 인증서를 설치하도록
(그리고 특정 안드로이드 버전을 사용)하는 것뿐이었습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;도청 정보는 새로운 것이며, 이전에 발생한 사건과 혼동해서는 안 됩니다.&lt;br&gt;
&lt;br&gt;
&lt;a href=&#34;https://www.accc.gov.au/media-release/20m-penalty-for-meta-companies-for-conduct-liable-to-mislead-consumers-about-use-of-their-data&#34;&gt;ACCC&lt;/a&gt;에 따르면,
2023년에 페이스북의 두 자회사는 호주 연방법원으로부터
&amp;ldquo;호주 소비자법을 위반하여 오해를 일으킬 수 있는 행위를 한&amp;rdquo; 혐의로 총 2천만 호주달러의 벌금이 부과되었습니다.&lt;br&gt;
&lt;br&gt;
페이스북은 2019년에 Onavo를 폐쇄했는데, 이는 청소년들이 앱을 사용하도록 유도하여
그들의 활동을 추적하고 있었다는 &lt;a href=&#34;https://techcrunch.com/2019/01/29/facebook-project-atlas/&#34;&gt;조사&lt;/a&gt;가 밝혀졌기 때문입니다.
또한 그해 애플(Apple)은 &lt;a href=&#34;https://web.archive.org/web/20220609072355/https://www.vox.com/2019/1/30/18203231/apple-banning-facebook-research-app&#34;&gt;페이스북의 개발자 프로그램 인증서를 철회하는&lt;/a&gt;
강력한 조치를 취해 분명한 메시지를 전달했습니다.&lt;br&gt;
&lt;br&gt;
서비스 종료된 앱이지만, 이 글에서 제공하는 기술적 인사이트를 얻을 수 있는 오래된 버전의 앱을 찾을 수 있었습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;분석&#34;&gt;분석&lt;/h1&gt;
&lt;p&gt;최종 사용자 디바이스의 웹사이트와 애플리케이션은 디바이스 내 신뢰 저장소에 저장된 public 인증서를 통해 HTTPS/TLS를 사용하는 원격 웹사이트나 서버를 신뢰합니다.
이러한 &amp;ldquo;인증 기관(CA)&amp;rdquo; 인증서는 애플리케이션이 신뢰할 수 있는 상대방과 통신하고 있음을 확인해 주는 &amp;ldquo;신뢰 앵커(trust anchor)&amp;rdquo; 역할을 합니다.
이 인증서는 일반적으로 운영 체제에 의해 배포되고 저장됩니다.
신뢰 저장소에 자체 서명한 인증서(self-signed certificate)를 추가하면 암호화된 TLS 트래픽을 가로챌 수 있습니다.
기업은 직원의 디바이스에서 나가는 트래픽(outbound traffic)을 검사하기 위해 이 방법을 사용할 수 있으며, 보안 테스터들도 자신의 기기에서 이를 활용할 수 있습니다.
이러한 것들은 모두 적법한 작업입니다.
여기서 중요한 질문은 페이스북이 한 행위가 적법했냐는 것입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;페이스북이 도청을 위해 사용했다고 알려진 소프트웨어의 문서에 다음과 같은 경고가 포함되어 있다는 점은 약간 아이러니합니다.&lt;br&gt;
&lt;br&gt;
&amp;ldquo;&lt;em&gt;HTTPS는 사용자에게 개인정보보호 및 보안을 제공하기 위해 설계되었습니다.
사용자 동의나 인지 없이 HTTPS 터널을 복호화하는 것은 윤리 규범을 위반할 수 있으며,
관할 지역에서 불법일 수 있습니다.&lt;/em&gt;&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;아이폰의 iOS와 달리 구글은 대부분의 모바일 애플리케이션에서 신뢰할 수 있는 CA 인증서를 설치하기가 매우 어렵도록 수많은 변경 사항을 적용했습니다.
2020년 9월에 출시된 안드로이드 11에서는 앱이 사용자에게 인증서를 설치하라는 메시지를 표시하는 메커니즘을 완전히 차단했습니다.
그리고 어떤 애플리케이션도 기본적으로 사용자 저장소에 있는 인증서를 신뢰하지 않습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;사람들은 &amp;ldquo;&lt;em&gt;인증서 고정(Certificate Pinning)이 뭐죠? 이건 MITM을 막을 수 없었을까요?&lt;/em&gt;&amp;ldquo;라고 질문합니다.&lt;br&gt;
&lt;br&gt;
나중에 살펴보겠지만, 당시 스냅챗 앱은 분석 도메인에 대한 인증서 고정을 구현하지 않았습니다.
이는 다른 앱 도메인의 경우에도 마찬가지일 것입니다.
따라서 페이스북은 경쟁사의 이러한 기술적 제한/실수를 이용한 것으로 보입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;현재는 2016년부터 2019년까지 페이스북이 했던 일을 하는 것은 기술적으로 불가능합니다.
하지만 그들은 어떻게 해냈을까요?
다행히도 우리는 안드로이드와 Play 스토어 생태계를 통해 오래된 안드로이드 앱 패키지를 종종 찾을 수 있습니다.&lt;/p&gt;
&lt;p&gt;먼저 테스트 단말기에 Onavo 앱을 설치하여 사용자가 앱과 어떻게 상호 작용하는지 확인했습니다.
VPN 연결이 작동하지 않고 실제 백엔드 서비스가 중단된 상태입니다.
하지만 이 애플리케이션이 사용자에게 여러 권한을 강제로 허용하도록 어떻게 강제하는지 엿볼 수 있었습니다:&lt;/p&gt;
&lt;p&gt;&lt;video
src=&#34;https://doubleagent.net/content/media/2024/04/zszPzD8NSHAFb9W1.mp4&#34;
controls&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;여기서 우리가 확인할 수 있는 것은 사용자 &amp;lsquo;보호&amp;rsquo;를 제공한다는 구실로 요구하는 2가지 특정 권한이 문제가 된다는 점입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다른 앱 위에 표시 (Display over other apps)&lt;/li&gt;
&lt;li&gt;과거 및 삭제된 앱 사용 내역에 액세스 (Access past and deleted app usage)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;앱에서 사용하는 모바일 데이터의 양을 표시하려면 이 권한이 필요합니다.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;그들이 설명하지 않은 것은 이 기능이 앱을 설치한 사용자를 위한 것이 아니라 실제로는 Onavo/Facebook을 위한 것이라는 점입니다.
이러한 정보는 매우 가치가 있으며, 이는 페이스북이 인수에 지불한 1억 2천만 달러라는 금액만 보더라도 알 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pbs.twimg.com/media/GJpCkIEbkAAsckm?format=jpg&amp;amp;name=small&#34; alt=&#34;Onavo App Permissions&#34;&gt;&lt;/p&gt;
&lt;p&gt;안드로이드 매니페스트(manifest)에는 &lt;code&gt;uses-permission&lt;/code&gt; 지시어인 &lt;code&gt;android.permission.PACKAGE_USAGE_STATS&lt;/code&gt;가 포함되어 있으며,
이는 위 스크린샷에서 우리가 동의한 권한입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pbs.twimg.com/media/GJptvfla8AA0rVZ?format=png&amp;amp;name=medium&#34; alt=&#34;PACKAGE_USAGE_STATS&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;애플리케이션 통계&amp;rdquo; 기능(원래의 핵심 기능으로 추정됨)을 계속 살펴보면,
모바일 기기의 로컬 데이터베이스 스키마를 덤프하면 기기가 실제로 수집한 데이터를 정확히 파악할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pbs.twimg.com/media/GJpyTakbIAAeD_A?format=png&amp;amp;name=large&#34; alt=&#34;collecting on the device&#34;&gt;&lt;/p&gt;
&lt;p&gt;대개 다른 애플리케이션의 사용 통계와 네트워크 트래픽 사용량만 얻을 수 있었던 것으로 보입니다.
이것은 여전히 다소 높은 수준의 통계이며, 법원 문서의 이메일 중 하나에서 암시된 것처럼 마크 주커버그가 원했던 세부 사항에는 미치지 못했습니다.
반면에 다양한 경쟁사의 분석 도메인으로 향하는 실제 암호화된 트래픽을 가로챌 수 있다면 목적을 달성할 수 있었을 것입니다.
이를 위해 페이스북은 어떻게든 기기에 CA 인증서를 설치해야 했습니다.&lt;/p&gt;
&lt;p&gt;하지만 인증서 설치를 요청하는 메시지(prompt)는 나타나지 않았습니다.
이는 VPN이 원격 서비스에 성공적으로 연결되지 않았기 때문이며, 이는 전제 조건인 것으로 보입니다.
시간이 나거나 관심이 생기면 인증서 설치 메시지를 어떻게 활성화할 수 있는지 다시 확인해볼 생각입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://doubleagent.net/content/images/size/w1000/2024/04/GJo--s8aQAAYwtL.png&#34; alt=&#34;Connections timing out, and a tcpdump shows that all traffic from the device is dropped after the VPN connection is initiated&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ca-인증서&#34;&gt;CA 인증서&lt;/h2&gt;
&lt;p&gt;앱을 디컴파일해보니 해당 기능이 존재하는 것을 확인할 수 있었습니다.
다음 이미지에서 하이라이트된 메서드는 &lt;code&gt;KeyChain.createInstallIntent()&lt;/code&gt;를 호출하여 인증서를 설치합니다.
여기서 &amp;ldquo;Facebook Research&amp;quot;라는 이름으로 사용자에게 권한을 요청하는 팝업이 나타날 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://doubleagent.net/content/images/2024/04/GJpP7rmaAAAQDKI.png&#34; alt=&#34;KeyChain.createInstallIntent&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;KeyChain.createInstallIntent()&lt;/code&gt;는 Android 7(Nougat)에서 &lt;a href=&#34;https://commonsware.com/R/pages/chap-security-004.html&#34;&gt;더 이상 작동하지 않게 되었습니다&lt;/a&gt;.
사용자가 인증서를 수동으로 설치해야 합니다.
이제 Facebook의 CA 인증서를 앱 내에서 직접 설치하는 것은 불가능해졌습니다.&lt;/p&gt;
&lt;p&gt;Android 7에서 주목할 만한 또 다른 변경 사항은 &lt;a href=&#34;https://developer.android.com/privacy-and-security/security-config&#34;&gt;Android 문서&lt;/a&gt;에 따르면 다음과 같습니다(강조는 필자).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;기본적으로 모든 앱의 보안 연결(TLS 및 HTTPS와 같은 프로토콜 사용)은 사전 설치된 시스템 CA를 신뢰하며, &lt;strong&gt;Android 6.0(API 레벨 23) 이하를 대상으로 하는 앱은 기본적으로 사용자가 추가한 CA 저장소도 신뢰합니다&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;즉, Android Marshmallow(Android 6)와 그 이전 버전에서는 다른 앱들이 사용자 저장소에 있는 인증서를 신뢰했지만,
2016년 8월 22일에 출시된 Android 7부터는 앱의 매니페스트 파일에 보안 구성(security configuration)이 있는 경우를 제외하고는 다른 앱에서 더 이상 이를 신뢰하지 않게 되었습니다.&lt;/p&gt;
&lt;p&gt;Android 7의 또 다른 개선 사항은 기기를 완전히 루팅하지 않는 한 어떤 방법으로도 시스템 저장소에 인증서를 설치할 수 없게 되었다는 점입니다.&lt;/p&gt;
&lt;p&gt;어쨌든 이 기능은 이전 버전과 최신 버전 모두에 남아 있었으며, 2019년에 마지막으로 게시된 앱까지 유지되었습니다.
실제 MITM 인증서는 2017년에 제거되었습니다.
법원 문서에서 이에 대한 그럴듯한 이유를 확인할 수 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;SSL bump에 사용되는 키는 어디에서 생성되며, 어떻게 남용으로부터 보호되나요?
(예: 기기에서 생성되어, 해당 기기에만 사용되고, 기기를 벗어나지 않는지, 혹은 앱과 함께 다운로드되어 설치되는 공유 키가 있는지)&lt;/em&gt;&lt;br&gt;
&lt;br&gt;
&lt;strong&gt;인증서는 서버에서 생성되어 기기로 전송됩니다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://doubleagent.net/content/images/2024/04/image-15.png&#34; alt=&#34;Page 3 - Case 3:20-cv-08570-JD Document 736&#34;&gt;&lt;/p&gt;
&lt;p&gt;따라서 2019년 이전의 훨씬 더 오래된 버전으로 돌아가야 하며, 특히 2017년 9월 버전이 필요합니다.
이 버전에서는 &amp;ldquo;&lt;code&gt;old_ca.cer&lt;/code&gt;&amp;ldquo;와 &amp;ldquo;&lt;code&gt;new_ca.cer&lt;/code&gt;&amp;ldquo;라는 이름의 인증서가 &lt;code&gt;assets&lt;/code&gt;에 포함되어 있습니다.
관련 코드는 &lt;code&gt;ResearchCertificateManager&lt;/code&gt; 클래스에서 찾을 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://doubleagent.net/content/images/2024/04/image-7.png&#34; alt=&#34;ResearchCertificateManager&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.apk&lt;/code&gt; 파일을 zip 파일로 압축 해제할 경우 이 파일들은 &lt;code&gt;assets&lt;/code&gt; 폴더 아래에서 찾을 수 있습니다.
이는 JADX에서 확인되었습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://doubleagent.net/content/images/2024/04/image-9.png&#34; alt=&#34;assets folder&#34;&gt;&lt;/p&gt;
&lt;p&gt;또한, 인증서가 설치되었는지 여부를 확인하는 루틴도 관찰되었습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://doubleagent.net/content/images/size/w1000/2024/04/image-8.png&#34; alt=&#34;check if the certificates have been installed or not&#34;&gt;&lt;/p&gt;
&lt;p&gt;그렇다면 왜 두 개의 인증서가 있을까요? (&lt;code&gt;old&lt;/code&gt;와 &lt;code&gt;new&lt;/code&gt;)
여기 한 버전의 앱에서 추출된 두 개의 인증서가 있습니다.
첫 번째 인증서를 생성한 사람은 유효 기간을 1년으로만 설정했습니다.
만약 이것이 실수였다면, 만료 전에 이를 해결한 것으로 보입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://doubleagent.net/content/images/2024/04/GJq8BYsbUAAiREe.png&#34; alt=&#34;old_ca.cer&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://doubleagent.net/content/images/2024/04/GJq8JjeaAAA59Ec.png&#34; alt=&#34;new_ca.cer&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;old_va.cer(위) vs new_ca.cer(아래)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;온라인에서 모든 버전의 &lt;code&gt;.apk&lt;/code&gt; 파일을 찾을 수는 없었지만, 충분한 자료를 통해 다음과 같은 결론을 도출할 수 있었습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;첫 번째 인증서는 2016년 9월 8일부터 유효했으며, 이는 마크 주커버그가 스냅챗에 대한 추가 정보를 얻기 위해 요청을 보낸 시점(2016년 6월 9일자 이메일)보다 몇 달 뒤의 일입니다.&lt;/li&gt;
&lt;li&gt;두 번째 인증서는 첫 번째 인증서와 함께 추가되었으며, 2017년 6월 8일부터 유효합니다. 이 인증서는 2027년 6월 8일까지 유효합니다.&lt;/li&gt;
&lt;li&gt;최소 2027년 10월 19일부터는 인증서가 없으며, 두 번째 인증서는 앱에서 완전히 삭제되었습니다.
앞서 언급했듯이 법원 문서에 따르면 인증서는 서버에서 얻어진 것으로 설명되어 있습니다.
아카이브에서 확보한 앱들에서는 이와 관련된 기능을 아직 찾지 못했으며, 이에 대한 추가 작업이 필요합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각각의 핑거프린트와 함께 인증서가 발견된 버전들:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pbs.twimg.com/media/GJrEPLeaEAAhjQM?format=png&amp;amp;name=900x900&#34; alt=&#34;Versions with certificates found with their respective fingerprints&#34;&gt;&lt;/p&gt;
&lt;p&gt;법원 문서에 따르면 이후 유튜브(Youtube)와 아마존(Amazon)에 대한 추가적인 도청이 있었다고 합니다.
어떤 앱에서 어떻게 도청이 이루어졌는지는 더 자세히 조사해봐야 알 수 있을 것 같습니다:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://doubleagent.net/content/images/size/w1000/2024/04/image-12.png&#34; alt=&#34;Page 2, case 3:20-cv-08570-JD Document 735&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;핵심-질문으로-돌아가서&#34;&gt;핵심 질문으로 돌아가서&lt;/h2&gt;
&lt;p&gt;완전히 인증서 고정(full certificate pinning)을 수행하는 앱은 이 기법을 방지했을 것입니다.
문제의 시기 동안 스냅챗은 일부분 인증서 고정(some certificate pinning)을 수행하고 있었지만, 모든 곳에서 적용된 것은 아니었습니다.&lt;/p&gt;
&lt;p&gt;직접 확인하기 위해 이전 버전의 스냅챗 앱을 다시 가져와서 검사할 수 있습니다.
법원 문서에서 발견된 자료에 따르면, 해당 도메인은 &lt;code&gt;sc-analytics.appspot.com&lt;/code&gt;이었습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pbs.twimg.com/media/GKBeIsTbgAAdHpH?format=png&amp;amp;name=small&#34; alt=&#34;Snapchat certificate pinning&#34;&gt;&lt;/p&gt;
&lt;p&gt;그리고 이전 버전의 스냅챗 앱을 디컴파일한 결과, 이 도메인으로의 트래픽은 인증서 고정을 사용하지 않았습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pbs.twimg.com/media/GKBnQNdb0AA2M8t?format=png&amp;amp;name=medium&#34; alt=&#34;old Snapchat did not use certificate pinning&#34;&gt;&lt;/p&gt;
&lt;p&gt;앞서 논의한 것처럼, 페이스북은 안드로이드의 보안 강화 및 인증서 고정의 광범위한 도입을 인지하고 있었으며, 이에 대한 언급이 포함되어 있습니다. (이전 &lt;code&gt;Page 3 - Case 3:20-cv-08570-JD Document 736&lt;/code&gt; 참조)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;인증서 고정이 최신 기기에서 기본적으로 적용되면서, 안드로이드에서 장기적으로 SSL bump가 적용될 수 있는지 일반적인 의문이 제기되고 있습니다.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;또-무엇이-있을까요&#34;&gt;또 무엇이 있을까요?&lt;/h1&gt;
&lt;p&gt;제 눈에 띈 것은 &lt;a href=&#34;https://en.wikipedia.org/wiki/International_mobile_subscriber_identity&#34;&gt;모바일 가입자 IMSI&lt;/a&gt;를 얻으려는 요청이었습니다.
이는 매우 민감한 데이터입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pbs.twimg.com/media/GJp7AoJaQAA5E-N?format=png&amp;amp;name=medium&#34; alt=&#34;subscriber IMSI&#34;&gt;&lt;/p&gt;
&lt;p&gt;처음에는 이것이 어떻게 가능한지 궁금했는데, 당시에는 실제로 &lt;code&gt;READ_PHONE_STATE&lt;/code&gt; 권한을 통해 가능했던 것으로 보입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pbs.twimg.com/media/GJqOvKmbwAAmL_p?format=png&amp;amp;name=medium&#34; alt=&#34;Device Identifiers&#34;&gt;&lt;/p&gt;
&lt;p&gt;물론 이는 앱의 매니페스트에 정의되어 있었습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://doubleagent.net/content/images/size/w1000/2024/04/image-10.png&#34; alt=&#34;app&amp;rsquo;s manifest&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://source.android.com/docs/core/connect/device-identifiers&#34;&gt;Device identifiers | Android&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;이걸 보면 아마도 조사할 것이 더 있을 겁니다.&lt;/p&gt;
&lt;h1 id=&#34;마무리&#34;&gt;마무리&lt;/h1&gt;
&lt;p&gt;이 모든 것이 몇 년 전에 일어난 &amp;ldquo;오래된 뉴스&amp;quot;이긴 하지만,
기술적인 관점에서 보면 애플리케이션 개발자들, 심지어 페이스북 같은 회사들이 모바일 폰의 권한 모델을 얼마나 악용할 수 있었는지를 보는 것은 흥미롭습니다.&lt;/p&gt;
&lt;p&gt;그리고 CA 인증서 설치 절차를 트리거하는 루틴, 2017년 이후에 인증서가 어떻게 추가되었는지, Onavo 애플리케이션이 수집한 다른 데이터는 무엇인지 등 더 깊이 알아봐야 할 것들이 분명히 있습니다.
또한, 아이폰 버전의 애플리케이션도 찾을 수 있다면 좋을 텐데, 이를 찾을 수 있는 곳을 아는 사람이 있다면 도움이 될 것입니다.&lt;/p&gt;
&lt;p&gt;그리고 CA 설치 절차를 트리거하는 루틴, 2017년 이후에 인증서가 추가되는 방법, Onavo 애플리케이션이 수집하는 다른 항목 등 더 알아봐야 할 것이 분명히 있습니다.
또한 사본을 어디서 찾을 수 있는지 아는 사람이 있다면 아이폰 버전의 애플리케이션을 찾는 것도 좋을 것입니다.&lt;/p&gt;
&lt;p&gt;집단 소송이 흥미로운 방향으로 진행된다면, 이는 조사를 계속할 동기가 될 수 있을 것입니다.&lt;/p&gt;
&lt;p&gt;추가 업데이트를 받고 싶으시다면, &lt;a href=&#34;https://doubleagent.net/onavo-facebook-ssl-mitm-technical-analysis/&#34;&gt;원본 사이트에서 이메일 구독&lt;/a&gt;을 등록하거나
&lt;a href=&#34;https://x.com/haxrob&#34;&gt;원저자의 X&lt;/a&gt;를 팔로우하세요.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Sherman_Antitrust_Act&#34;&gt;셔먼법(Sherman Antitrust Act)&lt;/a&gt;은 미국의 반독점법이다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/ko-kr/azure/security/fundamentals/certificate-pinning&#34;&gt;인증서 고정(Certificate Pinning)&lt;/a&gt;은 애플리케이션이 서버와 통신할 때 사용하는 SSL/TLS 인증서의 공인된 목록을 미리 지정해 두는 보안 기법이다.
이를 통해 애플리케이션이 특정 인증서로만 서버에 연결하도록 제한한다.
이 방식은 중간자 공격(MITM)을 방지하는 데 효과적이다.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.haproxy.com/glossary/what-is-a-transparent-proxy&#34;&gt;투명 프록시(transparent proxy)&lt;/a&gt;는 클라이언트와 서버 사이에 위치해서 요청과 응답을 중계하는 프록시 서버다.
뒤의 두 프록시와 달리 클라이언트의 요청을 수정하지 않고, 클라이언트 IP 주소를 HTTP 요청 헤더에 그대로 노출시키기 때문에 투명하다고 부른다.
&lt;a href=&#34;https://docs.trafficserver.apache.org/en/latest/admin-guide/configuration/transparent-forward-proxying.en.html&#34;&gt;포워드 프록시(forward proxy)&lt;/a&gt;는 클라이언트 측에서,
&lt;a href=&#34;https://www.haproxy.com/glossary/what-is-a-reverse-proxy&#34;&gt;리버스 프록시(reverse proxy)&lt;/a&gt;는 서버 측에서 중계하는 프록시 서버다.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
- https://markruler.github.io/posts/network/onavo-facebook-ssl-mitm-technical-analysis/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>일상에서의 스왑 메모리 (Swap Memory)</title>
        <link>https://markruler.github.io/posts/os/swap-memory/</link>
        <pubDate>Thu, 05 Sep 2024 21:13:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/os/swap-memory/</guid>
        <description>임창수 https://markruler.github.io/posts/os/swap-memory/ -&lt;p&gt;&lt;strong&gt;스왑 메모리는 물리 메모리 용량이 부족할 때 사용되는 가상 메모리 영역&lt;/strong&gt;이다.
고사양 작업 중 메모리가 부족해서 컴퓨터가 자주 멈춘다면 스왑 메모리를 늘려보는 것도 하나의 방법이다.
이 글은 &lt;strong&gt;Ubuntu&lt;/strong&gt;에서 &lt;strong&gt;스왑 메모리를 file로 설정&lt;/strong&gt;하고, 나의 환경에 맞게 조정하기 위해 &lt;strong&gt;모니터링 하는 방법&lt;/strong&gt;을 설명한다.&lt;/p&gt;
&lt;p&gt;먼저 스왑 메모리 설정을 확인한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo swapon --show
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;설정되어 있지 않다면 아무것도 출력되지 않는다.
&lt;em&gt;Ubuntu 24.04 기준&lt;/em&gt;으로는 기본적으로 다음과 같이 &lt;code&gt;/swap.img&lt;/code&gt;가 설정되어 있다.
하지만 이 글은 설정되어 있지 않다는 전제로 진행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME      TYPE SIZE USED PRIO
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/swap.img file   8G   0B   -2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%EC%8A%A4%EC%99%91-%EC%84%A4%EC%A0%95-file&#34;&gt;스왑 설정: file&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%EC%8A%A4%EC%99%91-%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1&#34;&gt;스왑 파일 생성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EA%B6%8C%ED%95%9C-%EC%84%A4%EC%A0%95&#34;&gt;권한 설정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%ED%8C%8C%EC%9D%BC-%ED%98%95%ED%83%9C-%EB%B3%80%EA%B2%BD&#34;&gt;파일 형태 변경&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#swap-%EC%98%81%EC%97%AD-%EC%84%A4%EC%A0%95&#34;&gt;Swap 영역 설정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EC%84%A4%EC%A0%95-%ED%99%95%EC%9D%B8&#34;&gt;설정 확인&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EB%B6%80%ED%8C%85-%EC%8B%9C-%EC%9E%90%EB%8F%99-%EB%A7%88%EC%9A%B4%ED%8A%B8-%EC%84%A4%EC%A0%95&#34;&gt;부팅 시 자동 마운트 설정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EC%9A%A9%EB%9F%89-%EB%8A%98%EB%A6%AC%EA%B8%B0&#34;&gt;용량 늘리기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EB%B9%84%ED%99%9C%EC%84%B1%ED%99%94&#34;&gt;비활성화&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kubernetes%EC%97%90%EC%84%9C-swap-%EA%B8%B0%EB%8A%A5%EC%9D%84-%EB%B9%84%ED%99%9C%EC%84%B1%ED%99%94%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0&#34;&gt;Kubernetes에서 Swap 기능을 비활성화해야 하는 이유&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#prometheus-node-exporter%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81&#34;&gt;Prometheus node-exporter를 이용한 모니터링&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EB%8D%94-%EC%9D%BD%EC%9D%84%EA%B1%B0%EB%A6%AC&#34;&gt;더 읽을거리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;스왑-설정-file&#34;&gt;스왑 설정: file&lt;/h1&gt;
&lt;h2 id=&#34;스왑-파일-생성&#34;&gt;스왑 파일 생성&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dd&lt;/code&gt; 명령으로 16 GiB 크기의 &lt;code&gt;/swapfile&lt;/code&gt; 이라는 파일을 생성한다.
(파일명은 뭘로 해도 상관없다.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dd &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt;=/dev/zero &lt;span style=&#34;color:#eedd82&#34;&gt;of&lt;/span&gt;=/swapfile &lt;span style=&#34;color:#eedd82&#34;&gt;bs&lt;/span&gt;=1M &lt;span style=&#34;color:#eedd82&#34;&gt;count&lt;/span&gt;=16K
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 16384+0 records in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 16384+0 records out&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 17179869184 bytes (17 GB, 16 GiB) copied, 11.2337 s, 1.5 GB/s&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;swapon&lt;/code&gt; 매뉴얼에도 명시&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;되어 있지만 &lt;code&gt;fallocate&lt;/code&gt;는 사용하지 않는 것을 권장한다.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;
연속된 블록에 실제 데이터를 파일에 쓰는 &lt;code&gt;dd&lt;/code&gt;와 달리 &lt;code&gt;fallocate&lt;/code&gt;는 논리적인 파일의 크기만 설정하고 데이터를 쓰지 않기 때문이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;스왑 파일은 물리 메모리가 부족할 때 디스크에 데이터를 저장하는 역할을 한다.
그리고 파일 시스템과 커널은 스왑 파일에 데이터를 효율적으로 읽고 쓰기 위해 파일의 실제 물리적 위치가 명확한 것이 좋다.
물리적으로 할당되지 않은 블록을 포함할 수 있는 &lt;strong&gt;Sparse file은 파일의 논리적인 크기와 실제 디스크에 할당된 크기가 다를 수 있기 때문에&lt;/strong&gt;
스왑이 예상대로 동작하지 않을 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;권한-설정&#34;&gt;권한 설정&lt;/h2&gt;
&lt;p&gt;Swap 파일을 root만 읽고 쓰도록 권한을 설정한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chmod &lt;span style=&#34;color:#f60&#34;&gt;600&lt;/span&gt; /swapfile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ls -hal /swapfile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# -rw------- 1 root root 16.0G  3월  9 16:43 /swapfile&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;파일-형태-변경&#34;&gt;파일 형태 변경&lt;/h2&gt;
&lt;p&gt;파일 형태를 확인해보면 &lt;code&gt;data&lt;/code&gt; 파일이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo file /swapfile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# /swapfile: data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Swap 파일을 Linux swap file로 설정한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkswap /swapfile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Setting up swapspace version 1, size = 16 GiB (17179865088 bytes)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# no label, UUID=ec298bfb-0c82-4cd1-98aa-5466773f8a09&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo file /swapfile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# /swapfile: Linux swap file, 4k page size, little endian, version 1, size 4194303 pages, 0 bad pages, no label, UUID=ec298bfb-0c82-4cd1-98aa-5466773f8a09&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;swap-영역-설정&#34;&gt;Swap 영역 설정&lt;/h2&gt;
&lt;p&gt;만든 Swap 파일을 swap 영역으로 설정한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo swapon /swapfile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;설정-확인&#34;&gt;설정 확인&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo swapon --show
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME      TYPE SIZE USED PRIO
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/swapfile file  16G   0B   -2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;사용되는 부분이 생기면 아래처럼 &lt;code&gt;USED&lt;/code&gt; 부분에 사이즈가 커진다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME      TYPE SIZE   USED PRIO
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/swapfile file  16G 153.3M   -2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TYPE&lt;/code&gt; : Swap 메모리의 종류
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file&lt;/code&gt;: 파일&lt;/li&gt;
&lt;li&gt;&lt;code&gt;partition&lt;/code&gt;: 디스크 파티션&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SIZE&lt;/code&gt; : Swap 메모리의 크기&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USED&lt;/code&gt; : Swap 메모리의 사용량&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PRIO&lt;/code&gt; : Swap 메모리의 우선순위. 값이 클수록 우선적으로 사용된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;부팅-시-자동-마운트-설정&#34;&gt;부팅 시 자동 마운트 설정&lt;/h1&gt;
&lt;p&gt;Ubuntu 24.04 기준 기본 설정값에는 &lt;code&gt;/swap.img&lt;/code&gt; 파일이 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# /etc/fstab: static file system information.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Use &amp;#39;blkid&amp;#39; to print the universally unique identifier for a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# device; this may be used with UUID= as a more robust way to name devices&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# that works even if disks are added and removed. See fstab(5).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# &amp;lt;file system&amp;gt; &amp;lt;mount point&amp;gt;   &amp;lt;type&amp;gt;  &amp;lt;options&amp;gt;       &amp;lt;dump&amp;gt;  &amp;lt;pass&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/swap.img       none    swap    sw      &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;       &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(위 설정이 없다는 전제 하에)
새로 추가한 스왑 영역을 추가한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;/swapfile none swap sw 0 0&amp;#39;&lt;/span&gt; | sudo tee -a /etc/fstab
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;용량-늘리기&#34;&gt;용량 늘리기&lt;/h1&gt;
&lt;p&gt;스왑 메모리 크기는 시스템의 물리 메모리 용량과 사용 용도에 따라 결정된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;free -h
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#                total        used        free      shared  buff/cache   available&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Mem:            31Gi        24Gi       490Mi       3.9Gi       5.8Gi       2.0Gi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Swap:          2.0Gi       1.3Gi       677Mi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;사이즈를 늘리기 전 swap을 끈다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo swapoff /swapfile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;사이즈를 추가한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 4GiB 추가&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dd &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt;=/dev/zero &lt;span style=&#34;color:#eedd82&#34;&gt;of&lt;/span&gt;=/swapfile &lt;span style=&#34;color:#eedd82&#34;&gt;bs&lt;/span&gt;=1M &lt;span style=&#34;color:#eedd82&#34;&gt;count&lt;/span&gt;=4K &lt;span style=&#34;color:#eedd82&#34;&gt;oflag&lt;/span&gt;=append &lt;span style=&#34;color:#eedd82&#34;&gt;conv&lt;/span&gt;=notrunc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 4096+0 records in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 4096+0 records out&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 4294967296 bytes (4.3 GB, 4.0 GiB) copied, 4.60434 s, 933 MB/s&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;사이즈 늘린 것을 적용하려면 &lt;code&gt;swapon -v&lt;/code&gt; 명령어로 다시 설정해야 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkswap /swapfile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# mkswap: /swapfile: warning: wiping old swap signature.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Setting up swapspace version 1, size = 8 GiB (8589930496 bytes)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# no label, UUID=1516c52d-9ed8-4a52-939f-30a892aff73f&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo swapon -v /swapfile                                                                                                 ✭ ✱
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# swapon: /swapfile: found signature [pagesize=4096, signature=swap]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# swapon: /swapfile: pagesize=4096, swapsize=8589934592, devsize=8589934592&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# swapon /swapfile&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;free -h
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#                total        used        free      shared  buff/cache   available&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Mem:            31Gi        24Gi       433Mi       4.0Gi       5.8Gi       1.5Gi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Swap:          8.0Gi       1.3Gi       6.7Gi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;비활성화&#34;&gt;비활성화&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo swapoff /swapfile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;/etc/fstab&lt;/code&gt; 파일에서 Swap 파일 설정을 제거한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# /etc/fstab&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# /swapfile none swap sw 0 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;kubernetes에서-swap-기능을-비활성화해야-하는-이유&#34;&gt;Kubernetes에서 Swap 기능을 비활성화해야 하는 이유&lt;/h1&gt;
&lt;p&gt;가장 큰 이유는 스왑 메모리가 있다면 Kubernetes는 메모리 부족 상황을 정확하게 파악할 수 없다는 것이다.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;
&lt;strong&gt;안정성을 위해&lt;/strong&gt; 스왑 메모리를 비활성화하는 것이 좋다.
스왑이 자주 발생하면 디스크 입출력이 증가하면서 성능이 저하되는 문제도 있다.&lt;/p&gt;
&lt;h1 id=&#34;prometheus-node-exporter를-이용한-모니터링&#34;&gt;Prometheus node-exporter를 이용한 모니터링&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/markruler/node-monitoring&#34;&gt;이 리포지터리&lt;/a&gt;를 클론해서
Prometheus와 Grafana를 실행해서 모니터링 할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo docker compose up -d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/os/swap-memory/grafana-prometheus-swap-memory.png&#34; alt=&#34;Node Monitoring with Prometheus and Grafana&#34;&gt;&lt;/p&gt;
&lt;p&gt;본인의 컴퓨팅 작업 시 사용량을 확인하면서 메모리 사용량이 항상 90% 이상이면 스왑 메모리를 늘리는 것을 고려해볼 수 있다.&lt;/p&gt;
&lt;h1 id=&#34;더-읽을거리&#34;&gt;더 읽을거리&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/gorman/html/understand/understand014.html&#34;&gt;Swap Management | kernel.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://velog.io/@sjuhwan/Virtualization-101-3-1-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%98%A4%EB%B2%84%EC%BB%A4%EB%B0%8B%EA%B3%BC-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%97%AC%EC%9C%A0%EA%B3%B5%EA%B0%84-%ED%99%95%EB%B3%B4-%EB%B0%A9%EB%B2%95&#34;&gt;Virtualization 101 - (3.1) 메모리 오버커밋과 메모리 여유공간 확보 방법 | 송주환&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/pull/31996&#34;&gt;kubelet swap on 체크 PR#31996&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man8/swapon.8.html#NOTES&#34;&gt;swapon(8) | Linux manual page&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://askubuntu.com/questions/927854/how-do-i-increase-the-size-of-swapfile-without-removing-it-in-the-terminal&#34;&gt;fallocatte vs. dd | StackExchange&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/issues/31676&#34;&gt;최초 이슈 kuberenetes#31676&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
- https://markruler.github.io/posts/os/swap-memory/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>IP로 지리적 위치(Geolocation) 찾기</title>
        <link>https://markruler.github.io/posts/network/ip-geolocation/</link>
        <pubDate>Thu, 29 Aug 2024 22:38:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/network/ip-geolocation/</guid>
        <description>임창수 https://markruler.github.io/posts/network/ip-geolocation/ -&lt;h1 id=&#34;현상&#34;&gt;현상&lt;/h1&gt;
&lt;p&gt;약 10ms 응답속도가 예상되는 API에 500~700ms의 응답속도가 발생했다.&lt;/p&gt;
&lt;h1 id=&#34;원인&#34;&gt;원인&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/network/ip-geolocation/ipapi-latency.png&#34; alt=&#34;ipapi Latency&#34;&gt;&lt;/p&gt;
&lt;p&gt;해당 API에서는 국가별로 다른 정책을 적용하기 위해 IP로 국가 정보&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;를 조회하는 기능이 가장 먼저 수행되고 있다.
국가 정보의 출처는 ipapi라는 유료 API 서비스와 IPInfoDB라는 무료 서비스다.
대략적인 코드는 다음과 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Cacheable(value = CacheName.IPAPI_COUNTRY_CODE, key = &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;#ipAddress&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;public&lt;/span&gt; Geolocation &lt;span style=&#34;color:#ff0&#34;&gt;findIsoCountryCode&lt;/span&gt;(&lt;span style=&#34;color:#f00&#34;&gt;final&lt;/span&gt; String ipAddress) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; (isPrivate(ipAddress)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; Geolocation.korea();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;var&lt;/span&gt; ipapi = ipapiFeignClient.findGeolocationByIpAddress(ipAddress, IPAPI_ACCESS_KEY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; (ipapi != &lt;span style=&#34;color:#f00&#34;&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; Geolocation.from(ipapi);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;var&lt;/span&gt; ipInfoDB = ipInfoDBFeignClient.findGeolocationByIpAddress(ipAddress, IPINFODB_ACCESS_KEY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; (ipInfoDB != &lt;span style=&#34;color:#f00&#34;&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; Geolocation.from(ipInfoDB);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; Geolocation.korea();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;문제는 API가 아무리 빨라도 해당 IP Geolocation 서비스에서 응답받는 데에 평균 약 500ms 정도 소요되었다는 것이다.&lt;/p&gt;
&lt;h1 id=&#34;해결&#34;&gt;해결&lt;/h1&gt;
&lt;p&gt;이를 해결하기 위해 캐싱도 해봤지만 처음 접속한 IP의 경우 조회가 발생할 수 밖에 없었고,
결정적으로 이렇게 처음 접속한 IP가 매우 많았다(약 130만 건/월)는 것이다.&lt;/p&gt;
&lt;p&gt;이 문제는 생각보다 간단하게 해결할 수 있었다.
CDN을 사용할 경우 CDN에서 제공하는 헤더에서 위치 정보를 얻을 수 있는데,
이 헤더를 활용하면 별도 서비스를 조회할 필요가 없기 때문에 응답 속도를 줄일 수 있었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Akamai&lt;/strong&gt;는 EdgeScape 기능을 활성화하면 &lt;code&gt;X-Akamai-Edgescape&lt;/code&gt; 헤더로 확인할 수 있다.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CloudFlare&lt;/strong&gt;는 관련 기능을 활성화 했을 경우 &lt;code&gt;CF-IPCountry&lt;/code&gt; 헤더로 확인할 수 있다고 한다.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Amazon CloudFront&lt;/strong&gt;는 &lt;code&gt;CloudFront-Viewer-Country&lt;/code&gt; 헤더로 확인할 수 있다고 한다.&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;구현-방법-spring-framework&#34;&gt;구현 방법 (Spring Framework)&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Target(ElementType.PARAMETER)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Retention(RetentionPolicy.RUNTIME)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;public&lt;/span&gt; @interface GeoLocation {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Aspect
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Component
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@RequiredArgsConstructor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;class&lt;/span&gt; GeoLocationAspect {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;final&lt;/span&gt; HttpServletRequest request;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;final&lt;/span&gt; GeoLocationService service;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0f0&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     * &amp;lt;code&amp;gt;@annotation(GeoLocation)&amp;lt;/code&amp;gt;와 같은 방식은
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     * &amp;lt;code&amp;gt;@GeoLocation&amp;lt;/code&amp;gt; 애노테이션이 붙은 메서드에만 적용됩니다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Pointcut(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;@annotation(org.springframework.web.bind.annotation.GetMapping) || &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            + &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;@annotation(org.springframework.web.bind.annotation.PostMapping) || &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            + &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;@annotation(org.springframework.web.bind.annotation.RequestMapping)&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ee82ee&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;mappingAnnotations&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Around(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;mappingAnnotations()&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;public&lt;/span&gt; Object &lt;span style=&#34;color:#ff0&#34;&gt;injectGeoLocation&lt;/span&gt;(ProceedingJoinPoint joinPoint) &lt;span style=&#34;color:#f00&#34;&gt;throws&lt;/span&gt; Throwable {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        MethodSignature signature = (MethodSignature) joinPoint.getSignature();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Method method = signature.getMethod();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Object[] args = joinPoint.getArgs();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Parameter[] parameters = method.getParameters();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; parameters.length; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; (parameters[i].isAnnotationPresent(GeoLocation.class)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Location geoLocation = getGeoLocationFromRequest();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#0f0&#34;&gt;// @GeoLocation 파라미터에 위치 정보를 주입합니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                args[i] = geoLocation;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0f0&#34;&gt;// 메서드 호출을 진행합니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; joinPoint.proceed(args);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0f0&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     * CDN, ipapi, IPInfoDB 순으로 접속 국가 코드 조회
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     * @return Geolocation
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;private&lt;/span&gt; Location &lt;span style=&#34;color:#ff0&#34;&gt;getGeoLocationFromRequest&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; service.findLocation(request);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@GetMapping
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;public&lt;/span&gt; Response&amp;lt;Items&amp;gt; &lt;span style=&#34;color:#ff0&#34;&gt;control&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        @GeoLocation &lt;span style=&#34;color:#f00&#34;&gt;final&lt;/span&gt; Location location,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        @AuthenticationPrincipal &lt;span style=&#34;color:#f00&#34;&gt;final&lt;/span&gt; PrincipalDetailDto user,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        @RequestBody @Valid &lt;span style=&#34;color:#f00&#34;&gt;final&lt;/span&gt; RequestDto requestDto
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    log.debug(location);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; success(service.process(requestDto));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;덤으로-얻은-정확성&#34;&gt;덤으로 얻은 정확성?&lt;/h1&gt;
&lt;p&gt;추가로 해결되었던 점은 정확성이었다.&lt;/p&gt;
&lt;p&gt;현재 서비스에서 아제르바이잔 이용자에게만 적용되는 정책이 있었는데 실제 이용자에게서 본인에게만 적용되지 않는다고 클레임이 들어왔다.
확인해보니 ipapi에서 정확하지 않은 Geolocation 정보가 응답되고 있었다. 이는 ipapi만의 문제가 아니었다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/network/ip-geolocation/iplocation-inaccuracy.png&#34; alt=&#34;iplocation inaccuracy&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;네덜란드이거나 아제르바이잔이거나 | &lt;a href=&#34;https://iplocation.io/&#34;&gt;iplocation.io&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/network/ip-geolocation/ipapi-inaccuracy.png&#34; alt=&#34;ipapi inaccuracy&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;파나마 공화국이다 | &lt;a href=&#34;https://ipapi.com/&#34;&gt;ipapi&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;우리는 2024년 4월 12일 ipapi에 문의했지만 데이터 공급자(Data Provider)에 의해 업데이트 될 것이라는 답변만 받았었다.
하지만 4달이 지난 현재(8월 29일)에도 업데이트되지 않았다.&lt;/p&gt;
&lt;p&gt;그렇다면 CDN Provider는 믿을 수 있을까?
내가 사용하는 Akamai 문서를 보면 신뢰도가 높아보였다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;How Does Akamai Know the Location of an IP Address?&amp;rdquo; | &amp;lt;Akamai EdgeScape Methodology&amp;gt; 발췌&lt;/p&gt;
&lt;p&gt;(Akamai Control &amp;gt; Download Center &amp;gt; Core Features &amp;gt; EdgeScape)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Public Registry Data&lt;/strong&gt;
We obtain geographic information for the IP blocks registered with the various public Internet registries and ISPs. This information forms the base layer of the database.
As this is public information registered for blocks of addresses, we trust this data the least when analyzing the different sources of data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hostname Pattern Matching&lt;/strong&gt;
Many machines on the Internet (routers, servers, POPs, and even end-user machines) have a hostname (reverse DNS entry) associated with them.
In many cases, these hostnames contain geographic information hinting at the location of that machine.
By analyzing hostnames from different networks and ISPs, we have built up, and continue to add to,
a database of patterns that allows us to extract the geographic information embedded in these names.
It also allows us to extrapolate the location of other machines on the Internet,
by giving us data points that can be used when tracing to other IPs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Known Locations&lt;/strong&gt;
Akamai has an extensive network of servers distributed across the globe, which act as data points when determining the location of machines nearby.
We also have relationships with networks and customers all over the world.
In order to serve their traffic efficiently, we sometimes get useful information from them regarding the location of their servers,
which we can also use as data points in creating our geographic database.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Active Measurement&lt;/strong&gt;
Due to Akamai&amp;rsquo;s extensive customer base, we have the unique ability to know at any given time a large fraction of &amp;ldquo;active&amp;rdquo; end-user IPs on the net.
We then perform traceroutes and pings from various points on our globally distributed network to these active IPs.
We also perform a reduced number of traces and pings to IPs in the non end-user space, such as routers and infrastructure servers.&lt;br&gt;
&lt;br&gt;
When analyzing the traces, we use the location of machines determined using the Hostname pattern matching described above
and the geographic information from the Internet registries to determine the location of the IP traced to.
In addition, we use the latency information contained within the trace and the latency information gathered from pinging routers,
along with the limitations imposed by speed-of-light bounds,
in order to weed out bad data and increase the probability of the location we choose being correct.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;제로-트러스트&#34;&gt;제로 트러스트!&lt;/h2&gt;
&lt;p&gt;하지만 하루만에 문제가 발생했다.
간헐적으로 한국에서 접속한 사용자가 미국에서 접속한 것으로 전달되었다.&lt;/p&gt;
&lt;p&gt;확인해보니 Akamai에서 전달하는 &lt;code&gt;True-Client-IP&lt;/code&gt; 헤더는 실제 한국 사용자 IP였고,
&lt;code&gt;X-Akamai-EdgeScape&lt;/code&gt; 헤더에는 미국(country_code=US),
&lt;code&gt;X-Forwarded-For&lt;/code&gt; 헤더&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;는 Akamai 엣지 서버의 IP가 전달되고 있었다.
이 경우 &lt;code&gt;True-Client-IP&lt;/code&gt;와 &lt;code&gt;X-Forwarded-For&lt;/code&gt; 헤더가 달랐다.
그래서 &lt;strong&gt;&lt;code&gt;True-Client-IP&lt;/code&gt;와 &lt;code&gt;X-Forwarded-For&lt;/code&gt; 헤더가 가리키는 IP가 서로 다를 경우에는 다른 서비스에서 Geolocation을 조회하고 캐싱하도록 설정했다.&lt;/strong&gt;
(CDN -&amp;gt; ipapi -&amp;gt; IPInfoDB 순)&lt;/p&gt;
&lt;p&gt;추가로 Apache에서 &lt;code&gt;RemoteIPHeader X-Forwarded-For&lt;/code&gt; 설정이 있으면
프록시 서버들의 IP는 모두 빠지고 Client IP만 남는다.&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;
그래서 해당 설정을 제거했다.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;다만 이 설정을 변경하면 IP를 활용하는 비즈니스 로직에 영향을 줄 수 있으니 영향도를 고려해야 한다.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;VirtualHost *:443&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ServerName www.example.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ProxyRequests Off
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ProxyVia Off
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ProxyPreserveHost On
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    # RemoteIPHeader X-Forwarded-For
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ProxyAddHeaders On
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/VirtualHost&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;참조&#34;&gt;참조&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;True-Client-IP 헤더
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://techdocs.akamai.com/property-mgr/docs/origin-server#true-client-ip-header&#34;&gt;Akamai | &lt;code&gt;True-Client-IP&lt;/code&gt; 설정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.cloudflare.com/network/true-client-ip-header/&#34;&gt;Cloudflare | &lt;code&gt;True-Client-IP&lt;/code&gt; 설정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/example-function-add-true-client-ip-header.html&#34;&gt;AWS CloudFront | &lt;code&gt;True-Client-IP&lt;/code&gt; 헤더 추가하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;조회하는 정보는 &lt;a href=&#34;https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2&#34;&gt;국가 코드 2자리(ISO 3166-1 alpha-2)&lt;/a&gt;다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://techdocs.akamai.com/property-mgr/docs/content-tgting&#34;&gt;Content Targeting (EdgeScape)&lt;/a&gt; | Akamai&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.cloudflare.com/network/ip-geolocation/&#34;&gt;IP geolocation&lt;/a&gt; | Cloudflare&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/adding-cloudfront-headers.html&#34;&gt;Add CloudFront request headers&lt;/a&gt; | Amazon CloudFront&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For&#34;&gt;X-Forwarded-For&lt;/a&gt; | mdn web docs&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://httpd.apache.org/docs/current/mod/mod_remoteip.html#remoteipheader&#34;&gt;Apache Module mod_remoteip&lt;/a&gt; | Apache&amp;#160;&lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
- https://markruler.github.io/posts/network/ip-geolocation/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>Traceparent 헤더로 클라이언트부터 서버까지 추적하기</title>
        <link>https://markruler.github.io/posts/web/traceparent-datadog/</link>
        <pubDate>Thu, 22 Aug 2024 18:00:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/web/traceparent-datadog/</guid>
        <description>임창수 https://markruler.github.io/posts/web/traceparent-datadog/ -&lt;h1 id=&#34;개요&#34;&gt;개요&lt;/h1&gt;
&lt;p&gt;모니터링 도구를 확인해보니 며칠동안 특정 기능에 에러가 발생하고 있었다.
해당 에러는 알람 임계점(threshold)보다 낮아서 알람이 발생하지 않았고, 이용자는 버그 리포팅을 하지 않았다.
에러 로그를 확인해보니 서버에서는 유효성 검사를 하지 않았고, 클라이언트 앱에서는 유효하지 않은 파라미터를 전달했다.
서버에서 유효성 검사를 추가할 수 있겠지만, 클라이언트 앱에서의 잘못된 요청(bug)은 원인을 알 수 없었다.
클라이언트 이벤트는 연결되어 있지 않기 때문이다.&lt;/p&gt;
&lt;p&gt;또 다른 문제가 있었다.
서버에서는 정상적인 상태 코드와 함께 100ms 정도의 속도로 응답했지만
클라이언트에서는 4초 이상의 지연이 발생하거나 아래와 같은 Akamai 에러 페이지가 응답되었다.
그리고 모든 요청이 아닌 전체 요청의 5% 정도에서만 발생하고 있었다.
하지만 국가, Edge IP, User Agent, 요청 URL 등을 확인해봐도 특정 패턴을 보이는 것이 없어서 원인을 알 수 없었다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/traceparent-datadog/akamai-read-error.jpeg&#34; alt=&#34;Akamai ERR_READ_ERROR&#34;&gt;&lt;/p&gt;
&lt;p&gt;원인을 찾기 위해 클라이언트에서 요청하는 부분부터 추적하고 싶었다.
우리팀에서 사용하는 APM 도구인 데이터독(Datadog)에서는
&lt;a href=&#34;https://docs.datadoghq.com/real_user_monitoring/platform/connect_rum_and_traces/?tab=browserrum&#34;&gt;RUM(Real User Monitoring)을 APM과 연결하면&lt;/a&gt;
클라이언트부터 서버 Span까지 한눈에 확인할 수 있다.
하지만 응답 속도가 Akamai에선 4초 이상이라고 측정되고 Datadog RUM에선 수백ms로 측정되었다.
그래서 Datadog에 확인 요청했더니 Akamai Datastream 2에서는 요청하고 응답받을 때까지의 duration을 측정하지만,
Datadog RUM에서는 브라우저에서 서버까지의 duration만 측정한다고 한다(2024년 8월 22일 기준).
게다가 일주일 간 RUM 스크립트를 추가해보니 예상 견적이 만만치 않았다.
다른 방법을 찾아야 했다.&lt;/p&gt;
&lt;h1 id=&#34;trace-context&#34;&gt;Trace Context&lt;/h1&gt;
&lt;p&gt;W3C 권고안(REC, Recommendation)인 Trace Context&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;는 분산 추적 통합을 위해 작성되었다.
플랫폼마다 Trace 방법이 달라서 추적 흐름이 끊기는 것을 방지하기 위해 통합이 필요하단 이유&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;였다.
Datadog에서 해당 스펙을 지원하고 있기 때문에 활용해보기로 했다.
Log와 Trace를 연결해서 어디서 에러가 발생하는지, 어디서 병목이 발생하는지 확인하기로 했다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/traceparent-datadog/datadog-trace-context.webp&#34; alt=&#34;datadog-trace-context.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.datadoghq.com/blog/monitor-otel-with-w3c-trace-context/&#34;&gt;Monitor OTel instrumented apps with support for W3C Trace Context | Datadog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;traceparent-헤더-형식&#34;&gt;Traceparent 헤더 형식&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;해당 권고안에 명시된 헤더가 2개(traceparent, tracestate&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;) 있지만 여기서는 추적을 위한 &lt;code&gt;traceparent&lt;/code&gt; 헤더만 살펴본다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{version}-{trace-id}-{parent-id}-{trace-flags}&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;version&lt;/code&gt;: 8 bits(1 byte). 현재는 00 고정이다. 2글자의 16진수. ff is forbidden.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trace-id&lt;/code&gt;: &lt;strong&gt;128 bits(16 bytes) trace ID, 32글자의 16진수. All zeroes forbidden.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parent-id&lt;/code&gt;: 64 bits(8 bytes) span ID, 16글자의 16진수. All zeroes forbidden.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trace-flags&lt;/code&gt;: 8 bits(1 byte) &lt;a href=&#34;https://en.wikipedia.org/wiki/Bit_field&#34;&gt;비트 필드&lt;/a&gt;.
데이터독에서는 2가지를 지정할 수 있음: Sampled (&lt;code&gt;01&lt;/code&gt;), not sampled (&lt;code&gt;00&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;예시: &lt;code&gt;00-8adb122e8b139de4a8744a379b4db39a-45897f550adef5c9-01&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;테스트-환경&#34;&gt;테스트 환경&lt;/h1&gt;
&lt;h2 id=&#34;전체-네트워크-흐름&#34;&gt;전체 네트워크 흐름&lt;/h2&gt;
&lt;p&gt;Client(Mobile App / Browser) → CDN (Akamai) → [IDC: 방화벽(FortiGate-100E) → L2 Switch → [WAF → L4 Switch → Apache HTTP Server → Application Server]]&lt;/p&gt;
&lt;h1 id=&#34;trace_id로-trace와-log-연결하기&#34;&gt;trace_id로 Trace와 Log 연결하기&lt;/h1&gt;
&lt;p&gt;이 방법은 APM Trace와 Log Collection에 로그가 있어야 한다.&lt;/p&gt;
&lt;h2 id=&#34;1-browser에서-요청-시-traceparent-헤더-추가하기&#34;&gt;1. Browser에서 요청 시 Traceparent 헤더 추가하기&lt;/h2&gt;
&lt;p&gt;요청 시 아래 스크립트로 생성한 값을 &lt;code&gt;Traceparent&lt;/code&gt; 헤더와 함께 보낸다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt; * https://www.w3.org/TR/trace-context-2/#traceparent-header-field-values
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;class&lt;/span&gt; Traceparent {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  constructor(version, traceId, parentId, flags) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0f0&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     * 2HEXDIGLC   ; this document assumes version 00. Version ff is forbidden
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     * 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     * @see https://www.w3.org/TR/trace-context-2/#version
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;this&lt;/span&gt;.version = version;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0f0&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     * 32HEXDIGLC  ; 16 bytes array identifier. All zeroes forbidden
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     * 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     * @see https://www.w3.org/TR/trace-context-2/#trace-id
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;this&lt;/span&gt;.traceId = traceId;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0f0&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     * 16HEXDIGLC  ; 8 bytes array identifier. All zeroes forbidden
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     * 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     * @see https://www.w3.org/TR/trace-context-2/#parent-id
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;this&lt;/span&gt;.parentId = parentId;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0f0&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     * 2HEXDIGLC   ; 8 bit flags.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     * 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     * @see https://www.w3.org/TR/trace-context-2/#trace-flags
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;this&lt;/span&gt;.flags = flags;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  toString() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#87ceeb&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;this&lt;/span&gt;.version&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;this&lt;/span&gt;.traceId&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;this&lt;/span&gt;.parentId&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;this&lt;/span&gt;.flags&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;`&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// 랜덤 바이트 생성
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// 브라우저에서 사용하기 위해 Node.js의 Buffer 대신 Uint8Array 사용.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;function&lt;/span&gt; randomBytes(size) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; bytes = &lt;span style=&#34;color:#f00&#34;&gt;new&lt;/span&gt; Uint8Array(size);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  window.crypto.getRandomValues(bytes);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; bytes;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// 16진수 문자열로 변환
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;function&lt;/span&gt; bufferHex(buffer) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; Array.from(buffer)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .map((b) =&amp;gt; b.toString(&lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt;).padStart(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .join(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// 10진수 숫자를 16진수 문자열로 변환
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;function&lt;/span&gt; toHex(number) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; number.toString(&lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt;).padStart(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// 버전, traceId, id, flags 생성
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;function&lt;/span&gt; make() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; version = toHex(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;); &lt;span style=&#34;color:#0f0&#34;&gt;// 현재 버전은 항상 `00`이므로 0으로 설정
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; traceId = bufferHex(randomBytes(&lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; parentId = bufferHex(randomBytes(&lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; traceFlags = toHex(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;); &lt;span style=&#34;color:#0f0&#34;&gt;// Datadog: Sampled (01) / not sampled (00)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;new&lt;/span&gt; Traceparent(version, traceId, parentId, traceFlags);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;default&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  make,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-akamai-cdn에서-traceparent의-값을-로그로-추가하기&#34;&gt;2. Akamai CDN에서 Traceparent의 값을 로그로 추가하기&lt;/h2&gt;
&lt;p&gt;Akamai Datastream 2에 &lt;strong&gt;커스텀 필드&lt;/strong&gt;를 추가해서 traceparent 헤더의 값을 데이터독에 로그로 전달하도록 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Properties (Property Manage) &amp;gt; Property 선택 후 규칙 추가&lt;/li&gt;
&lt;li&gt;Datadog Log에서 Grok Parser를 활용해 Akamai Datastream - &lt;code&gt;customField&lt;/code&gt;로 남겨진 &lt;code&gt;traceparent&lt;/code&gt; 헤더에서 trace_id를 추출한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-grok&#34; data-lang=&#34;grok&#34;&gt;# Grok Parser
traceparent_nullif (traceparent:%{traceparent_rule}|traceparent:\^|traceparent:-|traceparent:|-)

traceparent_rule %{_version}-%{_trace_id}-%{_parent_id}-%{_flags}

# Extract from: customField

_version %{regex(&amp;#34;[a-zA-Z0-9]*&amp;#34;):traceparent.version}
_trace_id %{regex(&amp;#34;[a-zA-Z0-9]*&amp;#34;):traceparent.trace_id}
_parent_id %{regex(&amp;#34;[a-zA-Z0-9]*&amp;#34;):traceparent.parent_id}
_flags %{regex(&amp;#34;[a-zA-Z0-9]*&amp;#34;):traceparent.flags}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3-apache-http-serverhttpd에서-traceparent-헤더-로그-남기기&#34;&gt;3. Apache HTTP Server(httpd)에서 Traceparent 헤더 로그 남기기&lt;/h2&gt;
&lt;p&gt;LogFormat에  &lt;code&gt;%{header_name}i&lt;/code&gt; 으로 남기면 &lt;a href=&#34;https://httpd.apache.org/docs/2.4/mod/mod_log_config.html#formats&#34;&gt;헤더의 값을 로그로 남길 수&lt;/a&gt; 있다.
httpd의 로그도 Grok Parser를 활용해 traceparent 헤더에서 trace_id를 추출한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&amp;lt;!-- httpd.conf --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;IfModule log_config_module&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  LogFormat &amp;#34;%h %l %u %t \&amp;#34;%r\&amp;#34; %&amp;gt;s %b %D \&amp;#34;%{Referer}i\&amp;#34; \&amp;#34;%{User-Agent}i\&amp;#34; \&amp;#34;%{traceparent}i\&amp;#34; %{BALANCER_WORKER_ROUTE}e&amp;#34; combined
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CustomLog /var/log/httpd/access.log combined
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/IfModule&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-grok&#34; data-lang=&#34;grok&#34;&gt;# Grok Parser
_traceparent (%{word:traceparent.version})?(-%{word:traceparent.trace_id})?(-%{word:traceparent.parent_id})?(-%{data:traceparent.flags})?
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4-java-application-spring-boot&#34;&gt;4. Java Application (Spring Boot)&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dd.trace.propagation.style&lt;/code&gt; 속성의 기본값은 &lt;code&gt;datadog,tracecontext&lt;/code&gt;으로 Datadog의 Trace ID가 우선한다.
이를 &lt;code&gt;tracecontext,datadog&lt;/code&gt;으로 변경하면 W3C Trace ID를 우선한다.
물론 여기서는 클라이언트에서 전달한 Trace ID를 사용한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nohup ~/.jdk/temurin-17.0.6/bin/java &lt;span style=&#34;color:#87ceeb&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;  -javaagent:/home/encar/tools/datadog/apm-java/dd-java-agent-1.37.0.jar &lt;span style=&#34;color:#87ceeb&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;  -Ddd.service.name=my-service &lt;span style=&#34;color:#87ceeb&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;  -Ddd.trace.propagation.style=tracecontext,datadog &lt;span style=&#34;color:#87ceeb&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;  -jar &lt;span style=&#34;color:#87ceeb&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;ARTIFACT_PATH&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;/app.jar &lt;span style=&#34;color:#87ceeb&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;  --spring.profiles.active=prod &lt;span style=&#34;color:#87ceeb&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;&amp;gt; /dev/null &amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DataDog/dd-trace-java/releases&#34;&gt;dd-java-agent 다운로드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;W3C의 traceparent는 128비트 Trace ID(32 lowercase hexadecimal characters)인 반면,
Datadog은 기본적으로 64비트 Trace ID(decimal numbers)를 지원한다.&lt;/li&gt;
&lt;li&gt;Datadog도 옵션 &lt;code&gt;dd.trace.128.bit.traceid.generation.enabled&lt;/code&gt;을 추가해서 128비트 Trace ID를 출력할 수 있다고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-결과&#34;&gt;5. 결과&lt;/h2&gt;
&lt;p&gt;Trace에 Log를 연결한 모습은 다음과 같다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/traceparent-datadog/connect-trace-log.webp&#34; alt=&#34;Connect Trace and Log&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;마치며&#34;&gt;마치며&lt;/h1&gt;
&lt;p&gt;서버에서 발생한 에러는 Trace에서 먼저 확인 후 클라이언트 &amp;gt; CDN &amp;gt; 웹 서버 로그로 확인할 수 있고,
방화벽 이슈로 발생한 에러는 위와 같이 Log Collection에서 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;Browser 스팬을 연결할 다른 방법이 없는지 데이터독 기술 지원을 요청했지만, RUM을 사용해보라는 답변뿐이었다.&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;
OpenTelemetry(OTel) 도입도 고민했지만, 현재 팀 규모에서 시스템을 더 늘릴 수는 없어서 포기했다.&lt;/p&gt;
&lt;p&gt;지연 문제도 찾아서 해결되었다.
Akamai Datastream에서 정확한 duration을 확인할 수 있었는데 해당 요청들에 대해 기술 지원을 요청했고,
원인은 CDN이 아니라 IDC에 있던 방화벽에서 특정 Akamai Edge IP를 차단하고 있었다.
아래 이미지는 Akamai Edge IP를 차단 해제했을 때 해소된 모습이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/traceparent-datadog/solve-network-delay.webp&#34; alt=&#34;Solve Network Delay&#34;&gt;&lt;/p&gt;
&lt;p&gt;이것을 꼼수라고 해야 할지 모르겠지만, 어찌됐건 해당 작업 후 원인을 알 수 없던 문제들을 해결할 수 있었다.&lt;/p&gt;
&lt;h1 id=&#34;참조&#34;&gt;참조&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/trace-context/&#34;&gt;Trace Context | W3C&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/w3c/trace-context/tree/main/spec&#34;&gt;Github(w3c/trace-context) | W3C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/trace/docs/trace-context&#34;&gt;Trace context | Google Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/elastic-apm-adopts-w3c-tracecontext&#34;&gt;Elastic APM adopts W3C TraceContext | Elastic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Datadog
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.datadoghq.com/real_user_monitoring/platform/connect_rum_and_traces/?tab=w3ctracecontext&#34;&gt;Connect RUM and Traces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.datadoghq.com/logs/log_configuration/parsing/?tab=matchers&#34;&gt;Parsing&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.datadoghq.com/service_management/events/pipelines_and_processors/grok_parser/?tab=matchers&#34;&gt;Grok Parser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.datadoghq.com/standard-attributes/&#34;&gt;Default Standard Attributes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.datadoghq.com/tracing/trace_collection/trace_context_propagation/?tab=java&#34;&gt;Trace Context Propagation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.datadoghq.com/tracing/trace_collection/library_config/java/&#34;&gt;Configuring the Java Tracing Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.datadoghq.com/blog/monitor-otel-with-w3c-trace-context/&#34;&gt;Monitor OTel instrumented apps with support for W3C Trace Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.datadoghq.com/logs/guide/remap-custom-severity-to-official-log-status/&#34;&gt;Remap Custom Severity Values to the Official Log Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.datadoghq.com/tracing/troubleshooting/correlated-logs-not-showing-up-in-the-trace-id-panel/?tab=jsonlogs&#34;&gt;Correlated Logs Are Not Showing Up In The Trace ID Panel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;각주&#34;&gt;각주&lt;/h1&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;W3C의 권고안에는 &lt;a href=&#34;https://www.w3.org/2004/02/Process-20040205/tr.html#maturity-levels&#34;&gt;레벨&lt;/a&gt;이 있는데
Trace Context는 &lt;a href=&#34;https://www.w3.org/news/2020/trace-context-is-a-w3c-recommendation/&#34;&gt;2020년 2월&lt;/a&gt; 최고 레벨인 Recommendation(REC)으로 전환된 권고안이다.
올해(2024년)에는 &lt;a href=&#34;https://www.w3.org/TR/trace-context-2/&#34;&gt;Level 2&lt;/a&gt;와 &lt;a href=&#34;https://w3c.github.io/trace-context/&#34;&gt;Level 3&lt;/a&gt;까지 나왔다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.w3.org/TR/trace-context/#problem-statement&#34;&gt;Problem Statement&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.w3.org/TR/trace-context/#tracestate-header&#34;&gt;tracestate&lt;/a&gt;는 &lt;code&gt;key=value&lt;/code&gt; 형태로 메타데이터를 전달하기 위해 사용하라고 되어 있는데 선택 사항이다.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;Datadog Log Collection에도 Traceparent 헤더를 추가할 수 있지만, &lt;a href=&#34;https://github.com/DataDog/browser-sdk/issues/1538&#34;&gt;beforeSend API를 사용해야 한다고 한다&lt;/a&gt;. 2024년 8월 기준 RUM보다 직접 추가하는 것이 나은 듯하다.&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
- https://markruler.github.io/posts/web/traceparent-datadog/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>Docker Compose로 간단하게 Ollama 시작하기</title>
        <link>https://markruler.github.io/posts/ai/ollama-openwebui-docker-compose/</link>
        <pubDate>Wed, 31 Jul 2024 23:48:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/ai/ollama-openwebui-docker-compose/</guid>
        <description>임창수 https://markruler.github.io/posts/ai/ollama-openwebui-docker-compose/ -&lt;h1 id=&#34;대형-언어-모델-llm-large-language-model&#34;&gt;대형 언어 모델 (LLM, Large Language Model)&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;LLM은 방대한 양의 데이터로 사전 학습된 초대형 딥 러닝 모델&lt;/strong&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;이다.
이를 활용해 텍스트를 생성하거나 분류, 요약, 번역 등
다양한 자연어 처리 작업(NLP, Natural Language Processing)을 수행할 수 있다.&lt;/p&gt;
&lt;p&gt;일반적으로 &lt;strong&gt;700억 개(70 Billion) 이상의 파라미터를 갖는 모델을 LLM&lt;/strong&gt;이라고 한다.
&lt;strong&gt;70억 개(7 Billion) 수준의 파라미터를 갖는 모델은 SLM&lt;/strong&gt;(Small Language Model)이라고 한다.
이 사이에 &lt;strong&gt;중간 규모의 모델은 sLLM&lt;/strong&gt;(smaller Large Language Model)이라고 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ollama&lt;/strong&gt;는 오픈소스 LLM을 쉽게 실행할 수 있게 도와주는 도구다.
&lt;strong&gt;Open WebUI&lt;/strong&gt;는 ChatGPT 화면처럼 LLM과 대화 시 웹 UI를 제공하는 오픈소스다.
이 2가지 도구를 간단하게 사용해보자.&lt;/p&gt;
&lt;h1 id=&#34;docker-없이-ollma-실행해보기&#34;&gt;Docker 없이 Ollma 실행해보기&lt;/h1&gt;
&lt;p&gt;먼저 Docker 컨테이너 없이 Python 스크립트로 Ollama를 실행해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install langchain-community==0.2.11
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;from&lt;/span&gt; langchain_community.chat_models &lt;span style=&#34;color:#f00&#34;&gt;import&lt;/span&gt; ChatOllama
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;from&lt;/span&gt; langchain_core.prompts &lt;span style=&#34;color:#f00&#34;&gt;import&lt;/span&gt; ChatPromptTemplate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Initialize the prompt with system message&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;initial_prompt = [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;system&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;너는 중고차 판매를 도와주는 어시스턴트야.&amp;#34;&lt;/span&gt; +
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;이름은 AMI야.&amp;#34;&lt;/span&gt; +
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;존댓말을 해야 해.&amp;#34;&lt;/span&gt; +
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;human이 우리 서비스의 자동차를 구매하도록 유도하고 관련 질문 아니면 대답해줄 수 없다고 해.&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Function to create a prompt with message history&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;create_prompt_with_history&lt;/span&gt;(history, new_message):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; ChatPromptTemplate.from_messages(history + [(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;human&amp;#34;&lt;/span&gt;, new_message)])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Initialize the model&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;llm = ChatOllama(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    model=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;llama3.1:8b&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    temperature=&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Conversation history&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conversation_history = initial_prompt.copy()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Function to process new user input&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;process_input&lt;/span&gt;(input_text):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;global&lt;/span&gt; conversation_history
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    prompt = create_prompt_with_history(conversation_history, input_text)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    chain = prompt | llm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    response = chain.invoke({&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;: input_text})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0f0&#34;&gt;# Add the new messages to the conversation history&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    conversation_history.append((&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;human&amp;#34;&lt;/span&gt;, input_text))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    conversation_history.append((&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;assistant&amp;#34;&lt;/span&gt;, response.content))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; response.content
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Main loop to handle console input&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; __name__ == &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;중고차 판매 어시스턴트 AMI와 대화를 시작합니다. &amp;#39;exit&amp;#39;을 입력하면 종료됩니다.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        user_input = input(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;You: &amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; user_input.lower() == &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;exit&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;대화를 종료합니다.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f00&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        response = process_input(user_input)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Assistant:&amp;#34;&lt;/span&gt;, response)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 스크립트를 실행하면 다음과 같이 대화를 할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;중고차 판매 어시스턴트 AMI와 대화를 시작합니다. &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;exit&amp;#39;&lt;/span&gt;을 입력하면 종료됩니다.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; You: Hyundai 차 추천해줘.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Assistant: 죄송합니다. 저는 중고차 판매를 도와주는 어시스턴트로, 저는 직접 자동차를 추천할 수 없습니다. 그러나, 저는 Hyundai의 다양한 모델에 대한 정보를 제공할 수 있습니다.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hyundai에는 여러 모델이 있지만, 가장 인기 있는 몇 가지 모델은 다음과 같습니다:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*   Hyundai Elantra: 이 모델은 중형 세단으로, 내구성과 경제성을 강조합니다.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*   Hyundai Sonata: 이 모델은 중형 세단으로, 스타일과 기능을 제공합니다.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*   Hyundai Tucson: 이 모델은 소형 SUV로, 공간과 성능을 제공합니다.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;이러한 정보는 구매자에게 도움이 될 수 있습니다. 그러나, 구매자는 직접 자동차를 방문하고 테스트해 보아야 합니다.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; You: exit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;대화를 종료합니다.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;질문에 답변 시 GPU를 사용하는 것도 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/ai/ollama-openwebui-docker-compose/ollama-gpu.webp&#34; alt=&#34;GPU 사용하는 프로그램&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;docker-compose-사용하기&#34;&gt;Docker Compose 사용하기&lt;/h1&gt;
&lt;p&gt;처음에는 Open WebUI 레포지토리에 있는 &lt;a href=&#34;https://github.com/open-webui/open-webui/blob/main/docker-compose.yaml&#34;&gt;docker-compose.yaml&lt;/a&gt;
파일로 실행해봤지만 답변 시 &lt;strong&gt;CPU만 사용&lt;/strong&gt;하는 것을 확인할 수 있었다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/ai/ollama-openwebui-docker-compose/ollama-cpu-docker.webp&#34; alt=&#34;CPU를 사용하는 Docker Ollama&#34;&gt;&lt;/p&gt;
&lt;p&gt;확인해보니 기본적으로 Docker로 실행할 경우 CPU를 사용한다.
&lt;a href=&#34;https://ollama.com/blog/ollama-is-now-available-as-an-official-docker-image&#34;&gt;Ollama 문서&lt;/a&gt;를
참조해서 GPU를 사용하도록 설정해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Docker로 실행할 경우&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -d --gpus=all -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Docker Compose로 실행할 때도 &lt;a href=&#34;https://docs.docker.com/compose/gpu-support/&#34;&gt;공식 문서&lt;/a&gt;를 참조해서 옵션을 추가할 수 있었다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Docker Compose로 실행할 경우&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;services:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ollama:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    volumes:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - ollama:/root/.ollama
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    container_name: ollama
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pull_policy: always
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tty: &lt;span style=&#34;color:#f00&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    restart: unless-stopped
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    image: ollama/ollama:${OLLAMA_DOCKER_TAG-latest}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0f0&#34;&gt;# 추가한 옵션 [deploy](https://docs.docker.com/compose/gpu-support/)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    deploy:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      resources:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        reservations:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          devices:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - driver: nvidia
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              count: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              capabilities: [gpu]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  open-webui:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    build:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      context: .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      args:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        OLLAMA_BASE_URL: &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;/ollama&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      dockerfile: Dockerfile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    image: ghcr.io/open-webui/open-webui:${WEBUI_DOCKER_TAG-main}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    container_name: open-webui
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    volumes:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - open-webui:/app/backend/data
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    depends_on:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - ollama
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ports:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - ${OPEN_WEBUI_PORT-3000}:8080
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    environment:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;OLLAMA_BASE_URL=http://ollama:11434&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;WEBUI_SECRET_KEY=&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    extra_hosts:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - host.docker.internal:host-gateway
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    restart: unless-stopped
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;volumes:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ollama: {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  open-webui: {}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;실행 후 &lt;code&gt;3000&lt;/code&gt;번 포트 혹은 &lt;code&gt;OPEN_WEBUI_PORT&lt;/code&gt;로 지정한 포트로 접속하면 Open WebUI 화면을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/ai/ollama-openwebui-docker-compose/ollama-open-webui.webp&#34; alt=&#34;Open WebUI 화면&#34;&gt;&lt;/p&gt;
&lt;p&gt;GPU를 사용하는 것도 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/ai/ollama-openwebui-docker-compose/ollama-gpu-docker.webp&#34; alt=&#34;GPU 사용하는 Ollama Docker Container&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;더-나은-결과물을-위해-추가로-고려해야-할-사항&#34;&gt;더 나은 결과물을 위해 추가로 고려해야 할 사항&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://platform.openai.com/docs/guides/optimizing-llm-accuracy&#34;&gt;Optimizing LLMs for accuracy&lt;/a&gt; - OpenAI Platform&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/ai/ollama-openwebui-docker-compose/llm-optimizing-accuracy.webp&#34; alt=&#34;LLM optimization context&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RAG(Retrieval-Augmented Generation)&lt;/strong&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;을 통해 외부의 정보와 결합된 답변을 생성할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;파인 튜닝(Fine-tuning)&lt;/strong&gt;&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;을 통해 특정 도메인에 특화된 답변을 생성할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;가드레일(Guardrails)&lt;/strong&gt;&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;을 설정해 원치 않는 답변을 방지할 수 있다. (토픽/안전/보안 가드레일)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;더-알아보기&#34;&gt;더 알아보기&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;입문 (전체적인 그림 그리기)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ISBN=9791140708598&#34;&gt;(Book) 랭체인으로 LLM 기반의 AI 서비스 개발하기 - 서지영&lt;/a&gt; - 입문&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ISBN=9791189909703&#34;&gt;(Book) LLM을 활용한 실전 AI 애플리케이션 개발 - 허정준&lt;/a&gt; - 입문 + 측정&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/cto0f7prJXs&#34;&gt;(Youtube) LLM 발전 동향과 LLM 기업 활용 이슈와 대안 - 신정규 대표 (래블업)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/cto0f7prJXs&#34;&gt;(Youtube) 프롬프트 엔지니어링보다 RAG를 못하면 AI에게 제대로된 답변 받을 수 없습니다 - 테디노트&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RAG
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/kr/what-is/retrieval-augmented-generation/&#34;&gt;검색 증강 생성(RAG)이란?&lt;/a&gt; - Elastic&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/T-D1OfcDW1M&#34;&gt;What is Retrieval-Augmented Generation (RAG)?&lt;/a&gt; - IBM Techonology&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cookbook.openai.com/examples/vector_databases/elasticsearch/elasticsearch-retrieval-augmented-generation&#34;&gt;Retrieval augmented generation using Elasticsearch and OpenAI&lt;/a&gt; - OpenAI Cookbook&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/kr/elasticsearch/elasticsearch-relevance-engine&#34;&gt;Elasticsearch Relevance Engine(ESRE)&lt;/a&gt; - Elastic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;파인 튜닝
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://platform.openai.com/docs/guides/fine-tuning&#34;&gt;Fine-tuning&lt;/a&gt; - OpenAI Platform&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;가드레일
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/4zRc-k2KNKQ&#34;&gt;LLM 생성 모델 - 챗봇 구축 전략 (HelpNow)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ml6.eu/blogpost/the-landscape-of-llm-guardrails-intervention-levels-and-techniques&#34;&gt;The landscape of LLM guardrails: intervention levels and techniques&lt;/a&gt; - ML6&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cookbook.openai.com/examples/how_to_use_guardrails&#34;&gt;How to implement LLM guardrails&lt;/a&gt; - OpenAI Cookbook&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/SwqusllMCnE&#34;&gt;NVIDIA NeMo Guardrails: Full Walkthrough for Chatbots / AI&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIA/NeMo-Guardrails&#34;&gt;NVIDIA/NeMo-Guardrails&lt;/a&gt; - GitHub repository&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.guardrailsai.com/docs/examples/response_is_on_topic&#34;&gt;On Topic Validation&lt;/a&gt; - Guardrails AI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/ko/what-is/large-language-model/&#34;&gt;대규모 언어 모델(LLM)이란 무엇인가요?&lt;/a&gt; - AWS&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/ko/what-is/retrieval-augmented-generation/&#34;&gt;검색 증강 생성(RAG)이란 무엇인가요?&lt;/a&gt; - AWS&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.skelterlabs.com/blog/rag-vs-finetuning&#34;&gt;RAG vs. 파인튜닝 :: 기업용 맞춤 LLM을 위한 선택 가이드&lt;/a&gt; - 스켈터 랩스 Skelter Labs&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.nvidia.com/ko-kr/blog/nvidia-enables-trustworthy-safe-and-secure-large-language-model-conversational-systems/&#34;&gt;신뢰할 수 있고 안전하며 보안이 뛰어난 대규모 언어 모델 대화 시스템을 구현하는 NVIDIA&lt;/a&gt; - NVIDIA&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
- https://markruler.github.io/posts/ai/ollama-openwebui-docker-compose/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>유용한 구글 크롬(Google Chrome)의 기능</title>
        <link>https://markruler.github.io/posts/web/google-chrome/</link>
        <pubDate>Mon, 29 Jul 2024 00:51:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/web/google-chrome/</guid>
        <description>임창수 https://markruler.github.io/posts/web/google-chrome/ -&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#chrome-urls&#34;&gt;Chrome URLs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EB%B6%81%EB%A7%88%ED%81%B4%EB%A6%BF-bookmarklet&#34;&gt;북마클릿 Bookmarklet&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%EC%9C%A0%EC%9A%A9%ED%95%9C-%EB%B6%81%EB%A7%88%ED%81%B4%EB%A6%BF&#34;&gt;유용한 북마클릿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8A%A4%EB%8B%88%ED%8E%AB&#34;&gt;자바스크립트 스니펫&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EA%B0%9C%EB%B0%9C%EC%9E%90-%EB%8F%84%EA%B5%AC-devtools&#34;&gt;개발자 도구 DevTools&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#performance-%ED%8C%A8%EB%84%90&#34;&gt;Performance 패널&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#network-%ED%8C%A8%EB%84%90&#34;&gt;Network 패널&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#network-log&#34;&gt;Network Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#network-conditions&#34;&gt;Network Conditions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#html-%EB%AC%B8%EC%84%9C-%EC%83%9D%EB%AA%85%EC%A3%BC%EA%B8%B0&#34;&gt;HTML 문서 생명주기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#network-%ED%8C%A8%EB%84%90%EC%97%90%EC%84%9C-har-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0&#34;&gt;Network 패널에서 HAR 가져오기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sources-%ED%8C%A8%EB%84%90&#34;&gt;Sources 패널&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%EB%A1%9C%EC%BB%AC-%EC%9E%AC%EC%A0%95%EC%9D%98-local-overrides&#34;&gt;로컬 재정의 (Local Overrides)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#override-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%A0%80%EC%9E%A5%ED%95%A0-%ED%8F%B4%EB%8D%94-%EC%A7%80%EC%A0%95&#34;&gt;Override 파일을 저장할 폴더 지정&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#console&#34;&gt;Console&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EC%B0%B8%EC%A1%B0&#34;&gt;참조&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;chrome-urls&#34;&gt;Chrome URLs&lt;/h1&gt;
&lt;p&gt;크롬 URL은 Google Chrome 브라우저에서 설정 페이지나 특정 기능으로 빠르게 접근할 수 있게 해주는 내부 주소다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chrome://about/&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;크롬 URL 목록&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chrome://net-internals/#hsts&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;HSTS 조회 및 비활성화&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chrome://inspect#devices&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;USB로 &lt;strong&gt;모바일 디바이스&lt;/strong&gt;를 연결해서 개발자 도구(DevTools)로 모바일 크롬 앱을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;북마클릿-bookmarklet&#34;&gt;북마클릿 Bookmarklet&lt;/h1&gt;
&lt;p&gt;북마클릿(Bookmarklet)이라는 단어는 북마크(Bookmark)와 애플릿(Applet)의 합성어다.
이 단어는 다음과 같은 이유로 만들어졌다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;북마크(Bookmark)
&lt;ul&gt;
&lt;li&gt;웹 브라우저에서 특정 웹 페이지를 빠르게 접근할 수 있도록 저장하는 기능이다.
북마크는 사용자가 자주 방문하는 페이지를 저장해 두고 클릭만으로 쉽게 이동할 수 있게 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;애플릿(Applet)
&lt;ul&gt;
&lt;li&gt;플러그인의 일종으로, 웹 브라우저나 제어판 등의 프로그램에서 실행되는 작은 응용 프로그램이다.
전용 위젯 엔진이나 더 큰 프로그램 범위 내에서 특정한 작업을 수행하며, 독립적으로 사용되지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;북마클릿은 자바스크립트 코드를 포함하고 있는 북마크로,
사용자가 클릭하면 해당 코드가 실행되어 특정 작업을 수행한다.
이 용어는 북마크의 편리함과 애플릿의 실행 기능을 결합한 형태를 잘 나타낸다.&lt;/p&gt;
&lt;p&gt;북마클릿은 1990년대 후반에 등장했으며,
특히 브라우저에서 반복적인 작업을 자동화하거나 웹 페이지를 개인화하기 위한 도구로 널리 사용되었다.
그 후로 웹 개발자들과 사용자들 사이에서 인기를 끌게 되었다.&lt;/p&gt;
&lt;h2 id=&#34;유용한-북마클릿&#34;&gt;유용한 북마클릿&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// 1000ms(1초) 후에 모든 이미지에 빨간 테두리 추가
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;javascript: (&lt;span style=&#34;color:#f00&#34;&gt;async&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;function&lt;/span&gt; sleep() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;new&lt;/span&gt; Promise((r) =&amp;gt; setTimeout(r, &lt;span style=&#34;color:#f60&#34;&gt;1_000&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;await&lt;/span&gt; sleep().then(() =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; images = document.querySelectorAll(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;img&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    images.forEach((img) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      img.style.border = &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;2px solid red&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// 현재 탭 복제
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;javascript:&lt;span style=&#34;color:#f00&#34;&gt;void&lt;/span&gt;(window.open(location));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// wayback - wayback machine에 현재 페이지 저장
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;javascript:&lt;span style=&#34;color:#f00&#34;&gt;void&lt;/span&gt;(window.open(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;https://web.archive.org/save/&amp;#34;&lt;/span&gt;+document.location.href));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Decoded URL - 현재 페이지의 디코딩된 URL를 복사한다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;javascript:console.log(prompt(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;copy (Control+C) this link:&amp;#39;&lt;/span&gt;, decodeURIComponent(window.location)));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Webpage Stats - 페이지 통계
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;javascript:(&lt;span style=&#34;color:#f00&#34;&gt;function&lt;/span&gt;(){&lt;span style=&#34;color:#f00&#34;&gt;var&lt;/span&gt; el=document.createElement(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;);el.type=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;;el.src=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;https://micmro.github.io/performance-bookmarklet/dist/performanceBookmarklet.min.js&amp;#39;&lt;/span&gt;;el.onerror=&lt;span style=&#34;color:#f00&#34;&gt;function&lt;/span&gt;(){alert(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Looks like the Content Security Policy directive is blocking the use of bookmarklets\n\nYou can copy and paste the content of:\n\n\&amp;#34;https://micmro.github.io/performance-bookmarklet/dist/performanceBookmarklet.min.js\&amp;#34;\n\ninto your console instead\n\n(link is in console already)&amp;#34;&lt;/span&gt;);console.log(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;https://micmro.github.io/performance-bookmarklet/dist/performanceBookmarklet.min.js&amp;#34;&lt;/span&gt;);};document.getElementsByTagName(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;].appendChild(el);})();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// PageSpeed Insights - 현재 페이지 분석
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;javascript:&lt;span style=&#34;color:#f00&#34;&gt;void&lt;/span&gt;(open(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;https://pagespeed.web.dev/analysis?url=&amp;#39;&lt;/span&gt; + encodeURIComponent(location.href)));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// EyeDropper - 색상의 HEX 코드를 찾을 수 있는 Eye Dropper를 실행
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;javascript:&lt;span style=&#34;color:#f00&#34;&gt;void&lt;/span&gt;(&lt;span style=&#34;color:#f00&#34;&gt;async&lt;/span&gt;()=&amp;gt;{&lt;span style=&#34;color:#f00&#34;&gt;try&lt;/span&gt;{prompt(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;Selected HEX color:&amp;#39;&lt;/span&gt;,(&lt;span style=&#34;color:#f00&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;new&lt;/span&gt; EyeDropper().open()).sRGBHex);}&lt;span style=&#34;color:#f00&#34;&gt;catch&lt;/span&gt;(e){alert(e);}})();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// 3D Webpage - 현재 페이지를 3D로 보여준다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;javascript:(&lt;span style=&#34;color:#f00&#34;&gt;function&lt;/span&gt;(){&lt;span style=&#34;color:#f00&#34;&gt;var&lt;/span&gt; js=document.body.appendChild(document.createElement(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;script&amp;#34;&lt;/span&gt;));js.onerror=&lt;span style=&#34;color:#f00&#34;&gt;function&lt;/span&gt;(){alert(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Error! The Script Could Not Be Loaded!&amp;#34;&lt;/span&gt;)};js.src=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;https://rawgit.com/Krazete/bookmarklets/master/tri.js&amp;#34;&lt;/span&gt;})();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;자바스크립트-스니펫&#34;&gt;자바스크립트 스니펫&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://goo.gle/devtools-snippets&#34;&gt;자바스크립트 스니펫 실행&lt;/a&gt; | Run snippets of JavaScript
&lt;ul&gt;
&lt;li&gt;공식 문서에서도 북마클릿의 대체재라고 언급하지만,
&amp;lsquo;딸깍&amp;rsquo; 클릭만 하면 되는 북마클릿이 더 편하다&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/google-chrome/the-devtools-documentatio-b98254f550319_856.png&#34; alt=&#34;Run snippets of JavaScript&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;개발자-도구-devtools&#34;&gt;개발자 도구 DevTools&lt;/h1&gt;
&lt;h2 id=&#34;performance-패널&#34;&gt;Performance 패널&lt;/h2&gt;
&lt;p&gt;브라우저에서 페이지 성능을 체크할 수 있다.
아래 스크린샷처럼 Core Web Vitals(CWV)도 함께 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/google-chrome/performance-panel.webp&#34; alt=&#34;Performance Panel&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;network-패널&#34;&gt;Network 패널&lt;/h2&gt;
&lt;p&gt;아마 가장 많이 사용하는 패널이 아닌가 싶다.&lt;/p&gt;
&lt;h3 id=&#34;network-log&#34;&gt;Network Log&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://developer.chrome.com/static/docs/devtools/network/image/the-network-log-f17acc2e02c0a_856.png&#34; alt=&#34;Network Log&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://developer.chrome.com/docs/devtools/network&#34;&gt;Inspect network activity&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Preserve log
&lt;ul&gt;
&lt;li&gt;새로고침을 하더라도 이전 로그를 유지한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/docs/devtools/network/reference?#filter&#34;&gt;요청 필터링&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;앞에 &lt;code&gt;-&lt;/code&gt;를 붙이면 해당 조건에 해당하는 요청을 제외한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;domain:*.example.com&lt;/code&gt; | example.com 도메인만 필터링&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method:POST&lt;/code&gt; | POST 메소드만 필터링&lt;/li&gt;
&lt;li&gt;&lt;code&gt;status-code:200&lt;/code&gt; | 200 상태 코드만 필터링&lt;/li&gt;
&lt;li&gt;&lt;code&gt;larger-than:400k&lt;/code&gt; | 400KB 이상의 리소스만 필터링&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mime-type:image/webp&lt;/code&gt; | webp 이미지만 필터링&lt;/li&gt;
&lt;li&gt;&lt;code&gt;has-response-header:content-encoding&lt;/code&gt; | content-encoding 헤더가 있는 것만 필터링&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is:running&lt;/code&gt; | 실행 중인 요청만 필터링&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scheme:https&lt;/code&gt; | HTTPS 프로토콜만 필터링&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is:from-cache&lt;/code&gt; | 캐시에서 가져온 요청만 필터링&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cookie-name:django_language&lt;/code&gt; | django_language 쿠키가 있는 요청만 필터링&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;network-conditions&#34;&gt;Network Conditions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Disable cache
&lt;ul&gt;
&lt;li&gt;캐시를 비활성화하고 새로고침을 하면 캐시를 사용하지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;User agent
&lt;ul&gt;
&lt;li&gt;요청 User-Agent 헤더를 커스텀 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Network throttling
&lt;ul&gt;
&lt;li&gt;네트워크 속도를 조절할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Slow 4G&lt;/code&gt;, &lt;code&gt;Fast 4G&lt;/code&gt;, &lt;code&gt;3G&lt;/code&gt;, &lt;code&gt;Offline&lt;/code&gt; 등.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/google-chrome/more-network-conditions.png&#34; alt=&#34;More network conditions&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/google-chrome/network-conditions.png&#34; alt=&#34;network conditions&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;html-문서-생명주기&#34;&gt;HTML 문서 생명주기&lt;/h3&gt;
&lt;p&gt;네트워크 성능을 체크할 때
&lt;a href=&#34;https://ko.javascript.info/onload-ondomcontentloaded&#34;&gt;HTML 문서 생명주기&lt;/a&gt;를 알아두면 도움이 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState&#34;&gt;Document&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.readyState:loading&lt;/code&gt; - &lt;code&gt;document&lt;/code&gt; 객체가 생성되고 아직 로드되지 않은 상태.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.readyState:interactive&lt;/code&gt; - DOM 트리가 완성된 상태. 해당 상태로 변경된 직후 &lt;code&gt;DOMContentLoaded&lt;/code&gt; 이벤트가 발생한다. DOM 요소에 접근 가능하다.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event&#34;&gt;document/DOMContentLoaded&lt;/a&gt; - 브라우저가 HTML을 전부 읽고 DOM 트리를 완성하는 즉시 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.readyState:complete&lt;/code&gt; - HTML 문서와 모든 리소스(img, js, css)가 로드된 상태. 해당 상태로 변경된 직후 &lt;code&gt;window/load&lt;/code&gt; 이벤트가 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/docs/web-platform/page-lifecycle-api&#34;&gt;Page Lifecycle API&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event&#34;&gt;window/load&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event&#34;&gt;window/beforeunload&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;알러트 창을 띄운다. (&amp;ldquo;You have unsaved changes that will be lost.&amp;rdquo;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Window/pagehide_event&#34;&gt;window/pagehide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Window/unload_event&#34;&gt;window/unload&lt;/a&gt;&lt;/del&gt; - deprecated&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;network-패널에서-har-가져오기&#34;&gt;Network 패널에서 HAR 가져오기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/docs/devtools/network/reference?hl=ko#export&#34;&gt;자세한 내용&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/blog/new-in-devtools-62?hl=ko#har-imports&#34;&gt;Chrome 62&lt;/a&gt; | HAR imports in the Network panel&lt;/li&gt;
&lt;li&gt;HAR 파일을 가져와서 Network 패널에 로드하면 동일한 요청-응답 정보를 다시 볼 수 있다.
&lt;ul&gt;
&lt;li&gt;그럼 주고 받은 요청-응답 정보를 다른 사람과 공유하거나, 본인도 나중에 다시 확인 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/google-chrome/selecting-save-as-har-c-543367c2a7051_856.png&#34; alt=&#34;Save all network requests to a HAR file&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sources-패널&#34;&gt;Sources 패널&lt;/h2&gt;
&lt;h3 id=&#34;로컬-재정의-local-overrides&#34;&gt;로컬 재정의 (Local Overrides)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/blog/new-in-devtools-65?hl=ko#overrides&#34;&gt;Chrome 65&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/docs/devtools/overrides?hl=ko&#34;&gt;더 자세한 내용&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;개발자 도구 Source 패널에서 정적 파일을 수정 후 해당 페이지를 새로고침하면 모두 리로드된다.&lt;/li&gt;
&lt;li&gt;Local Override는 Source 패널에서 수정 후 저장하면, 이후 해당 페이지를 새로고침해도 수정한 내용이 유지된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/google-chrome/persisting-css-change-ac-3da090318c534.gif&#34; alt=&#34;Local Overrides&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;override-파일을-저장할-폴더-지정&#34;&gt;Override 파일을 저장할 폴더 지정&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/blog/new-in-devtools-66?hl=ko#overrides&#34;&gt;Chrome 66&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;위 로컬 재정의 기능에서 파일 수정 후 저장하면 해당 경로로 파일이 저장된다.&lt;/li&gt;
&lt;li&gt;이후 해당 페이지는 항상 Override된 파일을 참조하기 때문에 디버깅 후 해당 파일을 삭제하는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/google-chrome/an-example-styles-define-a24be5796e36a_856.png&#34; alt=&#34;Local Overrides now works with some styles defined in HTML&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;console&#34;&gt;Console&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/blog/new-in-devtools-126#self-xss-flag&#34;&gt;Chrome 126&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Console에 자바스크립트 코드를 붙여넣으면 발생하는 &lt;a href=&#34;https://developer.chrome.com/blog/self-xss&#34;&gt;self-XSS 경고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Warning:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Don’t paste code into the DevTools Console that you don’t understand or haven’t reviewed yourself.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This could allow attackers to steal your identity or take control &lt;span style=&#34;color:#f00&#34;&gt;of&lt;/span&gt; your computer.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Please type ‘allow pasting’ below and hit Enter to allow pasting.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;웹 브라우저에 따라 입력하는 것이 다르다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Google Chrome
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;allow pasting
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Microsoft Edge
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;console.profile()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;참조&#34;&gt;참조&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/docs/devtools/news?hl=ko&#34;&gt;DevTools의 새로운 기능&lt;/a&gt; | What&amp;rsquo;s New in DevTools&lt;/li&gt;
&lt;/ul&gt;
- https://markruler.github.io/posts/web/google-chrome/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>APM만큼 중요한 네트워크 모니터링</title>
        <link>https://markruler.github.io/posts/web/apm-network-device-troubleshooting-mistakes/</link>
        <pubDate>Thu, 25 Jul 2024 01:22:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/web/apm-network-device-troubleshooting-mistakes/</guid>
        <description>임창수 https://markruler.github.io/posts/web/apm-network-device-troubleshooting-mistakes/ -&lt;p&gt;APM은 애플리케이션 성능 모니터링(Application Performance Monitoring)이다.
우리팀이 사용하는 모니터링 서비스 데이터독(Datadog)은 APM에서 많은 것을 확인할 수 있다.
(인프라, 로그, 호스트의 프로세스, JVM 런타임 메트릭, 각 리소스별 레이턴시 등등)&lt;/p&gt;
&lt;h1 id=&#34;문제&#34;&gt;문제&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/apm-network-device-troubleshooting-mistakes/first.png&#34; alt=&#34;First&#34;&gt;&lt;/p&gt;
&lt;p&gt;어느날 체감이 될 정도로 서비스의 레이턴시가 높아지고, 정각마다 스파이크 발생했다.
또한 서비스 전체에 영향이 있었다.&lt;/p&gt;
&lt;h1 id=&#34;분석-쉽게-간과했던-문제&#34;&gt;분석: 쉽게 간과했던 문제&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://markruler.github.io/posts/db/oracle-dbms-session-diagnosis/&#34;&gt;Oracle Session 히스토리&lt;/a&gt;를 남겨서 확인했을 때
DB에 부하를 일으키면서 반복적으로 보이는 느린 쿼리가 없었다.
DB 문제는 아니었다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/apm-network-device-troubleshooting-mistakes/oracle-session.webp&#34; alt=&#34;Oracle Session 히스토리&#34;&gt;&lt;/p&gt;
&lt;p&gt;발생 시점에 반영된 소스 코드를 보니까 Public IP로 요청하던 내부 API를 Private IP로 요청하도록 변경했다.
이 시점에는 이게 문제라고 생각하지 않았다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;Private IP로 요청하면 더 빠른 거 아냐?&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;모니터링 할 수 있는 모든 지표를 확인했지만, 레이턴시가 높아지는 시점에 아무런 이상이 없었다.
혹시 몰라서 라우터 장비에 &lt;a href=&#34;https://markruler.github.io/posts/network/snmp/&#34;&gt;SNMP&lt;/a&gt; 모니터링을 추가했다.
IDC 매니저와 확인해보니 Private IP 망에 연결된 라우터의 UDP 케이블 전송 속도가 예상 속도 1Gbps가 아닌 10Mbps가 나오고 있었다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/apm-network-device-troubleshooting-mistakes/network-router.webp&#34; alt=&#34;Network Router&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;해결&#34;&gt;해결&lt;/h1&gt;
&lt;p&gt;정말 간단하게&amp;hellip; 케이블을 교체해서 해결되었다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/apm-network-device-troubleshooting-mistakes/solved.png&#34; alt=&#34;Solved&#34;&gt;&lt;/p&gt;
&lt;p&gt;정각마다 발생하는 스파이크는 DB 백업 솔루션에서 정각마다 실행하는 프로그램이 있어서 발생한 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/apm-network-device-troubleshooting-mistakes/replace-udp-cable.webp&#34; alt=&#34;Replace UDP Cable&#34;&gt;&lt;/p&gt;
&lt;p&gt;순간의 오판으로 시간을 허비했다.
익숙한 것도 의심하고, 모니터링의 한계점을 파악할 필요가 있다고 느꼈다.&lt;/p&gt;
- https://markruler.github.io/posts/web/apm-network-device-troubleshooting-mistakes/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
  </channel>
</rss> 