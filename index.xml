<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>임창수 블로그</title>
    <link>https://markruler.github.io/</link>
    <description>Recent content on 임창수 블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <managingEditor>imcxsu@gmail.com (Im Changsu)</managingEditor>
    <webMaster>imcxsu@gmail.com (Im Changsu)</webMaster>
    <copyright>Im Changsu 2020 - 2024</copyright>
    <lastBuildDate>Wed, 31 Jul 2024 23:48:00 +0900</lastBuildDate>
    
        <atom:link href="https://markruler.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Docker Compose로 간단하게 Ollama 시작하기</title>
        <link>https://markruler.github.io/posts/ai/ollama-openwebui-docker-compose/</link>
        <pubDate>Wed, 31 Jul 2024 23:48:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/ai/ollama-openwebui-docker-compose/</guid>
        <description>임창수 블로그 https://markruler.github.io/posts/ai/ollama-openwebui-docker-compose/ -&lt;h1 id=&#34;대형-언어-모델-llm-large-language-model&#34;&gt;대형 언어 모델 (LLM, Large Language Model)&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;LLM은 방대한 양의 데이터로 사전 학습된 초대형 딥 러닝 모델&lt;/strong&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;이다.
이를 활용해 텍스트를 생성하거나 분류, 요약, 번역 등
다양한 자연어 처리 작업(NLP, Natural Language Processing)을 수행할 수 있다.&lt;/p&gt;
&lt;p&gt;일반적으로 &lt;strong&gt;700억 개(70 Billion) 이상의 파라미터를 갖는 모델을 LLM&lt;/strong&gt;이라고 한다.
&lt;strong&gt;70억 개 수준의 파라미터를 갖는 모델은 SLM&lt;/strong&gt;(Small Language Model)이라고 한다.
이 사이에 &lt;strong&gt;중간 규모의 모델은 sLLM&lt;/strong&gt;(smaller Large Language Model)이라고 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ollama&lt;/strong&gt;는 오픈소스 LLM을 쉽게 실행할 수 있게 도와주는 도구다.
&lt;strong&gt;Open WebUI&lt;/strong&gt;는 ChatGPT 화면처럼 LLM과 대화 시 웹 UI를 제공하는 오픈소스다.
이 2가지 도구를 Docker Compose로 실행해보자.&lt;/p&gt;
&lt;h1 id=&#34;docker-compose-없이-ollma-실행해보기&#34;&gt;Docker Compose 없이 Ollma 실행해보기&lt;/h1&gt;
&lt;p&gt;먼저 Docker 컨테이너 없이 Python 스크립트로 Ollama를 실행해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; langchain_community.chat_models &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; ChatOllama
&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; langchain_core.prompts &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; ChatPromptTemplate

&lt;span style=&#34;color:#6272a4&#34;&gt;# Initialize the prompt with system message&lt;/span&gt;
initial_prompt &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [
    (
        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;system&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;너는 중고차 판매를 도와주는 어시스턴트야.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;
        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;이름은 AMI야.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;
        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;존댓말을 해야 해.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;
        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;human이 우리 서비스의 자동차를 구매하도록 유도하고 관련 질문 아니면 대답해줄 수 없다고 해.&amp;#34;&lt;/span&gt;,
    )
]


&lt;span style=&#34;color:#6272a4&#34;&gt;# Function to create a prompt with message history&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;create_prompt_with_history&lt;/span&gt;(history, new_message):
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; ChatPromptTemplate&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;from_messages(history &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; [(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;human&amp;#34;&lt;/span&gt;, new_message)])


&lt;span style=&#34;color:#6272a4&#34;&gt;# Initialize the model&lt;/span&gt;
llm &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ChatOllama(
    model&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;llama3.1:8b&amp;#34;&lt;/span&gt;,
    temperature&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;,
)

&lt;span style=&#34;color:#6272a4&#34;&gt;# Conversation history&lt;/span&gt;
conversation_history &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; initial_prompt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;copy()


&lt;span style=&#34;color:#6272a4&#34;&gt;# Function to process new user input&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;process_input&lt;/span&gt;(input_text):
    &lt;span style=&#34;color:#ff79c6&#34;&gt;global&lt;/span&gt; conversation_history
    prompt &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; create_prompt_with_history(conversation_history, input_text)
    chain &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; llm
    response &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; chain&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;invoke({&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;: input_text})

    &lt;span style=&#34;color:#6272a4&#34;&gt;# Add the new messages to the conversation history&lt;/span&gt;
    conversation_history&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append((&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;human&amp;#34;&lt;/span&gt;, input_text))
    conversation_history&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append((&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;assistant&amp;#34;&lt;/span&gt;, response&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;content))

    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; response&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;content


&lt;span style=&#34;color:#6272a4&#34;&gt;# Main loop to handle console input&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;중고차 판매 어시스턴트 AMI와 대화를 시작합니다. &amp;#39;exit&amp;#39;을 입력하면 종료됩니다.&amp;#34;&lt;/span&gt;)

    &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;:
        user_input &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;input&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;You: &amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; user_input&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;lower() &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;exit&amp;#39;&lt;/span&gt;:
            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;대화를 종료합니다.&amp;#34;&lt;/span&gt;)
            &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;

        response &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; process_input(user_input)
        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Assistant:&amp;#34;&lt;/span&gt;, response)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 스크립트를 실행하면 다음과 같이 대화를 할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;중고차 판매 어시스턴트 AMI와 대화를 시작합니다. &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;exit&amp;#39;&lt;/span&gt;을 입력하면 종료됩니다.
&amp;gt; You: Hyundai 차 추천해줘.
Assistant: 죄송합니다. 저는 중고차 판매를 도와주는 어시스턴트로, 저는 직접 자동차를 추천할 수 없습니다. 그러나, 저는 Hyundai의 다양한 모델에 대한 정보를 제공할 수 있습니다.

Hyundai에는 여러 모델이 있지만, 가장 인기 있는 몇 가지 모델은 다음과 같습니다:

*   Hyundai Elantra: 이 모델은 중형 세단으로, 내구성과 경제성을 강조합니다.
*   Hyundai Sonata: 이 모델은 중형 세단으로, 스타일과 기능을 제공합니다.
*   Hyundai Tucson: 이 모델은 소형 SUV로, 공간과 성능을 제공합니다.

이러한 정보는 구매자에게 도움이 될 수 있습니다. 그러나, 구매자는 직접 자동차를 방문하고 테스트해 보아야 합니다.

&amp;gt; You: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;exit&lt;/span&gt;
대화를 종료합니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;질문에 답변 시 GPU를 사용하는 것도 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/ai/ollama-openwebui-docker-compose/ollama-gpu.webp&#34; alt=&#34;GPU 사용하는 프로그램&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;docker-compose-사용하기&#34;&gt;Docker Compose 사용하기&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/open-webui/open-webui/blob/main/docker-compose.yaml&#34;&gt;Open WebUI 레포지토리에 있는 docker-compose.yaml&lt;/a&gt; 파일을 참조해서 실행해봤지만
답변 시 CPU만 사용하는 것을 확인할 수 있었다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/ai/ollama-openwebui-docker-compose/ollama-cpu-docker.webp&#34; alt=&#34;CPU를 사용하는 Docker Ollama&#34;&gt;&lt;/p&gt;
&lt;p&gt;확인해보니 기본적으로 Docker로 실행할 경우 CPU를 사용한다.
&lt;a href=&#34;https://ollama.com/blog/ollama-is-now-available-as-an-official-docker-image&#34;&gt;Ollama 문서&lt;/a&gt;를
참조해서 GPU를 사용하도록 설정해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Docker로 실행할 경우&lt;/span&gt;
docker run -d --gpus&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;all -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/compose/gpu-support/&#34;&gt;Docker Compose 문서&lt;/a&gt;를 참조해서 옵션을 추가한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Docker Compose로 실행할 경우&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;services&lt;/span&gt;:
  &lt;span style=&#34;color:#ff79c6&#34;&gt;ollama&lt;/span&gt;:
    &lt;span style=&#34;color:#ff79c6&#34;&gt;volumes&lt;/span&gt;:
      - ollama:/root/.ollama
    &lt;span style=&#34;color:#ff79c6&#34;&gt;container_name&lt;/span&gt;: ollama
    &lt;span style=&#34;color:#ff79c6&#34;&gt;pull_policy&lt;/span&gt;: always
    &lt;span style=&#34;color:#ff79c6&#34;&gt;tty&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;restart&lt;/span&gt;: unless-stopped
    &lt;span style=&#34;color:#ff79c6&#34;&gt;image&lt;/span&gt;: ollama/ollama:${OLLAMA_DOCKER_TAG-latest}
    &lt;span style=&#34;color:#6272a4&#34;&gt;# 추가한 옵션 [deploy](https://docs.docker.com/compose/gpu-support/)&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;deploy&lt;/span&gt;:
      &lt;span style=&#34;color:#ff79c6&#34;&gt;resources&lt;/span&gt;:
        &lt;span style=&#34;color:#ff79c6&#34;&gt;reservations&lt;/span&gt;:
          &lt;span style=&#34;color:#ff79c6&#34;&gt;devices&lt;/span&gt;:
            - &lt;span style=&#34;color:#ff79c6&#34;&gt;driver&lt;/span&gt;: nvidia
              &lt;span style=&#34;color:#ff79c6&#34;&gt;count&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
              &lt;span style=&#34;color:#ff79c6&#34;&gt;capabilities&lt;/span&gt;: [gpu]

  &lt;span style=&#34;color:#ff79c6&#34;&gt;open-webui&lt;/span&gt;:
    &lt;span style=&#34;color:#ff79c6&#34;&gt;build&lt;/span&gt;:
      &lt;span style=&#34;color:#ff79c6&#34;&gt;context&lt;/span&gt;: .
      &lt;span style=&#34;color:#ff79c6&#34;&gt;args&lt;/span&gt;:
        &lt;span style=&#34;color:#ff79c6&#34;&gt;OLLAMA_BASE_URL&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;/ollama&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color:#ff79c6&#34;&gt;dockerfile&lt;/span&gt;: Dockerfile
    &lt;span style=&#34;color:#ff79c6&#34;&gt;image&lt;/span&gt;: ghcr.io/open-webui/open-webui:${WEBUI_DOCKER_TAG-main}
    &lt;span style=&#34;color:#ff79c6&#34;&gt;container_name&lt;/span&gt;: open-webui
    &lt;span style=&#34;color:#ff79c6&#34;&gt;volumes&lt;/span&gt;:
      - open-webui:/app/backend/data
    &lt;span style=&#34;color:#ff79c6&#34;&gt;depends_on&lt;/span&gt;:
      - ollama
    &lt;span style=&#34;color:#ff79c6&#34;&gt;ports&lt;/span&gt;:
      - ${OPEN_WEBUI_PORT-3000}:8080
    &lt;span style=&#34;color:#ff79c6&#34;&gt;environment&lt;/span&gt;:
      - &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;OLLAMA_BASE_URL=http://ollama:11434&amp;#39;&lt;/span&gt;
      - &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;WEBUI_SECRET_KEY=&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;extra_hosts&lt;/span&gt;:
      - host.docker.internal:host-gateway
    &lt;span style=&#34;color:#ff79c6&#34;&gt;restart&lt;/span&gt;: unless-stopped

&lt;span style=&#34;color:#ff79c6&#34;&gt;volumes&lt;/span&gt;:
  &lt;span style=&#34;color:#ff79c6&#34;&gt;ollama&lt;/span&gt;: {}
  &lt;span style=&#34;color:#ff79c6&#34;&gt;open-webui&lt;/span&gt;: {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;실행 후 &lt;code&gt;3000&lt;/code&gt;번 포트 혹은 &lt;code&gt;OPEN_WEBUI_PORT&lt;/code&gt;로 지정한 포트로 접속하면 Open WebUI 화면을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/ai/ollama-openwebui-docker-compose/ollama-open-webui.webp&#34; alt=&#34;Open WebUI 화면&#34;&gt;&lt;/p&gt;
&lt;p&gt;GPU를 사용하는 것도 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/ai/ollama-openwebui-docker-compose/ollama-gpu-docker.webp&#34; alt=&#34;GPU 사용하는 Ollama Docker Container&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;서비스에서-고려해야-할-사항&#34;&gt;서비스에서 고려해야 할 사항&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;검색 증강 생성(RAG, Retrieval-Augmented Generation)&lt;/strong&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;을 통해 외부의 정보와 결합된 답변을 생성할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;미세 조정(Fine-tuning, 파인 튜닝)&lt;/strong&gt;&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; 을 통해 특정 도메인에 특화된 답변을 생성할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;더-알아보기&#34;&gt;더 알아보기&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;입문 (전체적인 그림 그리기)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/cto0f7prJXs&#34;&gt;(Youtube) LLM 발전 동향과 LLM 기업 활용 이슈와 대안 - 신정규 대표 (래블업)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ISBN=9791140708598&#34;&gt;(Book) 랭체인으로 LLM 기반의 AI 서비스 개발하기 - 서지영&lt;/a&gt; - 입문&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ISBN=9791189909703&#34;&gt;(Book) LLM을 활용한 실전 AI 애플리케이션 개발 - 허정준&lt;/a&gt; - 입문 + 측정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;검색 증강 생성 (RAG)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/kr/what-is/retrieval-augmented-generation/&#34;&gt;검색 증강 생성(RAG)이란?&lt;/a&gt; - Elastic&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cookbook.openai.com/examples/vector_databases/elasticsearch/elasticsearch-retrieval-augmented-generation&#34;&gt;Retrieval augmented generation using Elasticsearch and OpenAI&lt;/a&gt; - OpenAI Cookbook&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/kr/elasticsearch/elasticsearch-relevance-engine&#34;&gt;Elasticsearch Relevance Engine(ESRE)&lt;/a&gt; - Elastic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;미세 조정 (파인 튜닝)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://platform.openai.com/docs/guides/fine-tuning&#34;&gt;Fine-tuning&lt;/a&gt; - OpenAI Platform&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/ko/what-is/large-language-model/&#34;&gt;대규모 언어 모델(LLM)이란 무엇인가요?&lt;/a&gt; - AWS&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/ko/what-is/retrieval-augmented-generation/&#34;&gt;검색 증강 생성(RAG)이란 무엇인가요?&lt;/a&gt; - AWS&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.skelterlabs.com/blog/rag-vs-finetuning&#34;&gt;RAG vs. 파인튜닝 :: 기업용 맞춤 LLM을 위한 선택 가이드&lt;/a&gt; - 스켈터 랩스 Skelter Labs&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
- https://markruler.github.io/posts/ai/ollama-openwebui-docker-compose/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>👾 웹 개발자가 알면 유용한 구글 크롬(Google Chrome)의 기능</title>
        <link>https://markruler.github.io/posts/web/google-chrome/</link>
        <pubDate>Mon, 29 Jul 2024 00:51:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/web/google-chrome/</guid>
        <description>임창수 블로그 https://markruler.github.io/posts/web/google-chrome/ -&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#chrome-urls&#34;&gt;Chrome URLs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EB%B6%81%EB%A7%88%ED%81%B4%EB%A6%BF-bookmarklet&#34;&gt;북마클릿 Bookmarklet&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8A%A4%EB%8B%88%ED%8E%AB&#34;&gt;자바스크립트 스니펫&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EA%B0%9C%EB%B0%9C%EC%9E%90-%EB%8F%84%EA%B5%AC-devtools&#34;&gt;개발자 도구 DevTools&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#chrome-62&#34;&gt;Chrome 62&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chrome-65&#34;&gt;Chrome 65&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chrome-66&#34;&gt;Chrome 66&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chrome-126&#34;&gt;Chrome 126&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EC%B0%B8%EC%A1%B0&#34;&gt;참조&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;chrome-urls&#34;&gt;Chrome URLs&lt;/h1&gt;
&lt;p&gt;크롬 URL은 Google Chrome 브라우저에서 설정 페이지나 특정 기능으로 빠르게 접근할 수 있게 해주는 내부 주소다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chrome://about/&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;크롬 URL 목록&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chrome://net-internals/#hsts&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;HSTS 조회 및 비활성화&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chrome://inspect#devices&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;USB로 모바일 디바이스를 연결해서 개발자 도구(DevTools)로 모바일 크롬 앱을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;북마클릿-bookmarklet&#34;&gt;북마클릿 Bookmarklet&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;북마클릿(Bookmarklet)&lt;/code&gt;이라는 단어는 &lt;code&gt;북마크(Bookmark)&lt;/code&gt;와 &lt;code&gt;애플릿(Applet)&lt;/code&gt;의 합성어다.
이 단어는 다음과 같은 이유로 만들어졌다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;북마크(Bookmark)&lt;/strong&gt;:
웹 브라우저에서 특정 웹 페이지를 빠르게 접근할 수 있도록 저장하는 기능이다.
북마크는 사용자가 자주 방문하는 페이지를 저장해 두고 클릭만으로 쉽게 이동할 수 있게 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;애플릿(Applet)&lt;/strong&gt;:
작은 애플리케이션 프로그램을 의미하는 단어로,
보통 웹 브라우저 내에서 실행되는 작은 자바 프로그램을 의미한다.
그러나 &amp;ldquo;애플릿&amp;quot;은 여기서 작은 규모의 프로그램 또는 스크립트를 의미한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;북마클릿은 자바스크립트 코드를 포함하고 있는 북마크로,
사용자가 클릭하면 해당 코드가 실행되어 특정 작업을 수행한다.
이 용어는 북마크의 편리함과 애플릿의 실행 기능을 결합한 형태를 잘 나타낸다.&lt;/p&gt;
&lt;p&gt;북마클릿은 1990년대 후반에 등장했으며,
특히 브라우저에서 반복적인 작업을 자동화하거나 웹 페이지를 개인화하기 위한 도구로 널리 사용되었다.
그 후로 웹 개발자들과 사용자들 사이에서 인기를 끌게 되었다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// background를 노란색으로 변경
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;javascript&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.style.backgroundColor &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;yellow&amp;#34;&lt;/span&gt;;
})();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 3000ms(3초) 후에 이미지에 빨간 테두리 추가
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;javascript&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;async&lt;/span&gt; () =&amp;gt; {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sleep() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Promise&lt;/span&gt;((r) =&amp;gt; setTimeout(r, &lt;span style=&#34;color:#bd93f9&#34;&gt;3000&lt;/span&gt;));
  }
  &lt;span style=&#34;color:#ff79c6&#34;&gt;await&lt;/span&gt; sleep().then(() =&amp;gt; {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; images &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;img&amp;#34;&lt;/span&gt;);
    images.forEach((img) =&amp;gt; {
      img.style.border &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2px solid red&amp;#34;&lt;/span&gt;;
    });
  });
})();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 탭 복제
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;javascript&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.open(location));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// wayback machine에 현재 페이지 저장
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;javascript&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.open(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://web.archive.org/save/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.location.href));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;자바스크립트-스니펫&#34;&gt;자바스크립트 스니펫&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://goo.gle/devtools-snippets&#34;&gt;자바스크립트 스니펫 실행&lt;/a&gt; | Run snippets of JavaScript
&lt;ul&gt;
&lt;li&gt;공식 문서에서도 북마클릿의 대체재라고 언급하지만,
&amp;lsquo;딸깍&amp;rsquo; 클릭만 하면 되는 북마클릿이 더 편하다&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://developer.chrome.com/static/docs/devtools/javascript/snippets/image/the-devtools-documentatio-b98254f550319_856.png&#34; alt=&#34;Run snippets of JavaScript&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;개발자-도구-devtools&#34;&gt;개발자 도구 DevTools&lt;/h1&gt;
&lt;h2 id=&#34;chrome-62&#34;&gt;Chrome 62&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/blog/new-in-devtools-62?hl=ko#har-imports&#34;&gt;Network 패널에서 HAR 가져오기&lt;/a&gt; | HAR imports in the Network panel
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/docs/devtools/network/reference?hl=ko#export&#34;&gt;자세한 내용&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://developer.chrome.com/static/docs/devtools/network/reference/image/selecting-save-as-har-c-543367c2a7051_856.png&#34; alt=&#34;Save all network requests to a HAR file&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;chrome-65&#34;&gt;Chrome 65&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/blog/new-in-devtools-65?hl=ko#overrides&#34;&gt;로컬 재정의 (Local Overrides)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/docs/devtools/overrides?hl=ko&#34;&gt;더 자세한 내용&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://developer.chrome.com/static/blog/new-in-devtools-65/image/persisting-css-change-ac-3da090318c534.gif&#34; alt=&#34;Local Overrides&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;chrome-66&#34;&gt;Chrome 66&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/blog/new-in-devtools-66?hl=ko#overrides&#34;&gt;Override 파일을 저장할 폴더 지정&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;원본 소스에서 파일 수정 후 저장하면 해당 경로로 파일이 저장됨.&lt;/li&gt;
&lt;li&gt;이후 해당 페이지는 항상 Override된 파일을 참조하기 때문에 디버깅 후 해당 파일은 삭제함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://developer.chrome.com/static/blog/new-in-devtools-66/image/an-example-styles-define-a24be5796e36a_856.png&#34; alt=&#34;Local Overrides now works with some styles defined in HTML&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;chrome-126&#34;&gt;Chrome 126&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Console에 자바스크립트 코드를 붙여넣으면 발생하는 &lt;a href=&#34;https://developer.chrome.com/blog/self-xss&#34;&gt;self-XSS 경고&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/blog/new-in-devtools-126#self-xss-flag&#34;&gt;self-XSS 경고 비활성화&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;Warning&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
Don’t paste code into the DevTools Console that you don’t understand or haven’t reviewed yourself.
This could allow attackers to steal your identity or take control &lt;span style=&#34;color:#ff79c6&#34;&gt;of&lt;/span&gt; your computer.
Please type ‘allow pasting’ below and hit Enter to allow pasting.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;웹 브라우저에 따라 입력하는 것이 다르다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Google Chrome
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;allow pasting
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Microsoft Edge
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.profile()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;참조&#34;&gt;참조&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ChatGPT&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/docs/devtools/news?hl=ko&#34;&gt;DevTools의 새로운 기능&lt;/a&gt; | What&amp;rsquo;s New in DevTools&lt;/li&gt;
&lt;/ul&gt;
- https://markruler.github.io/posts/web/google-chrome/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>APM에서 엉뚱한 걸 찾았던 실수</title>
        <link>https://markruler.github.io/posts/web/apm-network-device-troubleshooting-mistakes/</link>
        <pubDate>Thu, 25 Jul 2024 01:22:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/web/apm-network-device-troubleshooting-mistakes/</guid>
        <description>임창수 블로그 https://markruler.github.io/posts/web/apm-network-device-troubleshooting-mistakes/ -&lt;p&gt;APM은 애플리케이션 성능 모니터링(Application Performance Monitoring)이다.
우리팀이 사용하는 모니터링 서비스 데이터독(Datadog)은 APM에서 많은 것을 확인할 수 있다.
(인프라, 로그, 호스트의 프로세스, JVM 런타임 메트릭, 각 리소스별 레이턴시 등등)&lt;/p&gt;
&lt;h1 id=&#34;문제&#34;&gt;문제&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/apm-network-device-troubleshooting-mistakes/first.png&#34; alt=&#34;First&#34;&gt;&lt;/p&gt;
&lt;p&gt;이용자에게 실제 체감이 될 정도로 레이턴시가 높아지고, 정각마다 스파이크 발생했다.
또한 서비스 전체에 영향이 있었다.&lt;/p&gt;
&lt;h1 id=&#34;분석-쉽게-간과했던-문제&#34;&gt;분석: 쉽게 간과했던 문제&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://markruler.github.io/posts/db/oracle-dbms-session-diagnosis/&#34;&gt;Oracle Session 히스토리&lt;/a&gt;를 남겨서 확인했을 때
DB에 부하를 일으키면서 반복적으로 보이는 느린 쿼리가 없었다.
DB 문제는 아니었다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/apm-network-device-troubleshooting-mistakes/oracle-session.webp&#34; alt=&#34;Oracle Session 히스토리&#34;&gt;&lt;/p&gt;
&lt;p&gt;발생 시점에 반영된 소스 코드를 보니까 Public IP로 요청하던 내부 API를 Private IP로 요청하도록 변경했다.
이 시점에는 이게 문제라고 생각하지 않았다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;Private IP로 요청하면 더 빠른 거 아냐?&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;모니터링 할 수 있는 모든 지표를 확인했지만, 레이턴시가 높아지는 시점에 아무런 이상이 없었다.
혹시 몰라서 라우터 장비에 SNMP 모니터링을 추가했다.
IDC 매니저와 확인해보니 Private IP 망에 연결된 라우터의 UDP 케이블 전송 속도가 예상 속도 1Gbps가 아닌 10Mbps가 나오고 있었다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/apm-network-device-troubleshooting-mistakes/network-router.webp&#34; alt=&#34;Network Router&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;해결&#34;&gt;해결&lt;/h1&gt;
&lt;p&gt;정말 간단하게&amp;hellip; 케이블을 교체해서 해결되었다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/apm-network-device-troubleshooting-mistakes/solved.png&#34; alt=&#34;Solved&#34;&gt;&lt;/p&gt;
&lt;p&gt;정각마다 발생하는 스파이크는 DB 백업 솔루션에서 정각마다 실행하는 프로그램이 있어서 발생한 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/apm-network-device-troubleshooting-mistakes/replace-udp-cable.webp&#34; alt=&#34;Replace UDP Cable&#34;&gt;&lt;/p&gt;
&lt;p&gt;순간의 오판으로 시간을 허비했다.
익숙한 것도 의심하고, 모니터링의 한계점을 파악할 필요가 있다고 느꼈다.&lt;/p&gt;
- https://markruler.github.io/posts/web/apm-network-device-troubleshooting-mistakes/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>네트워크 장비 모니터링을 위한 SNMP (Simple Network Management Protocol)</title>
        <link>https://markruler.github.io/posts/network/snmp/</link>
        <pubDate>Tue, 23 Jul 2024 19:08:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/network/snmp/</guid>
        <description>임창수 블로그 https://markruler.github.io/posts/network/snmp/ -&lt;h1 id=&#34;개요&#34;&gt;개요&lt;/h1&gt;
&lt;p&gt;주로 네트워크 장비의 Metric을 확인하는 모니터링 용도로 사용하지만, SNMP를 지원하는 컴퓨팅 머신이라면 모두 활용할 수 있다.&lt;/p&gt;
&lt;h1 id=&#34;전제-조건&#34;&gt;전제 조건&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;IP 네트워크 환경이 있다.&lt;/li&gt;
&lt;li&gt;관리용 서버(SNMP 서버)가 있다.&lt;/li&gt;
&lt;li&gt;SNMP 프로토콜을 지원하는 기기다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;구성-요소&#34;&gt;구성 요소&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;매니저 (SNMP 서버)
&lt;ul&gt;
&lt;li&gt;네트워크 감시 장치(서버)에 설치해서 사용하는 소프트웨어&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;에이전트 (네트워크 기기/서버)
&lt;ul&gt;
&lt;li&gt;네트워크 기기나 서버가 가진 기기의 상태 정보를 통보하는 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SNMP 프로토콜 (TCP/IP)
&lt;ul&gt;
&lt;li&gt;UDP 패킷에 실어서 주고받으며, 포트 번호는 161(SNMP), 162(TRAP)를 사용함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MIB (Management Information Base)
&lt;ul&gt;
&lt;li&gt;SNMP로 관리되는 네트워크 기기나 서버가 자신의 상태를 외부에 알리기 위해서 공개하는 관리 정보.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc1156&#34;&gt;RFC 1156&lt;/a&gt;으로 규정된 MIB1, &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc1213&#34;&gt;RFC 1213&lt;/a&gt;으로 규정된 MIB2&lt;/li&gt;
&lt;li&gt;MIB를 지원하는 기기에 일반적으로 포함된 표준 MIB와 기기 제조사마다 사양이 다른 사설(Private) MIB가 있다.&lt;/li&gt;
&lt;li&gt;MIB의 구조는 트리 구조이며, 트리 구조의 마디(노드)는 번호를 붙여서 나타낸다. 이 번호열을 OID(Object ID)라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;매니저-에이전트-역할&#34;&gt;매니저-에이전트 역할&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;정보의 요청과 응답
&lt;ul&gt;
&lt;li&gt;매니저가 에이전트에게 대상 기기의 정보를 요청 → 에이전트는 정보를 매니저에게 응답&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;설정의 요청과 응답
&lt;ul&gt;
&lt;li&gt;매니저가 에이전트에게 대상 기기의 설정 변경을 요청 → 에이전트는 설정을 변경하며 그 결과를 매니저에게 응답&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;상태 변화의 통보
&lt;ul&gt;
&lt;li&gt;에이전트가 매니저에게 대상 기기의 상태 변화를 통보&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;매니저-에이전트-통신-방식&#34;&gt;매니저-에이전트 통신 방식&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;폴링 (Polling)
&lt;ul&gt;
&lt;li&gt;매니저가 정기적으로 에이전트로부터 관리 정보를 추출&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;트랩 (Trap)
&lt;ul&gt;
&lt;li&gt;에이전트인 라우터나 스위치가 자신의 상태에 어떤 변화가 발생했을 때(장애 발생 등) 자발적으로 매니저인 SNMP 서버에게 정보를 통보&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;커뮤니티-이름&#34;&gt;커뮤니티 이름&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;매니저와 에이전트는 커뮤니티 이름으로 그룹화한다.&lt;/li&gt;
&lt;li&gt;매니저와 에이전트는 커뮤니티 이름이 같을 때만 통신한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;버전별-차이&#34;&gt;버전별 차이&lt;/h1&gt;
&lt;h2 id=&#34;v1&#34;&gt;v1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;커뮤니티 이름이 포함된 패킷을 평문으로 전달함.&lt;/li&gt;
&lt;li&gt;기본적인 관리 정보 베이스(MIB)와 트랩 메시지를 사용함.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;v2&#34;&gt;v2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;커뮤니티 이름이 포함된 패킷을 암호화해서 전달함.&lt;/li&gt;
&lt;li&gt;추가된 PDU 타입(예: &lt;a href=&#34;http://www.ktword.co.kr/test/view/view.php?m_temp1=5270&#34;&gt;GetBulkRequest&lt;/a&gt;)을 통해 대량의 데이터를 한 번에 전송할 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;v2c&#34;&gt;v2c&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;커뮤니티 값을 암호화하여 전달하는 것이 복잡해서 v1처럼 평문으로 전달하도록 원복함.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;v3&#34;&gt;v3&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;(username, password) 인증 기능이 추가됨.&lt;/li&gt;
&lt;li&gt;이 외 다양한 보안 기능 추가됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;관련-명령어-도구&#34;&gt;관련 명령어 도구&lt;/h1&gt;
&lt;h2 id=&#34;snmpget&#34;&gt;snmpget&lt;/h2&gt;
&lt;p&gt;정확한 OID를 입력해야 해서 난 잘 사용하지 않음.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;snmpget -v2c -l NoAuthNoPriv -c Auto_Wini3 61.111.18.165:161 1.3.6.1.2.1.1.1.0 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# output&lt;/span&gt;
iso.3.6.1.2.1.1.1.0 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; STRING: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Cisco IOS Software, C2960 Software (C2960-LANBASEK9-M), Version 12.2(58)SE2, RELEASE SOFTWARE (fc1)
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Technical Support: http://www.cisco.com/techsupport
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Copyright (c) 1986-2011 by Cisco Systems, Inc.
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Compiled Thu 21-Jul-11 02:13 by prod_rel_team&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;snmpwalk&#34;&gt;snmpwalk&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;snmpwalk -v2c -l NoAuthNoPriv -c public &amp;lt;ip_address&amp;gt;:&amp;lt;port&amp;gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;OID&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;도움말
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-h&lt;/code&gt; : help&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-H&lt;/code&gt; : 사용 가능한 옵션&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt; : SNMP 버전 (&lt;code&gt;1&lt;/code&gt; | &lt;code&gt;2c&lt;/code&gt; | &lt;code&gt;3&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt; : security level (&lt;code&gt;noAuthNoPriv&lt;/code&gt; | &lt;code&gt;authNoPriv&lt;/code&gt; | &lt;code&gt;authPriv&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-c&lt;/code&gt; : the community string&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;snmpwalk -v2c -l NoAuthNoPriv -c Auto_Wini3 61.111.18.165:161 1.3.6.1.2.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;mib-2-oid-object-id&#34;&gt;MIB-2 OID (Object ID)&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://media.licdn.com/dms/image/C5112AQEFj7XwbdMicQ/article-inline_image-shrink_400_744/0/1574511512079?e=1726704000&amp;amp;v=beta&amp;amp;t=C8IfB-cyl1xnT9KHPDPx_RwA4jrP918cEjGYjQkeDqY&#34; alt=&#34;OID Tree&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/snmp-explained-what-you-must-know-monitoring-via-mib-oids-kumari&#34;&gt;SNMP Explained: What You Must Know About Monitoring via MIB and OIDs&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;ex-136121-분해&#34;&gt;ex: 1.3.6.1.2.1 분해&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;첫번째 자리
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.alvestrand.no/objectid/1.html&#34;&gt;1: ISO assigned&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;두번째 자리
&lt;ul&gt;
&lt;li&gt;0: ISO Standard&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.alvestrand.no/objectid/1.3.html&#34;&gt;3: Identified Organization (org)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;세번째 자리
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.alvestrand.no/objectid/1.3.6.html&#34;&gt;6: US Department of Defense (dod)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;네번째 자리
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.alvestrand.no/objectid/1.3.6.1.html&#34;&gt;1: Internet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;다섯번째 자리
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.alvestrand.no/objectid/1.3.6.1.2.html&#34;&gt;2: Management (mgmt)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.alvestrand.no/objectid/1.3.6.1.4.html&#34;&gt;4: Private&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.alvestrand.no/objectid/1.3.6.1.4.1.9.html&#34;&gt;1.3.6.1.4.1.9: Cisco&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;여섯번째 자리
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.alvestrand.no/objectid/1.3.6.1.2.1.html&#34;&gt;1: SNMP MIB-2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1361211-system&#34;&gt;1.3.6.1.2.1.1 system&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;Object&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1.3.6.1.2.1.1.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;sysDescr&lt;/td&gt;
&lt;td&gt;System Description&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://oidref.com/1.3.6.1.2.1.1.1&#34;&gt;oidref&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1.3.6.1.2.1.1.2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;sysObjectID&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1.3.6.1.2.1.1.3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;sysUpTime&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1.3.6.1.2.1.1.4&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;sysContact&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1.3.6.1.2.1.1.5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;sysName&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://oidref.com/1.3.6.1.2.1.1.5&#34;&gt;oidref&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1.3.6.1.2.1.1.6&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;sysLocation&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1.3.6.1.2.1.1.7&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;sysServices&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://oidref.com/1.3.6.1.2.1.1.7&#34;&gt;oidref&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;1361212-interfaces&#34;&gt;1.3.6.1.2.1.2 interfaces&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;Object&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1.3.6.1.2.1.2.2.1.2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ifDescr&lt;/td&gt;
&lt;td&gt;Interface Description&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://oidref.com/1.3.6.1.2.1.2.2.1.2&#34;&gt;oidref&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1.3.6.1.2.1.2.2.1.4&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ifMtu&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://oidref.com/1.3.6.1.2.1.2.2.1.4&#34;&gt;oidref&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1.3.6.1.2.1.2.2.1.5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ifSpeed&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://oidref.com/1.3.6.1.2.1.2.2.1.5&#34;&gt;oidref&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1.3.6.1.2.1.2.2.1.10&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ifInOctets&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://oidref.com/1.3.6.1.2.1.2.2.1.10&#34;&gt;oidref&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;1361213-at---address-translation&#34;&gt;1.3.6.1.2.1.3 at - Address Translation&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;Object&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1.3.6.1.2.1.3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;at&lt;/td&gt;
&lt;td&gt;Address translation&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://oidref.com/1.3.6.1.2.1.3&#34;&gt;oidref&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;1361214-ip---internet-protocol&#34;&gt;1.3.6.1.2.1.4 ip - Internet Protocol&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;Object&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1.3.6.1.2.1.4.22&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ipNetToMediaTable&lt;/td&gt;
&lt;td&gt;SEQUENCE OF IpNetToMediaEntry&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://oidref.com/1.3.6.1.2.1.4.22&#34;&gt;oidref&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;13612131-ifmib&#34;&gt;1.3.6.1.2.1.31 ifMIB&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;Object&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1.3.6.1.2.1.31.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ifMIBObjects&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1.3.6.1.2.1.31.1.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ifXTable&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1.3.6.1.2.1.31.1.1.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ifXEntry&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1.3.6.1.2.1.31.1.1.1.6&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ifHCInOctets&lt;/td&gt;
&lt;td&gt;인터페이스의 입력 바이트 수&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cric.grenoble.cnrs.fr/Administrateurs/Outils/MIBS/?oid=1.3.6.1.2.1.31.1.1.1.6&#34;&gt;CNRS&lt;/a&gt;. 데이터독에선 &lt;a href=&#34;https://github.com/DataDog/integrations-core/blame/df2bc0d17af490491651d7578e67d9928941df62/snmp/datadog_checks/snmp/snmp.py#L505&#34;&gt;ifBandwidthInUsage&lt;/a&gt;라는 별칭을 씀.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1.3.6.1.2.1.31.1.1.1.10&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ifHCOutOctets&lt;/td&gt;
&lt;td&gt;인터페이스의 출력 바이트 수&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://cric.grenoble.cnrs.fr/Administrateurs/Outils/MIBS/?oid=1.3.6.1.2.1.31.1.1.1.10&#34;&gt;CNRS&lt;/a&gt;. 데이터독에선 &lt;a href=&#34;https://github.com/DataDog/integrations-core/blame/df2bc0d17af490491651d7578e67d9928941df62/snmp/datadog_checks/snmp/snmp.py#L506&#34;&gt;ifBandwidthOutUsage&lt;/a&gt;라는 별칭을 씀.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;참조&#34;&gt;참조&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ISBN=9791192469287&#34;&gt;&amp;lt;네트워크 운용 및 유지 보수의 모든 것&amp;gt;&lt;/a&gt; - 오카노 신&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws-hyoh.tistory.com/179&#34;&gt;SNMP 쉽게 이해하기 #1&lt;/a&gt; - 네트워크 엔지니어 환경&lt;/li&gt;
&lt;li&gt;OID
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cric.grenoble.cnrs.fr/Administrateurs/Outils/MIBS/?oid=1&#34;&gt;CNRS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.alvestrand.no/objectid/top.html&#34;&gt;Alvestrand Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.circitor.fr/Mibs/Html/C/CISCO-STACK-MIB.php&#34;&gt;CISCO-STACK-MIB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://oidref.com/1.3.6.1.2.1&#34;&gt;Reference record for OID 1.3.6.1.2.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://markruler.github.io/posts/network/snmp/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>🤫 SSH (Secure Shell)</title>
        <link>https://markruler.github.io/posts/network/ssh/</link>
        <pubDate>Wed, 17 Jul 2024 22:40:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/network/ssh/</guid>
        <description>임창수 블로그 https://markruler.github.io/posts/network/ssh/ -&lt;h1 id=&#34;ssh-server&#34;&gt;SSH Server&lt;/h1&gt;
&lt;p&gt;SSH 데몬 설정 파일은 &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;이다.&lt;/p&gt;
&lt;h2 id=&#34;authoized_keys&#34;&gt;authoized_keys&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;역할: SSH 서버가 접속을 허용할 클라이언트의 공개키를 저장하는 파일이다. (사용자 인증 방식)&lt;/li&gt;
&lt;li&gt;위치: 보통 사용자의 홈 디렉토리 아래의 &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;에 위치한다.&lt;/li&gt;
&lt;li&gt;내용: 클라이언트의 공개 키가 저장된다.
서버는 클라이언트의 접속 시도 시,
이 파일에 저장된 공개 키와 클라이언트가 제공한 키를 비교하여 인증을 수행한다.&lt;/li&gt;
&lt;li&gt;보안: 비밀번호 대신 공개 키를 사용하여 인증하기 때문에,
공개 키 인증 방식이 비밀번호 인증보다 더 안전하다.
특히, 비밀번호를 통한 무차별 대입 공격에 대한 저항력이 높다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SSH 데몬(sshd) 설치 혹은 실행 시 &lt;code&gt;/etc/ssh&lt;/code&gt; 디렉토리에 비대칭키 쌍이 생성 및 저장된다.
만약 설치 시 생성되지 않았다면, 맨 처음 실행할 때 생성된다.
&lt;code&gt;ssh-keygen&lt;/code&gt; 명령어를 사용해서 수동으로 생성 및 교체할 수도 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&amp;gt; ls /etc/ssh | grep &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ssh_host&amp;#34;&lt;/span&gt;
ssh_host_ecdsa_key
ssh_host_ecdsa_key.pub
ssh_host_ed25519_key
ssh_host_ed25519_key.pub
ssh_host_rsa_key
ssh_host_rsa_key.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;수동으로 교체하는 명령어는 다음과 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 새 키 생성&lt;/span&gt;
sudo ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key_new

&lt;span style=&#34;color:#6272a4&#34;&gt;# 새 키를 기존 키로 대체&lt;/span&gt;
sudo mv /etc/ssh/ssh_host_rsa_key /etc/ssh/ssh_host_rsa_key_old
sudo mv /etc/ssh/ssh_host_rsa_key_new /etc/ssh/ssh_host_rsa_key
sudo mv /etc/ssh/ssh_host_rsa_key.pub /etc/ssh/ssh_host_rsa_key_old.pub
sudo mv /etc/ssh/ssh_host_rsa_key_new.pub /etc/ssh/ssh_host_rsa_key.pub

&lt;span style=&#34;color:#6272a4&#34;&gt;# SSH 서버 재시작&lt;/span&gt;
sudo systemctl restart sshd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;주로-사용하는-server-설정&#34;&gt;주로 사용하는 Server 설정&lt;/h2&gt;
&lt;p&gt;설정 완료 후 데몬 재시작(&lt;code&gt;systemctl restart sshd&lt;/code&gt;)해야 적용된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;## /etc/ssh/sshd_config&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# This is the sshd server system-wide configuration file.  See&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# sshd_config(5) for more information.&lt;/span&gt;

&lt;span style=&#34;color:#6272a4&#34;&gt;# SSH 서버가 Listen할 포트 지정&lt;/span&gt;
Port &lt;span style=&#34;color:#bd93f9&#34;&gt;22&lt;/span&gt;

&lt;span style=&#34;color:#6272a4&#34;&gt;# 서버의 호스트 키 파일 경로를 지정&lt;/span&gt;
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

&lt;span style=&#34;color:#6272a4&#34;&gt;# 루트 로그인 허용 여부&lt;/span&gt;
PermitRootLogin no &lt;span style=&#34;color:#6272a4&#34;&gt;# yes, prohibit-password&lt;/span&gt;

&lt;span style=&#34;color:#6272a4&#34;&gt;# 비밀번호 인증 허용 여부&lt;/span&gt;
PasswordAuthentication no &lt;span style=&#34;color:#6272a4&#34;&gt;# yes&lt;/span&gt;

&lt;span style=&#34;color:#6272a4&#34;&gt;# 공개키 인증 허용 여부&lt;/span&gt;
PubkeyAuthentication yes &lt;span style=&#34;color:#6272a4&#34;&gt;# no&lt;/span&gt;

&lt;span style=&#34;color:#6272a4&#34;&gt;# 허용할 사용자 및 그룹&lt;/span&gt;
AllowUsers user1 user2
AllowGroups sshusers

&lt;span style=&#34;color:#6272a4&#34;&gt;# 거부할 사용자 및 그룹&lt;/span&gt;
DenyUsers user3 user4
DenyGroups nogroup

&lt;span style=&#34;color:#6272a4&#34;&gt;# 비밀번호 인증 시도 횟수 제한&lt;/span&gt;
MaxAuthTries &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# default 6&lt;/span&gt;

&lt;span style=&#34;color:#6272a4&#34;&gt;# 비밀번호 인증 시도 간격&lt;/span&gt;
LoginGraceTime &lt;span style=&#34;color:#bd93f9&#34;&gt;120&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# seconds == 2m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;/etc/hosts.allow&lt;/code&gt; 파일에 허용할 IP를 설정할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 모든 호스트 허용&lt;/span&gt;
sshd: ALL
&lt;span style=&#34;color:#6272a4&#34;&gt;# 하나의 IP를 허용할 경우&lt;/span&gt;
sshd: 192.168.1.33
&lt;span style=&#34;color:#6272a4&#34;&gt;# IP 대역으로 허용할 경우&lt;/span&gt;
sshd: 192.168.1.0/24
&lt;span style=&#34;color:#6272a4&#34;&gt;# 특정 도메인을 허용할 경우&lt;/span&gt;
sshd: .example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;ssh-client&#34;&gt;SSH Client&lt;/h1&gt;
&lt;p&gt;system-wide 설정 파일은 &lt;code&gt;/etc/ssh/ssh_config&lt;/code&gt;이다.&lt;/p&gt;
&lt;h2 id=&#34;설정-파일-우선-순위&#34;&gt;설정 파일 우선 순위&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;명령줄 옵션: 가장 우선한다.&lt;/li&gt;
&lt;li&gt;환경 변수&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$HOME/.ssh/config&lt;/code&gt;: 사용자별 설정 파일&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/ssh/ssh_config&lt;/code&gt;: 전역 설정 파일&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;known_hosts&#34;&gt;known_hosts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;역할: SSH 클라이언트가 접속하려는 서버의 HostKey(공개키)를 저장하는 파일이다. (서버 인증 방식)&lt;/li&gt;
&lt;li&gt;위치: 보통 사용자의 홈 디렉토리 아래의 &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt;에 위치한다.&lt;/li&gt;
&lt;li&gt;내용: 서버의 호스트 키 정보가 저장된다.
클라이언트가 처음 특정 서버에 접속할 때,
서버의 호스트 키를 확인하고 &lt;code&gt;known_hosts&lt;/code&gt; 파일에 저장한다.
이후 동일 서버에 접속할 때는 이 파일을 참조하여 서버의 신원을 확인한다.&lt;/li&gt;
&lt;li&gt;보안: 서버의 호스트 키가 변경되면 SSH 클라이언트는 보안 경고를 출력하고 접속을 차단한다.
이는 중간자 공격(MITM, Man-in-the-Middle Attack)을 방지하기 위한 메커니즘이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;주로-사용하는-host-설정&#34;&gt;주로 사용하는 Host 설정&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# $HOME/.ssh/config&lt;/span&gt;
Host my-host
  User markruler
  HostName 111.222.111.222
  IdentityFile ~/.ssh/my-key.pem
  IdentitiesOnly yes
  LogLevel VERBOSE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;remote host의 SSH 데몬이 최신 키를 지원하지 않는 오래된 버전인 경우&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Host old-host
  HostName 111.222.111.222
  User markruler
  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;HostKeyAlgorithms&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; +ssh-rsa,ssh-dss
  LogLevel VERBOSE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.ibm.com/docs/hp-virtual-servers?topic=hp-virtual-servers-generate_ssh&#34;&gt;HostKeyAlgorithms&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;ssh-ed25519&lt;/li&gt;
&lt;li&gt;ssh-rsa&lt;/li&gt;
&lt;li&gt;ssh-dss&lt;/li&gt;
&lt;li&gt;ecdsa-sha2-nistp256&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git&#34;&gt;Git&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 회사 계정과 분리하고 싶을 경우&lt;/span&gt;
Host work.github.com
  HostName github.com
  IdentityFile ~/.ssh/github_work_ed25519
  User git

Host github.com
  IdentityFile ~/.ssh/github_ed25519
  User git

Host bitbucket.org
  IdentityFile ~/.ssh/bitbucket_ed25519
  User git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위에서 Github 주소를 회사 repository와 구분해서 관리할 경우 remote repository 주소도 변경해야 한다.
새로 clone 받는 경우에는 clone 받을 때 주소만 변경해주면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git clone git@work.github.com:xpdojo/kubernetes.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# .git/config&lt;/span&gt;
[remote &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;origin&amp;#34;&lt;/span&gt;]
  url = git@work.github.com:xpdojo/kubernetes.git
  fetch = +refs/heads/*:refs/remotes/origin/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;local-forward&#34;&gt;Local Forward&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Bastion Host를 두고 Local Forwarding이 필요한 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Host tost
  User markruler
  HostName ec2-111.222.111.222.ap-northeast-2.compute.amazonaws.com
  LocalForward localhost:14000 something.abcd.ap-northeast-2.rds.amazonaws.com:1521
  IdentityFile ~/.ssh/my-rds-key.pem
  LogLevel VERBOSE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -f -N tost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;커넥션을 끊어야 할 경우 PID을 직접 죽인다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ps -ef | grep tost
&lt;span style=&#34;color:#6272a4&#34;&gt;# markrul+   38624    4372  0 08:37 ?        00:00:00 ssh -f -N tost&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;kill&lt;/span&gt; -TERM &lt;span style=&#34;color:#bd93f9&#34;&gt;38624&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;위 설정과 동일한 명령어&lt;/strong&gt;는 다음과 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh -vv -f -N &lt;span style=&#34;color:#f1fa8c&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;  -i &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;~/.ssh/my-rds-key.pem&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;  -L 14000:something.abcd.ap-northeast-2.rds.amazonaws.com:1521 &lt;span style=&#34;color:#f1fa8c&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;  ec2-111.222.111.222.ap-northeast-2.compute.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;참조&#34;&gt;참조&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ChatGPT&lt;/li&gt;
&lt;li&gt;Client
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ssh.com/academy/ssh/config&#34;&gt;SSH config file for OpenSSH client&lt;/a&gt; - SSH Academy&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linux.die.net/man/5/ssh_config&#34;&gt;ssh_config(5)&lt;/a&gt; - Linux man page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://linux.die.net/man/5/sshd_config&#34;&gt;sshd_config(5)&lt;/a&gt; - Linux man page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://markruler.github.io/posts/network/ssh/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>🕸️ 서버 to 서버 요청 시 발생한 DNS 레이턴시</title>
        <link>https://markruler.github.io/posts/network/server-to-server-dns/</link>
        <pubDate>Thu, 13 Jun 2024 17:40:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/network/server-to-server-dns/</guid>
        <description>임창수 블로그 https://markruler.github.io/posts/network/server-to-server-dns/ -&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%EB%B0%B0%EA%B2%BD&#34;&gt;배경&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EB%B6%84%EC%84%9D-dig-%EC%9C%BC%EB%A1%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8&#34;&gt;분석: dig 으로 테스트&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#nameserver-8888-%EB%A1%9C-%EC%A7%80%EC%A0%95&#34;&gt;nameserver 8.8.8.8 로 지정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nameserver%EB%8A%94-resolvconf-%EC%84%A4%EC%A0%95%EC%9D%84-%EB%94%B0%EB%A6%84&#34;&gt;nameserver는 &lt;code&gt;resolv.conf&lt;/code&gt; 설정을 따름&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EB%B9%84%EA%B5%90&#34;&gt;비교&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%ED%95%B4%EA%B2%B0-%ED%98%B8%EC%8A%A4%ED%8A%B8-%ED%8C%8C%EC%9D%BC-%EC%88%98%EC%A0%95&#34;&gt;해결: 호스트 파일 수정&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;배경&#34;&gt;배경&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;약 200ms 응답 속도가 예상되는 API가 불규칙적으로 2s까지 스파이크가 발생함.
&lt;ul&gt;
&lt;li&gt;해당 API에는 서버 to 서버로 요청하는 기능이 여러 개 포함되어 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;환경: On-Premise(IDC) 환경에 애플리케이션 서버는 컨테이너가 아닌 스탠드얼론 호스트로 실행됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;분석-dig-으로-테스트&#34;&gt;분석: dig 으로 테스트&lt;/h1&gt;
&lt;h2 id=&#34;nameserver-8888-로-지정&#34;&gt;nameserver 8.8.8.8 로 지정&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;dig @8.8.8.8 api.example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;첫번째 요청 292 msec&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;;; Query time: &lt;span style=&#34;color:#bd93f9&#34;&gt;292&lt;/span&gt; msec
;; SERVER: 8.8.8.8#53&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;8.8.8.8&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;UDP&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
;; WHEN: Tue Jun &lt;span style=&#34;color:#bd93f9&#34;&gt;11&lt;/span&gt; 11:00:54 KST &lt;span style=&#34;color:#bd93f9&#34;&gt;2024&lt;/span&gt;
;; MSG SIZE  rcvd: &lt;span style=&#34;color:#bd93f9&#34;&gt;154&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2번째 요청 36 msec&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;;; Query time: &lt;span style=&#34;color:#bd93f9&#34;&gt;36&lt;/span&gt; msec
;; SERVER: 8.8.8.8#53&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;8.8.8.8&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;UDP&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
;; WHEN: Tue Jun &lt;span style=&#34;color:#bd93f9&#34;&gt;11&lt;/span&gt; 11:00:57 KST &lt;span style=&#34;color:#bd93f9&#34;&gt;2024&lt;/span&gt;
;; MSG SIZE  rcvd: &lt;span style=&#34;color:#bd93f9&#34;&gt;154&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;nameserver는-resolvconf-설정을-따름&#34;&gt;nameserver는 &lt;code&gt;resolv.conf&lt;/code&gt; 설정을 따름&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# /etc/resolv.conf&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# LG 메인 네임 서버&lt;/span&gt;
nameserver 164.124.101.2
&lt;span style=&#34;color:#6272a4&#34;&gt;# LG 보조 네임 서버&lt;/span&gt;
nameserver 203.248.252.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;dig api.example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;첫번째 시도&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;;; Query time: &lt;span style=&#34;color:#bd93f9&#34;&gt;17&lt;/span&gt; msec
;; SERVER: 164.124.101.2#53&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;164.124.101.2&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
;; WHEN: 화  6월 &lt;span style=&#34;color:#bd93f9&#34;&gt;11&lt;/span&gt; 17:14:45 KST &lt;span style=&#34;color:#bd93f9&#34;&gt;2024&lt;/span&gt;
;; MSG SIZE  rcvd: &lt;span style=&#34;color:#bd93f9&#34;&gt;154&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;두번째 시도: 간헐적으로 튀는 걸 확인할 수 있었음.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;;; Query time: &lt;span style=&#34;color:#bd93f9&#34;&gt;230&lt;/span&gt; msec
;; SERVER: 164.124.101.2#53&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;164.124.101.2&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
;; WHEN: 화  6월 &lt;span style=&#34;color:#bd93f9&#34;&gt;11&lt;/span&gt; 17:25:41 KST &lt;span style=&#34;color:#bd93f9&#34;&gt;2024&lt;/span&gt;
;; MSG SIZE  rcvd: &lt;span style=&#34;color:#bd93f9&#34;&gt;154&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;비교&#34;&gt;비교&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;LG DNS&lt;/code&gt;는 캐시가 되는 것 같은데 200~300 msec 응답 속도가 불규칙적으로 자주 발생함.
(현재 서버가 위치한 IDC 회선이 LG라서 LG DNS 사용)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;watch -n &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;dig @164.124.101.2 api.example.com | grep \&amp;#34;Query time\&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 3 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 227 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 5 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 5 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 4 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 5 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 7 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 228 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 4 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 14 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 3 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 5 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 3 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 10 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;8.8.8.8&lt;/code&gt; 은 더 심함.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;watch -n &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;dig @8.8.8.8 api.example.com | grep \&amp;#34;Query time\&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 303 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 121 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 342 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 49 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 239 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 305 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 49 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 239 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 129 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 120 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 50 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 39 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 162 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 48 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 37 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 37 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 277 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 173 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 50 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ;; Query time: 334 msec&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;해결-호스트-파일-수정&#34;&gt;해결: 호스트 파일 수정&lt;/h1&gt;
&lt;p&gt;server -&amp;gt; L4 Switch -&amp;gt; server는 프록시 없이 설정할 수 없다고 함.
실제로 호스트 파일(&lt;code&gt;/etc/hosts&lt;/code&gt;)에 아래와 같이 설정하면 Connection도 얻지 못하고 타임아웃 발생함.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# &amp;lt;L4_IP_ADDRESS&amp;gt; api.example.com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;아래와 같이 설정해서 각 노드에 있는 web server에서 서버 A, B로 로드 밸런싱 되도록 설정함.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;127.0.0.1 api.example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/network/image-20240611-080044.webp&#34; alt=&#34;Datadog Timeseries&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;처음에 서버 A(빨간색) 먼저 수정 후 응답 속도가 줄어든 것을 확인함.&lt;/li&gt;
&lt;li&gt;이후 서버 B(초록색)도 수정 후 응답 속도 줄어듦.&lt;/li&gt;
&lt;/ul&gt;
- https://markruler.github.io/posts/network/server-to-server-dns/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>Playwright를 사용해서 HTML 페이지를 PDF로 만들기</title>
        <link>https://markruler.github.io/posts/pdf/html-to-pdf/</link>
        <pubDate>Tue, 12 Dec 2023 22:02:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/pdf/html-to-pdf/</guid>
        <description>임창수 블로그 https://markruler.github.io/posts/pdf/html-to-pdf/ -&lt;h1 id=&#34;개요&#34;&gt;개요&lt;/h1&gt;
&lt;p&gt;팀내에서 문서 생성 도구로 &lt;a href=&#34;https://pdfmyurl.com/html-to-pdf-api&#34;&gt;PDFmyURL&lt;/a&gt;과
&lt;a href=&#34;https://www.forcs.com/kr/oz-e-form/&#34;&gt;OZ e-Form&lt;/a&gt;을 사용하고 있다.
보통 이런 외부 솔루션은 테스트 할 때 매우 불편하다.&lt;/p&gt;
&lt;p&gt;PDFmyURL은 PDF를 생성하는 2가지 인터페이스가 있다.
하나는 URL을 통해 페이지를 읽어서 PDF를 생성하는 인터페이스고,
하나는 raw HTML, CSS를 직접 전달해서 PDF를 생성하는 인터페이스다.
URL 방식은 PDFmyURL 측 서버(서비스 외부)에서 페이지를 조회할 수 있어야 한다.
그래서 private 환경에서는 테스트 할 수가 없다.
그래서 해당 기능들은 운영 환경에서 QA 테스트를 해야 하는 불상사가 생긴다.
더 큰 문제는 데이터를 Public 환경에 노출해야 하기 때문에
데이터에 따라 개인 정보 유출 문제가 될 수 있다.&lt;/p&gt;
&lt;p&gt;OZ e-Form의 클라이언트 프로그램(OZ e-Form Designer)은 Windows만 지원한다.
그리고 OZ 에이전트와 script를 적극적으로 관리할 인력이 없다.
해당 기술은 활용도가 떨어지기 때문에 관심이 적을 수 밖에 없기 때문이다.&lt;/p&gt;
&lt;p&gt;그러다가 누군가의 실수로 PDFmyURL 서버에 동시에 수많은 요청을 보내게 되었다.
그러자 PDFmyURL은 우리를 차단해버렸다.
문의를 남겨도 해외 서비스라 그런지 대응이 느렸고,
PDFmyURL을 이용하는 서비스가 반나절동안 중단되었다.
언제 해결될지 기약이 없었다.
결국 다른 계정으로 라이센스를 추가 발급받아 해결했다.&lt;/p&gt;
&lt;p&gt;내부에서 관리 가능한 HTML to PDF 변환 도구가 간절하다고 느낀 시기였다.&lt;/p&gt;
&lt;h1 id=&#34;1차-시도-wkhtmltopdf&#34;&gt;1차 시도: wkhtmltopdf&lt;/h1&gt;
&lt;p&gt;이런 프로그램을 제작해 본 경험자가 없어서 막연히 ChatGPT에게 물어봤다.
가장 먼저 답변해준 방법은 &lt;a href=&#34;https://wkhtmltopdf.org/&#34;&gt;wkhtmltopdf&lt;/a&gt; 였다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 해당 도구는 한글을 출력하기 위해 한글 폰트를 별도 설치해야 했다.&lt;/span&gt;
apt-get -y install fonts-nanum wkhtmltopdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;빠르게 시작하기 위해 Python의 &lt;code&gt;pdfkit&lt;/code&gt;과
오픈 소스 PDF 변환 툴인 &lt;code&gt;wkhtmltopdf&lt;/code&gt;를 사용해서 Flask 앱을 만들었다.
하지만 기존 출력물(크롬에서 &lt;a href=&#34;https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#printing&#34;&gt;window.print()&lt;/a&gt;)과
달리 PDF 출력물을 보면 CSS가 틀어지는 부분이 너무 많았다.&lt;/p&gt;
&lt;p&gt;리뷰하는 과정에서 확인해보니 문서를 읽지 않은 내 잘못이었다.
해당 홈페이지 첫 문장부터 &lt;code&gt;Qt WebKit rendering engine&lt;/code&gt; 이라고 설명한다.
&lt;code&gt;wk&lt;/code&gt;는 WebKit의 약자였고, Qt WebKit을 기반으로 변환하다보니
Chromium 기반으로 작성되어 있는 HTML이 그대로 보일 리 없었다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Comparison_of_browser_engines&#34;&gt;Comparison of browser engines&lt;/a&gt;&lt;/strong&gt; - Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;2차-시도-pyppeteer&#34;&gt;2차 시도: pyppeteer&lt;/h1&gt;
&lt;p&gt;기존에 Python으로 작성된 코드를 재사용하려고 Javascript 기반의 &lt;a href=&#34;https://github.com/puppeteer/puppeteer&#34;&gt;puppeteer&lt;/a&gt;
대신 python 기반의 &lt;a href=&#34;https://github.com/pyppeteer/pyppeteer&#34;&gt;pyppeteer&lt;/a&gt;을 사용했다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# Ubuntu 22.04에서 google-chrome 명령어 설치&lt;/span&gt;
apt-get update &lt;span style=&#34;color:#f1fa8c&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y wget gnupg &lt;span style=&#34;color:#f1fa8c&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/googlechrome-linux-keyring.gpg &lt;span style=&#34;color:#f1fa8c&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sh -c &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;echo &amp;#34;deb [arch=amd64 signed-by=/usr/share/keyrings/googlechrome-linux-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main&amp;#34; &amp;gt;&amp;gt; /etc/apt/sources.list.d/google.list&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get update &lt;span style=&#34;color:#f1fa8c&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y google-chrome-stable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-khmeros fonts-kacst fonts-freefont-ttf libxss1 &lt;span style=&#34;color:#f1fa8c&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;      --no-install-recommends &lt;span style=&#34;color:#f1fa8c&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf /var/lib/apt/lists/* &lt;span style=&#34;color:#f1fa8c&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; groupadd -r pptruser &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; useradd -rm -g pptruser -G audio,video pptruser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;google-chrome&lt;/code&gt;을 headless 모드로 실행해서 프린트하면
출력물이 브라우저 프린트(&lt;code&gt;window.print()&lt;/code&gt;)와 동일하게 나왔다.
(팀원 모두 Edge 아니면 Chrome을 사용함)
또한 private 환경에서도 출력할 수 있게 되었다.&lt;/p&gt;
&lt;h2 id=&#34;windowprint로-출력&#34;&gt;window.print()로 출력&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/pdf/htmltopdf/window.print.webp&#34; alt=&#34;window.print() - google.com&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;pyppeteer로-출력&#34;&gt;Pyppeteer로 출력&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/pdf/htmltopdf/pyppeteer.print.webp&#34; alt=&#34;pyppeteer - google.com&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;3차-시도-microsoftplaywright&#34;&gt;3차 시도: microsoft/playwright&lt;/h1&gt;
&lt;p&gt;URL이 아닌 Raw HTML, Raw CSS를 전달해서 PDF를 출력하는 기능도 지원되어야 했다.
p&lt;strong&gt;y&lt;/strong&gt;ppeteer에선 HTML Content를 렌더링 할 때 Load 되는 것을 기다리지 않아서
이미지 렌더링(img src, background url 등)이 되지 않았다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setContent()&lt;/code&gt; 시 &lt;code&gt;waitUntil&lt;/code&gt; 옵션을 p&lt;strong&gt;u&lt;/strong&gt;ppeteer만 지원하고 있다.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/puppeteer/puppeteer/issues/907#issuecomment-472334126&#34;&gt;page.setContent(html, {waitUntil: &amp;lsquo;networkidle&amp;rsquo;}); · Issue #907 · puppeteer/puppeteer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/miyakogi/pyppeteer/issues/211&#34;&gt;setContent extra options · Issue #211 · miyakogi/pyppeteer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;반면 &lt;a href=&#34;https://github.com/microsoft/playwright-python&#34;&gt;Microsoft의 playwright&lt;/a&gt;는 해당 기능들을
모두 지원하면서, Javascript는 물론 Python도 지원했다.
결국 Content로 PDF를 출력하는 기능도 지원하기 위해 playwright로 변경했다.
&lt;a href=&#34;https://playwright.dev/docs/puppeteer&#34;&gt;puppeteer와 인터페이스를 유사하게 만들었기&lt;/a&gt;
때문에 변경하는 데에 많은 리소스가 들지 않았다.&lt;/p&gt;
&lt;p&gt;다음은 간단한 Raw Content를 PDF로 출력하는 토막 코드다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# python3 -m pip install playwright&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# python3 -m playwright install chromium  # Download to $HOME/.cache/ms-playwright/&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# python3 main.py&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; logging
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; asyncio

&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; playwright.async_api &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; async_playwright, Playwright, PlaywrightContextManager, Browser, BrowserContext

&lt;span style=&#34;color:#ff79c6&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;core_file&lt;/span&gt;():
    playwright_context_manager: PlaywrightContextManager &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; async_playwright()

    &lt;span style=&#34;color:#6272a4&#34;&gt;# https://playwright.dev/python/docs/api/class-playwright&lt;/span&gt;
    playwright: Playwright &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;await&lt;/span&gt; playwright_context_manager&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;start()

    &lt;span style=&#34;color:#6272a4&#34;&gt;# https://playwright.dev/python/docs/api/class-browsertype#browser-type-launch&lt;/span&gt;
    browser: Browser &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;await&lt;/span&gt; playwright&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;chromium&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;launch(
        headless&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;,
        timeout&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;10_000&lt;/span&gt;,  &lt;span style=&#34;color:#6272a4&#34;&gt;# (ms)&lt;/span&gt;
        args&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;[
            &lt;span style=&#34;color:#6272a4&#34;&gt;# https://peter.sh/experiments/chromium-command-line-switches/&lt;/span&gt;
            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;--no-sandbox&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;--single-process&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;--disable-dev-shm-usage&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;--disable-gpu&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;--no-zygote&amp;#34;&lt;/span&gt;,
        ],
        &lt;span style=&#34;color:#6272a4&#34;&gt;# avoid &amp;#34;signal only works in main thread of the main interpreter&amp;#34;&lt;/span&gt;
        handle_sigint&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;,
        handle_sigterm&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;,
        handle_sighup&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;,
    )

    &lt;span style=&#34;color:#6272a4&#34;&gt;# https://playwright.dev/python/docs/api/class-browser#browser-new-context&lt;/span&gt;
    logging&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;debug(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;new_context:new_page&amp;#39;&lt;/span&gt;)
    context: BrowserContext &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;await&lt;/span&gt; browser&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;new_context()
    page &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;await&lt;/span&gt; context&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;new_page()

    &lt;span style=&#34;color:#6272a4&#34;&gt;# https://playwright.dev/python/docs/api/class-page#page-goto&lt;/span&gt;
    logging&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;debug(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;set_content&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#ff79c6&#34;&gt;await&lt;/span&gt; page&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;set_content(
        html&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;div&amp;gt;&amp;lt;span&amp;gt;Test&amp;lt;/span&amp;gt; Text&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;,
        timeout&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;10_000&lt;/span&gt;,
        &lt;span style=&#34;color:#6272a4&#34;&gt;# load로 해야 img.src가 로드됨.&lt;/span&gt;
        wait_until&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;load&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;# domcontentloaded, load, networkidle&lt;/span&gt;
    )

    logging&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;add_style_tag&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#ff79c6&#34;&gt;await&lt;/span&gt; page&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add_style_tag(
        content&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;span{color:red;}&amp;#39;&lt;/span&gt;
    )

    &lt;span style=&#34;color:#6272a4&#34;&gt;# https://playwright.dev/python/docs/api/class-page#page-pdf&lt;/span&gt;
    logging&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;debug(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Generate PDF&amp;#39;&lt;/span&gt;)
    _pdf &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;await&lt;/span&gt; page&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;pdf(
        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;A4&amp;#39;&lt;/span&gt;,
        landscape&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;,
        print_background&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;,
        display_header_footer&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;,
        margin&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;{
            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;top&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;10mm&amp;#39;&lt;/span&gt;,
            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;bottom&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;10mm&amp;#39;&lt;/span&gt;,
            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;left&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;10mm&amp;#39;&lt;/span&gt;,
            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;right&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;10mm&amp;#39;&lt;/span&gt;,
        }
    )

    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(_pdf)

    &lt;span style=&#34;color:#ff79c6&#34;&gt;await&lt;/span&gt; context&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;close()  &lt;span style=&#34;color:#6272a4&#34;&gt;# don&amp;#39;t forget to close the context, or it will create a core.{number} file.&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;await&lt;/span&gt; browser&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;close()
    &lt;span style=&#34;color:#ff79c6&#34;&gt;await&lt;/span&gt; playwright&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;stop()


&lt;span style=&#34;color:#6272a4&#34;&gt;# python3 main.py&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    asyncio&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;run(core_file())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;구현-시-참고-사항&#34;&gt;구현 시 참고 사항&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;CSS attribute 중 &lt;code&gt;page-break-***&lt;/code&gt; 를 사용하면 페이지를 원하는 부분에서 분리할 수 있다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;page-break-after: always;&lt;/code&gt; 해당 Element 이후에 내용이 있더라도 페이지를 분리한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;page-break-after: avoid;&lt;/code&gt; 해당 Element 이후에 페이지는 분리하지 않는다. 이후 내용이 페이지를 넘친다면 페이지 분리되긴 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PDF 생성 후 응답되기까지 PDFmyURL만큼 걸린다.
&lt;ul&gt;
&lt;li&gt;약 2~5초 (평균 약 4초)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server to Server로 요청 시 Spring Boot에서 FeignClient로
&lt;a href=&#34;https://wildeveloperetrain.tistory.com/304&#34;&gt;x-www-form-urlencoded&lt;/a&gt;
데이터를 보내려면 &lt;code&gt;MultiValueMap&amp;lt;String, String&amp;gt;&lt;/code&gt;을 사용해야 한다.&lt;/li&gt;
&lt;li&gt;OZ report는 별도의 스크립트와 프로그램을 사용하고 있기 때문에 옮기는 데에 비용이 꽤 들어서 아직 못 하고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;참조&#34;&gt;참조&lt;/h1&gt;
&lt;h2 id=&#34;playwright&#34;&gt;&lt;strong&gt;Playwright&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://playwright.dev/python/&#34;&gt;공식 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/playwright-python&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devocean.sk.com/blog/techBoardDetail.do?ID=165090&#34;&gt;웹 테스트 자동화&lt;/a&gt;가 목적인 라이브러리임.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;webkit&#34;&gt;&lt;strong&gt;WebKit&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wkhtmltopdf.org/&#34;&gt;wkhtmltopdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chromium&#34;&gt;&lt;strong&gt;Chromium&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/articles/new-headless/&#34;&gt;Chrome’s Headless mode gets an upgrade: introducing &amp;ndash;headless=new | Chromium | Chrome for Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://markruler.github.io/posts/pdf/html-to-pdf/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>오라클 DBMS SE2 세션 사후 진단</title>
        <link>https://markruler.github.io/posts/db/oracle-dbms-session-diagnosis/</link>
        <pubDate>Sun, 30 Apr 2023 23:58:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/db/oracle-dbms-session-diagnosis/</guid>
        <description>임창수 블로그 https://markruler.github.io/posts/db/oracle-dbms-session-diagnosis/ -&lt;h1 id=&#34;개요&#34;&gt;개요&lt;/h1&gt;
&lt;p&gt;현재 팀에서 구독 중인 Oracle DBMS의 라이센스는 Standard Edition 2의 Processor 라이센스(이하 SE2)다.
이 라이센스는 &lt;a href=&#34;https://www.cubrid.com/blog/3813513&#34;&gt;프로세서 최대 2개, CPU Threads 최대 16개&lt;/a&gt;까지 사용 가능하다.
만약 트래픽이 많지 않다면 이 정도 사양으로도 충분하겠지만,
트래픽이 많아지거나 DB를 비효율적으로 사용하게 되면 성능 저하가 발생할 수 있다.
&lt;strong&gt;하지만 우리는 성능 저하가 발생했을 때 이를 진단할 방법이 없었다.&lt;/strong&gt;
SE2의 경우 AWR(Automatic Workload Repository), ASH(Active Session History)와 같은
&lt;a href=&#34;https://docs.oracle.com/en/database/oracle/oracle-database/19/dblic/Licensing-Information.html#GUID-68A4128C-4F52-4441-8BC0-A66F5B3EEC35&#34;&gt;Oracle Diagnostics Pack&lt;/a&gt;을
사용할 수 없다.&lt;/p&gt;
&lt;h1 id=&#34;db-진단-도구가-필요하다&#34;&gt;DB 진단 도구가 필요하다&lt;/h1&gt;
&lt;p&gt;연산이 오래 걸리는 쿼리의 경우 SQL을 튜닝해서 해결했다.
검색 기능의 경우 Elasticsearch에 데이터를 연동해서 Inverted index로 성능을 향상시켰다.&lt;/p&gt;
&lt;p&gt;하지만 어떤 경우에는 성능 저하가 발생했을 때 관련 애플리케이션 전체가 도미노처럼 쓰러졌다.
Oracle DBMS의 세션 정보는 실시간으로만 조회할 수 있었기 때문에 지나간 정보를 확인할 수 없었다.
이를 해결하기 위해 세션 정보를 수집하는 스크립트를 작성하고, 시각화할 필요가 있었다.&lt;/p&gt;
&lt;p&gt;Oracle DBMS의 현재 세션 정보들을 확인할 수 있는 동적 성능 뷰(&lt;a href=&#34;https://docs.oracle.com/en/database/oracle/oracle-database/19/refrn/V-SESSION.html&#34;&gt;V$SESSION&lt;/a&gt;)에서
세션 정보를 수집하기 위해 사용한 SQL은 다음과 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; sess.sid,
             sess.&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;serial&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#&lt;/span&gt;,
             ROUND(sess.wait_time_micro &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;)            wait_time_millis,
             ROUND(sess.time_since_last_wait_micro &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;) time_since_last_wait_millis,
             &lt;span style=&#34;color:#ff79c6&#34;&gt;CASE&lt;/span&gt;
                 &lt;span style=&#34;color:#ff79c6&#34;&gt;WHEN&lt;/span&gt; sess.status &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;ACTIVE&amp;#39;&lt;/span&gt;
                     &lt;span style=&#34;color:#ff79c6&#34;&gt;THEN&lt;/span&gt; sess.last_call_et
                 &lt;span style=&#34;color:#ff79c6&#34;&gt;ELSE&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
                 &lt;span style=&#34;color:#ff79c6&#34;&gt;END&lt;/span&gt;                                          active_elapsed_time_secs,
             sess.&lt;span style=&#34;color:#ff79c6&#34;&gt;state&lt;/span&gt;,
             sess.event,
             sess.username,
             sess.osuser,
             sess.machine,
             sess.program,
             sess.&lt;span style=&#34;color:#ff79c6&#34;&gt;type&lt;/span&gt;,
             sess.sql_child_number,
             sess.sql_exec_id,
             sess.sql_exec_start,
             sess.sql_id,
             (&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;sql&lt;/span&gt;.sql_fulltext
              &lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; v$sql &lt;span style=&#34;color:#ff79c6&#34;&gt;sql&lt;/span&gt;
              &lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; sess.sql_id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;sql&lt;/span&gt;.sql_id
                  &lt;span style=&#34;color:#ff79c6&#34;&gt;FETCH&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;FIRST&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;ROWS&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;ONLY&lt;/span&gt;) sql_fulltext,
             sess.prev_exec_id,
             sess.prev_exec_start,
             sess.prev_sql_id,
             (&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;sql&lt;/span&gt;.sql_fulltext
              &lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; v$sql &lt;span style=&#34;color:#ff79c6&#34;&gt;sql&lt;/span&gt;
              &lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; sess.prev_sql_id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;sql&lt;/span&gt;.sql_id
                  &lt;span style=&#34;color:#ff79c6&#34;&gt;FETCH&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;FIRST&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;ROWS&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;ONLY&lt;/span&gt;) prev_sql_fulltext,
             blocking_session
      &lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; v$session sess
      &lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; sess.username &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SYS&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color:#ff79c6&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;BY&lt;/span&gt; logon_time &lt;span style=&#34;color:#ff79c6&#34;&gt;DESC&lt;/span&gt;)
&lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; (wait_time_millis &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;OR&lt;/span&gt; time_since_last_wait_millis &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;)
  &lt;span style=&#34;color:#6272a4&#34;&gt;/*아래는 DBMS 시스템 쿼리를 제외시키기 위함*/&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;AND&lt;/span&gt; dbms_lob.compare(prev_sql_fulltext, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;update user$ set spare6=DECODE(to_char(:2, &amp;#39;&amp;#39;YYYY-MM-DD&amp;#39;&amp;#39;), &amp;#39;&amp;#39;0000-00-00&amp;#39;&amp;#39;, to_date(NULL), :2) where user#=:1&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;AND&lt;/span&gt; dbms_lob.compare(prev_sql_fulltext, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;BEGIN :1 := sys.kupc$que_int.get_status(:2, :3); END;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;AND&lt;/span&gt; dbms_lob.compare(prev_sql_fulltext, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;UPDATE &amp;#34;SYSTEM&amp;#34;.&amp;#34;SYS_EXPORT_SCHEMA_01&amp;#34; SET value_n = :1 WHERE process_order = :2&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;AND&lt;/span&gt; dbms_lob.compare(sql_fulltext, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;BEGIN :1 := sys.kupc$que_int.receive(:2); END;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;중점적으로 수집하고 싶었던 데이터는 &lt;strong&gt;Wait Event&lt;/strong&gt;와 &lt;strong&gt;SQL Full Text&lt;/strong&gt;였다.
이를 Elasticsearch에 저장하려면 식별자가 필요했다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;{&lt;/span&gt;prev_exec_id&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;{&lt;/span&gt;prev_sql_id&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;{&lt;/span&gt;unix_epoch_time(prev_exec_start)&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;먼저 고려했던 식별자는 &lt;code&gt;sql_exec_id&lt;/code&gt;와 &lt;code&gt;sql_id&lt;/code&gt;다.
하지만 대기 상태라면 &lt;code&gt;sql_exec_id&lt;/code&gt;는 &lt;code&gt;NULL&lt;/code&gt;이기 때문에 &lt;code&gt;prev_exec_id&lt;/code&gt;와 &lt;code&gt;prev_sql_id&lt;/code&gt;를 선택했다.
어느 정도 데이터가 쌓이고 살펴보니 &lt;code&gt;prev_exec_id&lt;/code&gt;와 &lt;code&gt;prev_sql_id&lt;/code&gt; 만으로도 충분히 식별되었다.
하지만 만에 하나를 위해 &lt;code&gt;prev_exec_start&lt;/code&gt;도 추가했다.
누적된 데이터를 Kibana로 시각화하면 다음과 같다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/db/oracle-dbms-session-kibana.png&#34; alt=&#34;Oracle DBMS Session to Kibana&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;사용-사례&#34;&gt;사용 사례&lt;/h1&gt;
&lt;p&gt;DBMS 성능 저하가 발생한 뒤 확인하는 Wait Event와 SQL은 후행 지표다.
메트릭을 모니터링하고 알람을 줄 수 있는 지표가 아니다.
이런 지표가 필요하다면 Prometheus나 Datadog을 사용한다.
우리가 처음 원했던 건 성능 저하가 발생했을 때 이를 진단할 방법이었다.&lt;/p&gt;
&lt;h2 id=&#34;resmgrcpu-quantum&#34;&gt;resmgr:cpu quantum&lt;/h2&gt;
&lt;p&gt;세션이 CPU 자원을 할당받기 위해 대기하는 이벤트&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;다.
Oracle DBMS에 Resource Manager(resmgr)가 활성화되어 있고
CPU 사용량이 제한(throttling)되어 있을 때 발생한다.&lt;/p&gt;
&lt;p&gt;먼저 IDC에서 CPU 사용량 알람이 지속적으로 발생했다.
대시보드를 확인해보니 Wait Event &lt;code&gt;resmgr:cpu quantum&lt;/code&gt;이 다수 발생했다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/db/wait-event-cpu-quantum.png&#34; alt=&#34;Wait Event - cpu quantum&#34;&gt;&lt;/p&gt;
&lt;p&gt;해당 Wait Event가 발생한 SQL의 Execution Plan을 확인해보니,
실행 시간은 빠르지만 CPU cost가 높은 것이 집중적으로 실행되었다.
SE2는 리소스가 제한된 만큼 &lt;strong&gt;리소스를 효율적으로 사용하는 것이 속도만큼 중요했다&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;이는 Execution Plan을 확인하면서 SQL을 튜닝하는 방법으로 해결했다.
주로 인덱스를 변경하거나 캐싱하는 방법으로 해결했다.
불필요한 쿼리도 제거했다.&lt;/p&gt;
&lt;h2 id=&#34;enq-tx---row-lock-contention&#34;&gt;enq: TX - row lock contention&lt;/h2&gt;
&lt;p&gt;여러 개의 트랜잭션이 동시에 같은 데이터 블록에 접근하려고 할 때 발생하는 이벤트&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/db/wait-event-row-lock-contention.png&#34; alt=&#34;Wait Event - row lock contention&#34;&gt;&lt;/p&gt;
&lt;p&gt;해당 Wait Event가 발생한 SQL을 확인해보니
데이터 집계 후 집계 데이터를 마스터 테이블(Master Table)에 업데이트하는 쿼리가 많았다.&lt;/p&gt;
&lt;p&gt;분명 이 쿼리가 만들어질 당시에는 데이터가 많지 않아서 문제가 없었을 것이다&amp;hellip;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;주목할 것은, 오라클에서 발생하는 Lock 경합의 대부분을 차지하는 &lt;code&gt;enq: TM - contention&lt;/code&gt; 이벤트&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;와
&lt;code&gt;enq: TX - row lock contention&lt;/code&gt; 이벤트&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;가 Concurrency가 아닌 Application으로 분류돼 있다는 사실이다.
&amp;hellip;
이런 유형의 프로그램 오류와 같이 분류한 것은 이들 문제가 DBA 이슈가 아니라 개발자 이슈임을 분명히 밝히고 있는 것이다.
Lock이 해제되지 않는 상황이 지속될 때 DBA가 할 수 있는 일은, Lock을 소유한 세션을 찾아 프로세스를 강제로 중지시키는 일뿐이다.
근본적인 해법은 애플리케이션 로직에서 찾아야 한다.&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;결론&#34;&gt;결론&lt;/h1&gt;
&lt;p&gt;리소스를 효율적으로 사용하는 것은 어떤 기술을 사용하든 중요할 것이다.
애초에 RDB가 적합하지 않을 수 있다.&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;어떤 기술을 사용하든 진단 도구부터 찾아보자.
기술 도입 후 진단 도구가 제공되지 않는다는 걸 알았다면, 시스템 장애에 대비하기 위해 직접 준비해야 할 수 있다.&lt;/p&gt;
&lt;h1 id=&#34;참조&#34;&gt;참조&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Oracle Database 19
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/en/database/oracle/oracle-database/19/dblic/Licensing-Information.html&#34;&gt;Licensing Information&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/en/database/oracle/oracle-database/19/refrn/oracle-wait-events.html&#34;&gt;Oracle Wait Events&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;오라클 성능 고도화 - 원리와 해법 1, 조시형&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;각주&#34;&gt;각주&lt;/h1&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.oracle.com/en/database/oracle/oracle-database/19/refrn/descriptions-of-wait-events.html#GUID-078224AC-3117-48ED-AC8A-4C570AD462A0&#34;&gt;resmgr:cpu quantum&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.oracle.com/en/database/oracle/oracle-database/19/refrn/descriptions-of-wait-events.html#GUID-2A907B53-E98C-44C3-BBF0-4C649D73DF07&#34;&gt;enq: TX - row lock contention&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;DML 테이블 Lock 경합 시 발생한다.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;DML 로우 Lock 경합 시 발생한다.&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;오라클 성능 고도화 - 원리와 해법 1, 100쪽&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;적정 기술&amp;#160;&lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
- https://markruler.github.io/posts/db/oracle-dbms-session-diagnosis/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>Too many open files</title>
        <link>https://markruler.github.io/posts/java/too-many-open-files/</link>
        <pubDate>Mon, 20 Mar 2023 21:58:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/java/too-many-open-files/</guid>
        <description>임창수 블로그 https://markruler.github.io/posts/java/too-many-open-files/ -&lt;blockquote&gt;
&lt;p&gt;커버 이미지 출처: &lt;a href=&#34;https://stablediffusionweb.com/&#34;&gt;Stable diffusion&lt;/a&gt; &amp;ldquo;swimming pool lane pattern&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;증상&#34;&gt;증상&lt;/h1&gt;
&lt;p&gt;Spring framework로 만든 웹 애플리케이션에서 비동기로 HTTP 요청하는 기능을 개발하고 있었다.
요구 사항을 위해 동시에 1,000개 이상의 요청을 보낼 때가 있는데, &lt;code&gt;Too many open files&lt;/code&gt; 에러가 발생했다.
작업 PC(Ubuntu 22.04)에서 문제 없이 동작하던 프로그램이
IDC에 위치한 서버(CentOS 7)에서는 &lt;code&gt;OutOfMemoryError&lt;/code&gt;가 발생하면서 동작하지 않았다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;java.lang.OutOfMemoryError: unable to create new native thread
...
java.util.concurrent.ExecutionException: com.markruler.RuntimeException: request error
...
Caused by: java.net.SocketException: Too many open files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;SocketException&lt;/code&gt;인데 &lt;code&gt;Too many open files&lt;/code&gt;? &lt;strong&gt;이게 OOM&lt;/strong&gt;?
이해되지 않았다.&lt;/p&gt;
&lt;p&gt;문제를 정의하기 위해 먼저 이해부터 해야 했다.&lt;/p&gt;
&lt;h1 id=&#34;분석&#34;&gt;분석&lt;/h1&gt;
&lt;h2 id=&#34;too-many-open-files&#34;&gt;Too many open files&lt;/h2&gt;
&lt;p&gt;근본적인 원인이 되는 &lt;code&gt;Too many open files&lt;/code&gt;는
프로세스에서 열려 있는 파일 디스크립터의 수가 시스템 제한을 초과하면 발생한다.
로컬 환경(Ubuntu 22.04)에서 먼저 테스트해봤다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 우선 별도의 세션을 연다.&lt;/span&gt;
bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;prlimit&lt;/code&gt;를 이용해 현재 프로세스의 파일 디스크립터 제한을 확인한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;prlimit -n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;기본적으로 &lt;strong&gt;4096&lt;/strong&gt;이 설정되어 있었다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;RESOURCE DESCRIPTION              SOFT    HARD UNITS
NOFILE   max number of open files &lt;span style=&#34;color:#bd93f9&#34;&gt;4096&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1048576&lt;/span&gt; files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ulimit&lt;/code&gt;를 이용해 열 수 있는 파일 디스크립터 수를 제한한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;ulimit&lt;/span&gt; -n &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그리고 &lt;code&gt;cat&lt;/code&gt; 명령어를 실행하면 &lt;code&gt;Too many open files&lt;/code&gt;가 발생한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cat /etc/os-release
&lt;span style=&#34;color:#6272a4&#34;&gt;# bash: start_pipeline: pgrp pipe: Too many open files&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ls: error while loading shared libraries: libselinux.so.1: cannot open shared object file: Error 24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;다시 나갔다가 새로운 세션을 연다.
limit을 4로 설정하면 파일 내용이 정상적으로 출력된다.
하지만 에러가 발생한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;ulimit&lt;/span&gt; -n &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cat /etc/os-release
&lt;span style=&#34;color:#6272a4&#34;&gt;# bash: start_pipeline: pgrp pipe: Too many open files&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# PRETTY_NAME=&amp;#34;Ubuntu 22.04.2 LTS&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5로 설정하면 에러가 발생하지 않고 정상적으로 출력된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;ulimit&lt;/span&gt; -n &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cat /etc/os-release
&lt;span style=&#34;color:#6272a4&#34;&gt;# PRETTY_NAME=&amp;#34;Ubuntu 22.04.2 LTS&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이유가 무엇일까?&lt;/p&gt;
&lt;h2 id=&#34;파일-디스크립터-file-descriptor&#34;&gt;파일 디스크립터 (File descriptor)&lt;/h2&gt;
&lt;p&gt;리눅스에서는 파일을 열면(open) 파일 디스크립터를 반환한다.
반환된 파일 디스크립터는 &lt;code&gt;fdtable&lt;/code&gt;의 참조값을 나타내며, 파일을 읽고 쓰는데 사용된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// https://github.com/torvalds/linux/blob/v6.2/include/linux/sched.h#L1088
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;stuct task_struct {
    ...
  &lt;span style=&#34;color:#6272a4&#34;&gt;/* Filesystem information: */&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; fs_struct    &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;fs;

  &lt;span style=&#34;color:#6272a4&#34;&gt;/* Open file information: */&lt;/span&gt;
  &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; files_struct &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;files;
  ...
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// https://github.com/torvalds/linux/blob/v6.2/include/linux/fdtable.h#L49
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * Open file table structure
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; files_struct {
  &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; fdtable __rcu &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;fdt;
  ...
  &lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; file __rcu &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; fd_array[NR_OPEN_DEFAULT];
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;정확히 fd를 어떻게 찾는지는 확인하지 않았다. 나중에 &lt;a href=&#34;https://m.blog.naver.com/arcyze/60048807080&#34;&gt;이 블로그&lt;/a&gt; 참고해서 공부하자.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fdtable&lt;/code&gt;의 0번 fd는 표준 입력(&lt;code&gt;stdin&lt;/code&gt;), 1번 fd는 표준 출력(&lt;code&gt;stdout&lt;/code&gt;).
2번 fd는 표준 에러(&lt;code&gt;stderr&lt;/code&gt;)다.
3번 fd부터 어떤 작업을 수행하는 프로세스가 필요한 파일을 가리킨다.
그래서 &lt;code&gt;ulimit -n 4&lt;/code&gt;로 설정하면 정상적으로 &lt;code&gt;cat&lt;/code&gt;의 출력이 나오는 것이다.&lt;/p&gt;
&lt;p&gt;다시 문제로 돌아가서 그럼 &lt;code&gt;java.net.SocketException: Too many open files&lt;/code&gt;는 왜 발생했던 걸까?&lt;/p&gt;
&lt;p&gt;Linux에서는 Socket도 파일로 취급한다.
그래서 소켓을 열 때마다 파일 디스크립터가 증가하고,
시스템 제한을 초과하면 &lt;code&gt;Too many open files&lt;/code&gt; 에러가 발생하는 것이다.&lt;/p&gt;
&lt;p&gt;문제가 발생했던 서버의 시스템 제한을 확인해봤다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;prlimit -n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;SOFT 값이 1024로 1024개의 파일 디스크립터를 열 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;RESOURCE DESCRIPTION              SOFT    HARD UNITS
NOFILE   max number of open files &lt;span style=&#34;color:#bd93f9&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1048576&lt;/span&gt; files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 제한을 늘리면 문제가 해결될 것 같았다.
그런데 다시 생각해보면 1024 만큼의 요청이 발생할 필요 없는 서버였다.
갑자기 요청이 늘어난 원인이 무엇일까?&lt;/p&gt;
&lt;p&gt;혼자가 아닌 함께 개발할 때,
내가 사용하려는 인터페이스가 이미 팀 내에서 통용되어 사용되고 있다면
해당 소스 코드를 복사해서 사용하는 경우가 많았다.
&lt;code&gt;OkHttpClient&lt;/code&gt;도 그대로 복사해서 사용했었다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;OkHttpClient client &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; OkHttpClient&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;하지만 &lt;code&gt;OkHttpClient&lt;/code&gt;를 생성자로 생성하면 OkHttp ConnectionPool 스레드가 생성된다.
파일 개수 제한이 4096인 로컬 환경에서 4,000개의 요청을 보내도록 테스트해봤다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://markruler.github.io/posts/java/jvm-monitoring/#visualvm&#34;&gt;VisualVM&lt;/a&gt;을 사용해서 스레드를 확인해봤다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/java/too-many-open-files/visualvm-bad-okhttp-connectionpool.png&#34; alt=&#34;visualvm-bad-okhttp-connectionpool&#34;&gt;&lt;/p&gt;
&lt;p&gt;OkHttp ConnectionPool의 스레드가 4,000개가 채 못 되어 &lt;code&gt;java.net.SocketException: Too many open files&lt;/code&gt;이 발생했다.&lt;/p&gt;
&lt;h1 id=&#34;문제-정의&#34;&gt;문제 정의&lt;/h1&gt;
&lt;p&gt;실제 문제는 불필요한 스레드가 과다 생성되어 발생한 것이다.
&lt;strong&gt;이 에러가 특히 위험한 이유는 시스템 제한을 초과했기 때문에 동일한 머신에 있는 다른 프로세스에도 영향을 준다는 것이다.&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;해결&#34;&gt;해결&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;OkHttp ConnectionPool&lt;/code&gt;을 재사용하기 위해 Spring Bean으로 등록했다.
&lt;strong&gt;이는 &lt;a href=&#34;https://square.github.io/okhttp/4.x/okhttp/okhttp3/-ok-http-client/&#34;&gt;공식 문서&lt;/a&gt;에도 있는 내용이다.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;OkHttpClients Should Be Shared&lt;/strong&gt;
&lt;br&gt;
OkHttp performs best when you create a single OkHttpClient instance
and reuse it for all of your HTTP calls.
This is because each client holds its own connection pool and thread pools.
Reusing connections and threads reduces latency and saves memory.
Conversely, creating a client for each request wastes resources on idle pools.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; okhttp3.OkHttpClient&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.springframework.context.annotation.Bean&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.springframework.context.annotation.Configuration&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;

@Configuration
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;OkHttpConfig&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;

    @Bean
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; OkHttpClient &lt;span style=&#34;color:#50fa7b&#34;&gt;okHttpClient&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; OkHttpClient&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; okhttp3.OkHttpClient&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.springframework.beans.factory.annotation.Autowired&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; org.springframework.stereotype.Component&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;

@Component
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyHttpClient&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; OkHttpClient httpClient&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;

    @Autowired
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyHttpClient&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;OkHttpClient httpClient&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;httpClient&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; httpClient&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;다시 4,000개의 요청을 보내도록 테스트했다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/java/too-many-open-files/visualvm-okhttpclient-bean.png&#34; alt=&#34;visualvm okhttpclient bean&#34;&gt;&lt;/p&gt;
&lt;p&gt;더 이상 불필요하게 스레드가 늘어나지 않았고,
스레드를 새로 생성할 필요도 없으니 성능 또한 개선되었다.
(평균 10초 → 3초)&lt;/p&gt;
&lt;p&gt;시스템 제한 설정을 변경할 필요 없이
&lt;code&gt;Too many open files&lt;/code&gt; 에러도 발생하지 않았다.&lt;/p&gt;
- https://markruler.github.io/posts/java/too-many-open-files/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>Jenkins Workspace 동시성 문제</title>
        <link>https://markruler.github.io/posts/ci/jenkins-workspace-concurrency/</link>
        <pubDate>Mon, 14 Nov 2022 00:38:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/ci/jenkins-workspace-concurrency/</guid>
        <description>임창수 블로그 https://markruler.github.io/posts/ci/jenkins-workspace-concurrency/ -&lt;h1 id=&#34;개요&#34;&gt;개요&lt;/h1&gt;
&lt;p&gt;Jenkins Pipeline을 사용해서 잡 스케줄러를 실행하기 위해
&lt;a href=&#34;https://www.jenkins.io/doc/book/pipeline/syntax/#triggers&#34;&gt;triggers&lt;/a&gt; directive를 사용했다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;pipeline &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
    agent any

    triggers &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
        cron&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;* * * * *&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// HERE
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;

    stages &lt;span style=&#34;color:#ff79c6&#34;&gt;{...}&lt;/span&gt;

    post &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
        always &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
            cleanWs&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cleanWhenNotBuilt:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;deleteDirs:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;disableDeferredWipeout:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;notFailBuild:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt;
                    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;patterns:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;
                        &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;pattern:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.git/**&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;EXCLUDE&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;],&lt;/span&gt;
                        &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;pattern:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.gitignore&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;EXCLUDE&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;],&lt;/span&gt;
                        &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;pattern:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.meta/**&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;EXCLUDE&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;],&lt;/span&gt;
                    &lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;
            &lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;해당 Job은 빌드 간 메타데이터(&lt;code&gt;.meta/&lt;/code&gt;)를 공유해야 했기 때문에
&lt;a href=&#34;https://plugins.jenkins.io/ws-cleanup/&#34;&gt;cleanWs&lt;/a&gt; 플러그인에서도
&lt;code&gt;.git&lt;/code&gt; 디렉토리와 함께 삭제되지 않도록 설정했다.&lt;/p&gt;
&lt;p&gt;하지만 무슨 이유인지 메타데이터가 간헐적으로 누락되었고,
작업도 원하는대로 동작하지 않고 있었다.&lt;/p&gt;
&lt;h1 id=&#34;workspacelist&#34;&gt;WorkspaceList&lt;/h1&gt;
&lt;p&gt;Jenkins에서 Job을 실행할 경우 말그대로 작업 공간을 위한
Workspace(&lt;code&gt;$JENKINS_HOME/workspace&lt;/code&gt;) 디렉토리가 생성된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// hudson.slaves.WorkspaceList
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;synchronized&lt;/span&gt; Lease &lt;span style=&#34;color:#50fa7b&#34;&gt;allocate&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;@NonNull FilePath base&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; Object context&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;throws&lt;/span&gt; InterruptedException &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; 1&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
        FilePath candidate &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; 1 &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; base &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; base&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;withSuffix&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;@&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; i&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
        Entry e &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; inUse&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;candidate&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;getRemote&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;e &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;e&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;quick&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; e&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;context&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; context&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#ff79c6&#34;&gt;continue&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; acquire&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;candidate&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; context&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Jenkins는 Workspace 목록을 별도의 메타데이터 파일에 저장해서 관리하지 않는다.
Jenkins 런타임의 &lt;a href=&#34;https://github.com/jenkinsci/jenkins/blob/jenkins-2.374/core/src/main/java/hudson/slaves/WorkspaceList.java&#34;&gt;WorkspaceList 객체&lt;/a&gt;에
전체 Workspace 목록을 저장한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// hudson.slaves.WorkspaceList
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; * Used by {@link Computer} to keep track of workspaces that are actively in use.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;WorkspaceList&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AllocationAt&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; Exception &lt;span style=&#34;color:#ff79c6&#34;&gt;{...}&lt;/span&gt;
    
    &lt;span style=&#34;color:#6272a4&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;      * Book keeping for workspace allocation.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;      */&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Entry&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{...}&lt;/span&gt;
    
    &lt;span style=&#34;color:#6272a4&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;     * Represents a leased workspace that needs to be returned later.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Lease&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;implements&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;/*Auto*/&lt;/span&gt;Closeable &lt;span style=&#34;color:#ff79c6&#34;&gt;{...}&lt;/span&gt;

    &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;문제&#34;&gt;문제&lt;/h2&gt;
&lt;p&gt;만약 파이프라인에서 &lt;code&gt;Concurrent Build&lt;/code&gt; 옵션을 허용한 채
여러 개의 빌드를 동시에 실행하면 간혹 &lt;code&gt;job_name&lt;/code&gt; workspace에서 실행되지 않고
&lt;code&gt;job_name@2&lt;/code&gt; 에서만 실행되는 경우가 있다.
그런데 메타데이터 파일을 공유해서 사용해야 하는 경우
&lt;code&gt;job_name&lt;/code&gt; workspace에서 실행되기를 보장해야 한다.&lt;/p&gt;
&lt;h2 id=&#34;해결&#34;&gt;해결&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Jenkins Master 프로세스를 재시작&lt;/strong&gt;해서 &lt;code&gt;WorkspaceList&lt;/code&gt;를 초기화하거나
&lt;strong&gt;새로운 이름의 Job을 생성&lt;/strong&gt;하면 새로운 이름의 workspace에서 빌드할 수 있다.
이후 &lt;a href=&#34;https://en.wikipedia.org/wiki/Thread_safety&#34;&gt;스레드 안전성&lt;/a&gt;을 보장하기 위해
&lt;code&gt;Concurrent Build&lt;/code&gt; 옵션을 허용하지 않은 채 빌드한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;pipeline &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
    agent any

    triggers &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
        cron&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;* * * * *&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
    
    &lt;span style=&#34;color:#6272a4&#34;&gt;// https://www.jenkins.io/doc/book/pipeline/syntax/#options
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    options &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#6272a4&#34;&gt;// cron 설정에 따라 빌드 간 겹치지 않도록 타임아웃을 설정한다.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        timeout&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;time:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;unit:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SECONDS&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
    
        &lt;span style=&#34;color:#6272a4&#34;&gt;// 빌드 스케줄이 2개 생성되면 &amp;#39;job_name&amp;#39;, &amp;#39;job_name@2&amp;#39; workspace가 생성되고
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// metadata를 각각 관리하게 된다. abortPrevious 값을 true로 설정하면
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// 이미 빌드 중인 프로세스와 겹쳐서 &amp;#39;job_name@2&amp;#39; workspace가 생성되더라도
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// 이후 빌드부터는 기존 빌드 프로세스가 제거되고 &amp;#39;job_name&amp;#39; workspace에서 실행된다.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        disableConcurrentBuilds&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;abortPrevious:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;

    stages &lt;span style=&#34;color:#ff79c6&#34;&gt;{...}&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;timeout과-cron&#34;&gt;timeout과 cron&lt;/h1&gt;
&lt;p&gt;Crontab(Unix의 Job Scheduler)처럼 Jenkins는 &lt;code&gt;cron&lt;/code&gt; 설정을 통해 잡 스케줄러를 만들 수 있다.
Jenkins &lt;code&gt;cron&lt;/code&gt;의 최소 간격은 1분(&lt;code&gt;* * * * *&lt;/code&gt;)이다.&lt;/p&gt;
&lt;h2 id=&#34;문제-1&#34;&gt;문제&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;timeout&lt;/code&gt; 설정도 &lt;code&gt;cron&lt;/code&gt; 설정과 같이 1분으로 두면 timeout abort 되기 전
&lt;code&gt;job_name@2&lt;/code&gt; workspace 디렉토리가 생성되고 별도의 메타데이터를 갖는 Job이 실행될 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;해결-1&#34;&gt;해결&lt;/h2&gt;
&lt;p&gt;만약 &lt;code&gt;cron&lt;/code&gt; 간격을 1분으로 설정했다면 &lt;code&gt;timeout&lt;/code&gt;을 50초로 설정하는 등 차이를 둔다. (55초는 살짝 겹쳤다…)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;timeout&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;time:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;unit:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SECONDS&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://markruler.github.io/posts/ci/jenkins-workspace-concurrency/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
  </channel>
</rss> 