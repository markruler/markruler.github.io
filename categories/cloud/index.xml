<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cloud on </title>
    <link>https://cxsu.github.io/categories/cloud/</link>
    <description>Recent content in cloud on </description>
    <generator>Hugo -- gohugo.io</generator>
    
      <language>ko-kr</language>
    
    
      <managingEditor>imcxsu@gmail.com (Changsu)</managingEditor>
    
    
      <webMaster>imcxsu@gmail.com (Changsu)</webMaster>
    
    
      <copyright>2020 Im Changsu</copyright>
    
    
      <lastBuildDate>Sun, 10 Jan 2021 01:00:00 +0900</lastBuildDate>
    
    
    <atom:link rel="canonical" type="text/html" href="https://cxsu.github.io/categories/cloud/" title="" />
    
    
    
    <item>
      <title>쿠버네티스 레벨 트리거링 및 조정</title>
      <link>https://cxsu.github.io/posts/kubernetes/level-triggering-and-reconciliation/</link>
      <pubDate>Sun, 10 Jan 2021 01:00:00 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/kubernetes/level-triggering-and-reconciliation/</guid>
      <description>
        James Bowes(@jrbowes)의 Level Triggering and Reconciliation in Kubernetes를 번역한 글입니다. 유튜브 영상   시스템 프로그래밍 개념으로 보는 쿠버네티스가 클러스터를 관리하는 방법 쿠버네티스는 현재 가장 있기 있는 컨테이너 오케스트레이터입니다. 이런 성공은 신뢰성에서 비롯됐다고 봐도 과언이 아닙니다. 모든 소프트웨어에 버그가 있지만, 컨테이너를 실행하는 데 있어서는 쿠버네티스가 다른 소프트웨어보다 버그가 적습니다.
쿠버네티스는 원하는 수의 컨테이너를 제때 실행합니다. 그리고 그 숫자를 계속해서 유지하죠. 공식 문서에 따르면 쿠버네티스가 자가 치유(self-healing) 하는 것이라고 말합니다.
      </description>
    </item>
    
    
    
    <item>
      <title>NFV 도커 컨테이너 초심자 가이드</title>
      <link>https://cxsu.github.io/posts/nfv/beginners-guide-docker-container-nfv/</link>
      <pubDate>Mon, 16 Nov 2020 22:40:00 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/nfv/beginners-guide-docker-container-nfv/</guid>
      <description>
        Faisal Khan의 A Beginner’s Guide to Docker Container in NFV를 번역한 글입니다. 2016년 3월 3일에 쓰여진 글로 현재와 다를 수 있습니다.   새롭게 등장한 도커(Docker) 컨테이너는 NFV를 혁신할 수 있는 잠재력을 가지고 있습니다.
무엇보다 도커 컨테이너는 가상 머신에 비해 가볍고, 적은 오버헤드와 리소스만을 요구하며, 동일한 운영 체제에서 실행되는 애플리케이션을 격리시킬 수 있습니다.
즉, NFV의 VNF(가상 네트워크 기능)를 완전히 격리시켜 도커 컨테이너에서 실행할 수 있다면 가상 머신이 필요 없을 지도 모릅니다.
      </description>
    </item>
    
    
    
    <item>
      <title>쿠버네티스 컴포넌트를 로컬에서 직접 빌드 및 디버깅하기</title>
      <link>https://cxsu.github.io/posts/kubernetes/local-build-kube/</link>
      <pubDate>Sun, 11 Oct 2020 14:48:00 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/kubernetes/local-build-kube/</guid>
      <description>
        직접 빌드해서 사용한다면 쿠버네티스 기능을 확장해서 사용할 수 있다.
 Reference  kubernetes/build/README.md  사용할 명령어 # master 브랜치 git clone --depth 1 https://github.com/kubernetes/kubernetes.git # 특정 브랜치 git clone --depth 1 --single-branch --branch release-1.19 https://github.com/kubernetes/kubernetes.git # cmd 디렉터리에 있는 다른 컴포넌트도 같은 방식으로 빌드할 수 있다. # cmd/kubeadm, kubectl, kubelet, kube-apiserver, kube-proxy, kube-controller-manager, kube-scheduler, ... make all WHAT=cmd/kubectl GOFLAGS=-v # 그냥 간단히 go build 명령도 가능하다. go build -o k cmd/kubectl 빌드 실행 따라가기 Makefile  make 명령을 내릴 루트 디렉터리 Makefile을 보면 아래와 같이 다른 Makefile을 가리킨다.
      </description>
    </item>
    
    
    
    <item>
      <title>마이크로서비스 기반 observability 용어 정리</title>
      <link>https://cxsu.github.io/posts/cloud/monitor-trace-log-metric/</link>
      <pubDate>Fri, 02 Oct 2020 16:24:00 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/cloud/monitor-trace-log-metric/</guid>
      <description>
        observability 관련 용어를 명확히 설명하기 힘들어서 공부하는 중.
Observability  관측성 관찰성 관측 가능성   제어 이론에서 &amp;lsquo;observability&amp;rsquo;라는 용어는 시스템의 내부 상태와 그에 따른 행동을 시스템에 대한 입력과 출력만 보고 결정할 수 있다면 그 시스템이 관측 가능하다는 것을 나타낸다. - &amp;lt;마스터링 분산 추적&amp;gt; p6
 Logging  CNCF Landscape : Fluentd
Elastic
 Fluentd-Kibana
로그는 시스템 프로세스의 개별 이벤트를 기록하는 것이다. 하지만 각 로그 스트림은 한 서비스의 단일 인스턴스에 대해서만 알려주기 때문에 마이크로서비스에서 전체적인 모니터링을 하기에는 어려움이 있다.
      </description>
    </item>
    
    
    
    <item>
      <title>NFV의 컴퓨팅 도메인에 대한 오해!</title>
      <link>https://cxsu.github.io/posts/nfv/the-misunderstood-facts-about-compute-domain-in-nfv/</link>
      <pubDate>Thu, 01 Oct 2020 22:23:00 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/nfv/the-misunderstood-facts-about-compute-domain-in-nfv/</guid>
      <description>
        Faisal Khan의 The Misunderstood Facts about Compute Domain in NFV!를 번역한 글입니다.   NFV에 대해 생각해 보세요! 그리고 x86 프로세서를 생각해 보세요&amp;hellip; 둘은 뗄 수 없는 사이입니다. 그렇죠?
프로세서(컴퓨팅 파트)가 아무리 단순하게 들리더라도 NFV의 컴퓨팅 도메인(compute domain)이 노드의 컴퓨팅 프로세서(compute processor)가 같지 않다는 사실을 모르는 사람이 많을 것입니다. 사실&amp;hellip; 훨씬 더 많습니다.
NFV의 &amp;ldquo;Compute Domain&amp;quot;과 &amp;ldquo;Compute Node&amp;quot;는 ETSI 정의에 따르면 동일한 것을 의미하지 않습니다. 이를 잘 알고 있으면 NFV 기본 아키텍처를 이해하는 데 많은 혼란을 피할 수 있으며, 벤더 및 고객과 이 주제에 대해 소통하는 과정에서 오해를 피할 수 있습니다.
      </description>
    </item>
    
    
    
    <item>
      <title>NFV MANO 초심자 가이드</title>
      <link>https://cxsu.github.io/posts/nfv/beginners-guide-to-nfv-mano/</link>
      <pubDate>Wed, 23 Sep 2020 00:58:08 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/nfv/beginners-guide-to-nfv-mano/</guid>
      <description>
        Faisal Khan의 A Beginner’s Guide to NFV Management &amp;amp; Orchestration (MANO)을 번역한 글입니다.   NFV 여행의 초심자는 NFV Management &amp;amp; Orchestration (NFV MANO)를 이해하려고 할 때 다음과 같은 두 가지 걸림돌이 있습니다.
첫번째로 초심자는 기존의 네트워크가 EMS, NMS, 또는 OSS가 지원하는 것들처럼 하나의 관리 시스템만 필요하다고 알고 있습니다. 반면에 NFV 네트워크는 VIM 관리자, VNF 관리자, 오케스트레이터와 같은 여러 관리자를 필요로 합니다.
관리자가 충분하지 않다면 기존 EMS와 OSS/BSS도 있습니다.
      </description>
    </item>
    
    
    
    <item>
      <title>&#34;NFV 아키텍처&#34; 이해를 위한 치트 시트</title>
      <link>https://cxsu.github.io/posts/nfv/cheat-sheet-understanding-nfv-architecture/</link>
      <pubDate>Tue, 22 Sep 2020 21:58:08 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/nfv/cheat-sheet-understanding-nfv-architecture/</guid>
      <description>
        Faisal Khan의 A Cheat Sheet for Understanding &amp;ldquo;NFV Architecture&amp;rdquo;를 번역한 글입니다.   시간이 없으신가요?
쉽게 이해할 수 있는 NFV 용어/아키텍처에 대한 빠른 업데이트가 필요하신가요?
그렇다면 NFV 아키텍처를 시작하는 데 필요한 모든 정보를 얻을 수 있는 아래 7가지 주요 블록을 보세요. 블록 번호 및 정의를 따라가세요.
1. VNF (Virtual Network Function) VNF는 가상화된 네트워크 요소로 NFV 아키텍처의 기본 블록입니다. 예를 들어 라우터를 가상화하면 라우터 VNF라고 부르고, 다른 예는 기지국(base station) VNF도 있습니다.
      </description>
    </item>
    
    
    
    <item>
      <title>쿠버네티스 API 접근 제어</title>
      <link>https://cxsu.github.io/posts/kubernetes/controlling-access-api/</link>
      <pubDate>Thu, 17 Sep 2020 06:58:08 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/kubernetes/controlling-access-api/</guid>
      <description>
        쿠버네티스 공식 문서를 번역했습니다.  이 페이지는 쿠버네티스 API에 대한 접근 제어의 개요를 제공한다.
사용자는kubectl, 클라이언트 라이브러리 또는 REST 요청을 통해 API에 접근한다. 사용자와 쿠버네티스 서비스 어카운트 모두 API에 접근할 수 있다. 요청이 API에 도달하면, 다음 다이어그램에 설명된 몇 가지 단계를 거친다.
전송 보안 일반적인 쿠버네티스 클러스터에서 API는 443번 포트에서 서비스한다. API 서버는 인증서를 제시한다. 이 인증서는 종종 자체 서명되기 때문에 일반적으로 사용자 머신의 $USER/.kube/config은 API 서버의 인증서에 대한 루트 인증서를 포함하며, 시스템 기본 루트 인증서 대신 사용된다.
      </description>
    </item>
    
    
    
    <item>
      <title>MEC 아키텍처 초심자 가이드</title>
      <link>https://cxsu.github.io/posts/mec/beginners-guide-to-mec-architecture/</link>
      <pubDate>Sun, 13 Sep 2020 20:58:08 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/mec/beginners-guide-to-mec-architecture/</guid>
      <description>
        Faisal Khan의 Beginners Guide to MEC Architecture (Multi-access Edge Computing)을 번역한 글입니다. 처음에는 MEC가 Mobile Edge Computing 의 줄임말이었지만 현재는 Multi-access Edge Computing 입니다.   MEC 아키텍처 가이드에 오신 것을 환영합니다!
MEC는 5G의 저지연(low-latency) 서비스를 활용하려는 모바일 사업자들에 의해 새로운 투자 물결을 가져올 것입니다. 이는 소비자와 더 가까운 곳(무선 기지국)에서 서비스를 운영하겠다는 것을 의미합니다.
MEC는 서비스 사업자들에게 새로운 서비스 분야와 수익 창출의 수단입니다. 예를 들어 더 빠른 게임 경험, 증강/가상 현실, 커넥티드 카 등이 있습니다.
      </description>
    </item>
    
    
  </channel>
</rss>
