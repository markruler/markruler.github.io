<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>임창수 블로그</title>
    <link>https://cxsu.github.io/categories/cloud/</link>
    <description>Don&#39;t Repeat Yourself!</description>
    <generator>Hugo -- gohugo.io</generator>
    
      <language>ko-kr</language>
    
    
      <copyright>Im Changsu 2020 - 2021</copyright>
    
    
      <lastBuildDate>Sun, 21 Feb 2021 11:47:00 +0900</lastBuildDate>
    
    
    
      <atom:link href="https://cxsu.github.io/categories/cloud/index.xml" rel="alternate" type="application/rss+xml" />
      
    
    
    
    <item>
      <title>책 &#34;컨테이너 보안&#34;</title>
      <link>https://cxsu.github.io/posts/review/container-security-9791162243923/</link>
      <pubDate>Sun, 21 Feb 2021 11:47:00 +0900</pubDate>
      <author>imcxsu@gmail.com</author>
      <guid>https://cxsu.github.io/posts/review/container-security-9791162243923/</guid>
      <description>
        한빛미디어의 지원을 받아 작성되었습니다.
 거두절미 컨테이너에 관심 있으신 분이라면 필수 소장 도서입니다. 저도 컨테이너, 쿠버네티스, 도커, 클라우드 관련 도서를 많이 읽어봤지만 컨테이너를 이렇게 간명하고 깊게 다루는 책은 없었습니다. 컨테이너 &amp;lsquo;보안&#39;을 설명하기 위해 컨테이너가 어떻게 동작하는지 설명하는 데에 책의 대부분을 차지합니다. 다만 200 페이지에 많은 내용을 압축한 만큼 도해는 많지 않습니다.
먼저 저자의 katacoda (An Introduction to Containers for Go programmers)로 실습해보시거나 발표(What is a container, really? Let&amp;rsquo;s write one in Go from scratch)를 보시길 추천드립니다.
      </description>
    </item>
    
    
    
    <item>
      <title>컨테이너 톺아보기</title>
      <link>https://cxsu.github.io/posts/container/container-study-guide/</link>
      <pubDate>Wed, 17 Feb 2021 23:47:00 +0900</pubDate>
      <author>imcxsu@gmail.com</author>
      <guid>https://cxsu.github.io/posts/container/container-study-guide/</guid>
      <description>
        거두절미 생각보다 컨테이너는 간단한 게 아닙니다. 컨테이너를 쉽게 생성하고 삭제할 수 있었던 이유는 도커와 같은 컨테이너 관리 도구가 복잡한 것들을 꽁꽁 감췄기 때문입니다. 컨테이너를 공부하면 할수록 알아야 할 게 더 늘어나고 있지만 이쯤에서 유익했던 자료들을 모아 보려 합니다.
참고 자료  👍 필수  책 - 컨테이너 보안, Liz Rice katacoda - An Introduction to Containers for Go programmers, Liz Rice   컨테이너  A Practical Introduction to Container Terminology, Scott McCarty Build Your Own Container Using Less than 100 Lines of Go, Julian Friedman Implementing Container Runtime Shim: runc, Ivan Velichko   컨테이너 런타임  리눅스 컨테이너란?
      </description>
    </item>
    
    
    
    <item>
      <title>쿠버네티스 레벨 트리거링 및 조정</title>
      <link>https://cxsu.github.io/posts/kubernetes/level-triggering-and-reconciliation/</link>
      <pubDate>Wed, 13 Jan 2021 23:05:00 +0900</pubDate>
      <author>imcxsu@gmail.com</author>
      <guid>https://cxsu.github.io/posts/kubernetes/level-triggering-and-reconciliation/</guid>
      <description>
        James Bowes(@jrbowes)의 Level Triggering and Reconciliation in Kubernetes를 번역한 글입니다. 저자의 허락을 받고 번역했습니다.     시스템 프로그래밍 개념으로 보는 쿠버네티스가 클러스터를 관리하는 방법 쿠버네티스는 현재 가장 있기 있는 컨테이너 오케스트레이터입니다. 이런 성공의 밑받침은 신뢰성입니다. 모든 소프트웨어에는 버그가 있죠. 그러나 컨테이너를 실행하는 데 있어서 쿠버네티스는 다른 소프트웨어보다 버그가 적습니다.
쿠버네티스는 원하는 수의 컨테이너를 제때에 실행합니다. 그리고 그 숫자를 계속해서 유지하죠. 공식 문서에 따르면 쿠버네티스가 자가 치유(self-healing) 하는 것이라고 말합니다.
      </description>
    </item>
    
    
    
    <item>
      <title>NFV 도커 컨테이너 초심자 가이드</title>
      <link>https://cxsu.github.io/posts/nfv/beginners-guide-docker-container-nfv/</link>
      <pubDate>Mon, 16 Nov 2020 22:40:00 +0900</pubDate>
      <author>imcxsu@gmail.com</author>
      <guid>https://cxsu.github.io/posts/nfv/beginners-guide-docker-container-nfv/</guid>
      <description>
        Faisal Khan의 A Beginner’s Guide to Docker Container in NFV를 번역한 글입니다. 저자의 허락을 받고 번역했습니다. 2016년 3월 3일에 쓰여진 글로 현재와 다를 수 있습니다.   새롭게 등장한 도커(Docker) 컨테이너는 NFV를 혁신할 수 있는 잠재력을 가지고 있습니다.
무엇보다 도커 컨테이너는 가상 머신에 비해 가볍고, 적은 오버헤드와 리소스만을 요구하며, 동일한 운영 체제에서 실행되는 애플리케이션을 격리시킬 수 있습니다.
즉, NFV의 VNF(가상 네트워크 기능)를 완전히 격리시켜 도커 컨테이너에서 실행할 수 있다면 가상 머신이 필요 없을 지도 모릅니다.
      </description>
    </item>
    
    
    
    <item>
      <title>쿠버네티스 컴포넌트를 로컬에서 직접 빌드 및 디버깅하기</title>
      <link>https://cxsu.github.io/posts/kubernetes/local-build-kube/</link>
      <pubDate>Sun, 11 Oct 2020 14:48:00 +0900</pubDate>
      <author>imcxsu@gmail.com</author>
      <guid>https://cxsu.github.io/posts/kubernetes/local-build-kube/</guid>
      <description>
        직접 빌드해서 사용한다면 쿠버네티스 기능을 확장해서 사용할 수 있다.
 Reference  kubernetes/build/README.md  사용할 명령어 # master 브랜치 git clone --depth 1 https://github.com/kubernetes/kubernetes.git # 특정 브랜치 git clone --depth 1 --single-branch --branch release-1.19 https://github.com/kubernetes/kubernetes.git # cmd 디렉터리에 있는 다른 컴포넌트도 같은 방식으로 빌드할 수 있다. # cmd/kubeadm, kubectl, kubelet, kube-apiserver, kube-proxy, kube-controller-manager, kube-scheduler, ... make all WHAT=cmd/kubectl GOFLAGS=-v # 그냥 간단히 go build 명령도 가능하다. go build -o k cmd/kubectl 빌드 실행 따라가기 Makefile  make 명령을 내릴 루트 디렉터리 Makefile을 보면 아래와 같이 다른 Makefile을 가리킨다.
      </description>
    </item>
    
    
    
    <item>
      <title>마이크로서비스 기반 observability 용어 정리</title>
      <link>https://cxsu.github.io/posts/cloud/monitor-trace-log-metric/</link>
      <pubDate>Fri, 02 Oct 2020 16:24:00 +0900</pubDate>
      <author>imcxsu@gmail.com</author>
      <guid>https://cxsu.github.io/posts/cloud/monitor-trace-log-metric/</guid>
      <description>
        observability 관련 용어를 명확히 설명하기 힘들어서 공부하는 중.
Observability  관측성 관찰성 관측 가능성   제어 이론에서 &amp;lsquo;observability&#39;라는 용어는 시스템의 내부 상태와 그에 따른 행동을 시스템에 대한 입력과 출력만 보고 결정할 수 있다면 그 시스템이 관측 가능하다는 것을 나타낸다. - &amp;lt;마스터링 분산 추적&amp;gt; p6
 Logging  CNCF Landscape : Fluentd
Elastic
 Fluentd-Kibana
로그는 시스템 프로세스의 개별 이벤트를 기록하는 것이다. 하지만 각 로그 스트림은 한 서비스의 단일 인스턴스에 대해서만 알려주기 때문에 마이크로서비스에서 전체적인 모니터링을 하기에는 어려움이 있다.
      </description>
    </item>
    
    
    
    <item>
      <title>NFV의 컴퓨팅 도메인에 대한 오해!</title>
      <link>https://cxsu.github.io/posts/nfv/the-misunderstood-facts-about-compute-domain-in-nfv/</link>
      <pubDate>Thu, 01 Oct 2020 22:23:00 +0900</pubDate>
      <author>imcxsu@gmail.com</author>
      <guid>https://cxsu.github.io/posts/nfv/the-misunderstood-facts-about-compute-domain-in-nfv/</guid>
      <description>
        Faisal Khan의 The Misunderstood Facts about Compute Domain in NFV!를 번역한 글입니다. 저자의 허락을 받고 번역했습니다.   NFV에 대해 생각해 보세요! 그리고 x86 프로세서를 생각해 보세요&amp;hellip; 둘은 뗄 수 없는 사이입니다. 그렇죠?
프로세서(컴퓨팅 파트)가 아무리 단순하게 들리더라도 NFV의 컴퓨팅 도메인(compute domain)이 노드의 컴퓨팅 프로세서(compute processor)가 같지 않다는 사실을 모르는 사람이 많을 것입니다. 사실&amp;hellip; 훨씬 더 많습니다.
NFV의 &amp;ldquo;Compute Domain&amp;quot;과 &amp;ldquo;Compute Node&amp;quot;는 ETSI 정의에 따르면 동일한 것을 의미하지 않습니다.
      </description>
    </item>
    
    
    
    <item>
      <title>NFV MANO 초심자 가이드</title>
      <link>https://cxsu.github.io/posts/nfv/beginners-guide-to-nfv-mano/</link>
      <pubDate>Wed, 23 Sep 2020 00:58:08 +0900</pubDate>
      <author>imcxsu@gmail.com</author>
      <guid>https://cxsu.github.io/posts/nfv/beginners-guide-to-nfv-mano/</guid>
      <description>
        Faisal Khan의 A Beginner’s Guide to NFV Management &amp;amp; Orchestration (MANO)을 번역한 글입니다. 저자의 허락을 받고 번역했습니다.   NFV 여행의 초심자는 NFV Management &amp;amp; Orchestration (NFV MANO)를 이해하려고 할 때 다음과 같은 두 가지 걸림돌이 있습니다.
첫번째로 초심자는 기존의 네트워크가 EMS, NMS, 또는 OSS가 지원하는 것들처럼 하나의 관리 시스템만 필요하다고 알고 있습니다. 반면에 NFV 네트워크는 VIM 관리자, VNF 관리자, 오케스트레이터와 같은 여러 관리자를 필요로 합니다.
관리자가 충분하지 않다면 기존 EMS와 OSS/BSS도 있습니다.
      </description>
    </item>
    
    
    
    <item>
      <title>&#34;NFV 아키텍처&#34; 이해를 위한 치트 시트</title>
      <link>https://cxsu.github.io/posts/nfv/cheat-sheet-understanding-nfv-architecture/</link>
      <pubDate>Tue, 22 Sep 2020 21:58:08 +0900</pubDate>
      <author>imcxsu@gmail.com</author>
      <guid>https://cxsu.github.io/posts/nfv/cheat-sheet-understanding-nfv-architecture/</guid>
      <description>
        Faisal Khan의 A Cheat Sheet for Understanding &amp;ldquo;NFV Architecture&amp;rdquo;를 번역한 글입니다. 저자의 허락을 받고 번역했습니다.   시간이 없으신가요?
쉽게 이해할 수 있는 NFV 용어/아키텍처에 대한 빠른 업데이트가 필요하신가요?
그렇다면 NFV 아키텍처를 시작하는 데 필요한 모든 정보를 얻을 수 있는 아래 7가지 주요 블록을 보세요. 블록 번호 및 정의를 따라가세요.
1. VNF (Virtual Network Function) VNF는 가상화된 네트워크 요소로 NFV 아키텍처의 기본 블록입니다. 예를 들어 라우터를 가상화하면 라우터 VNF라고 부르고, 다른 예는 기지국(base station) VNF도 있습니다.
      </description>
    </item>
    
    
    
    <item>
      <title>쿠버네티스 API 접근 제어</title>
      <link>https://cxsu.github.io/posts/kubernetes/controlling-access-api/</link>
      <pubDate>Thu, 17 Sep 2020 06:58:08 +0900</pubDate>
      <author>imcxsu@gmail.com</author>
      <guid>https://cxsu.github.io/posts/kubernetes/controlling-access-api/</guid>
      <description>
        쿠버네티스 공식 문서를 번역했습니다.  이 페이지는 쿠버네티스 API에 대한 접근 제어의 개요를 제공한다.
사용자는kubectl, 클라이언트 라이브러리 또는 REST 요청을 통해 API에 접근한다. 사용자와 쿠버네티스 서비스 어카운트 모두 API에 접근할 수 있다. 요청이 API에 도달하면, 다음 다이어그램에 설명된 몇 가지 단계를 거친다.
전송 보안 일반적인 쿠버네티스 클러스터에서 API는 443번 포트에서 서비스한다. API 서버는 인증서를 제시한다. 이 인증서는 종종 자체 서명되기 때문에 일반적으로 사용자 머신의 $USER/.kube/config은 API 서버의 인증서에 대한 루트 인증서를 포함하며, 시스템 기본 루트 인증서 대신 사용된다.
      </description>
    </item>
    
    
  </channel>
</rss>
