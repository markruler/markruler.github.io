<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shell on </title>
    <link>https://cxsu.github.io/categories/shell/</link>
    <description>Recent content in shell on </description>
    <generator>Hugo -- gohugo.io</generator>
    
      <language>ko-kr</language>
    
    
      <managingEditor>imcxsu@gmail.com (Changsu)</managingEditor>
    
    
      <webMaster>imcxsu@gmail.com (Changsu)</webMaster>
    
    
      <copyright>2020 Im Changsu</copyright>
    
    
      <lastBuildDate>Sun, 14 Feb 2021 15:22:00 +0900</lastBuildDate>
    
    
    <atom:link rel="canonical" type="text/html" href="https://cxsu.github.io/categories/shell/" title="" />
    
    
    
    <item>
      <title>최소한의 안전한 Bash 스크립트 템플릿</title>
      <link>https://cxsu.github.io/posts/shell/minimal-safe-bash-script-template/</link>
      <pubDate>Sun, 14 Feb 2021 15:22:00 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/shell/minimal-safe-bash-script-template/</guid>
      <description>
        Maciej Radzikowski가 작성한 Minimal safe Bash script template (2020-12-14)를 번역한 글입니다. 저자의 허락을 받고 번역했습니다.   Bash 스크립트. 거의 모든 사람들이 언젠가 작성해야 하는 것입니다. 하지만 그 중 누구도 &amp;ldquo;맞아요, 저는 Bash 스크립트 작성하는 것을 사랑합니다&amp;quot;라고 말하지 않습니다. 거의 모든 사람들이 Bash 스크립트를 작성할 때 주의를 기울이지 않는 이유죠.
저는 여러분을 Bash 전문가로 만들려는 것이 아닙니다 (저도 전문가는 아닙니다). 다만 스크립트를 더 안전하게 만들어 줄 최소한의 템플릿을 보여 드리겠습니다.
      </description>
    </item>
    
    
    
    <item>
      <title>CS Visualized: 유용한 깃(Git) 명령어</title>
      <link>https://cxsu.github.io/posts/shell/cs-visualized-useful-git-commands/</link>
      <pubDate>Sat, 09 Jan 2021 08:35:00 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/shell/cs-visualized-useful-git-commands/</guid>
      <description>
        리디아 할리(Lydia Hallie, @lydiahallie)가 쓴 CS Visualized: Useful Git Commands를 번역한 글입니다. 저자의 허락을 받고 번역했습니다.   Git이 정말 강력한 도구이긴 하지만, 대다수의 사람들은 끔찍한 악몽 😐 같다는 말도 공감할 거에요. 저는 항상 Git으로 작업할 때 어떤 일이 일어날지 머릿속으로 그려보는 것이 꽤 유용하다는 것을 알았습니다. 특정 명령을 실행할 때 브랜치는 어떻게 상호작용하고, 그것이 히스토리에 어떤 영향을 미칠까요? master에서 하드 리셋하고 origin 리포지터리로 force push한 후, .git 폴더를 rimraf하면 왜 동료가 아우성칠까요?
      </description>
    </item>
    
    
  </channel>
</rss>
