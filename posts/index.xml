<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>https://cxsu.github.io/posts/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    
      <language>ko-kr</language>
    
    
      <managingEditor>imcxsu@gmail.com (Changsu)</managingEditor>
    
    
      <webMaster>imcxsu@gmail.com (Changsu)</webMaster>
    
    
      <copyright>2020 Im Changsu</copyright>
    
    
      <lastBuildDate>Sun, 14 Feb 2021 15:22:00 +0900</lastBuildDate>
    
    
    <atom:link rel="canonical" type="text/html" href="https://cxsu.github.io/posts/" title="" />
    
    
    
    <item>
      <title>최소한의 안전한 Bash 스크립트 템플릿</title>
      <link>https://cxsu.github.io/posts/shell/minimal-safe-bash-script-template/</link>
      <pubDate>Sun, 14 Feb 2021 15:22:00 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/shell/minimal-safe-bash-script-template/</guid>
      <description>
        Maciej Radzikowski가 작성한 Minimal safe Bash script template (2020-12-14)를 번역한 글입니다. 저자의 허락을 받고 번역했습니다.   Bash 스크립트. 대다수의 사람들은 곧 작성해야 하는 것입니다. 하지만 그 중 누구도 &amp;ldquo;맞아요, 저는 Bash 스크립트 작성하는 것을 사랑합니다&amp;quot;라고 말하지 않습니다. 거의 모든 사람들이 Bash 스크립트를 작성할 때 주의를 기울이지 않는 이유죠.
여러분을 Bash 전문가로 만들려고 하진 않습니다 (저도 전문가가 아니기 때문에). 다만 스크립트를 더 안전하게 만들어 줄 최소한의 템플릿을 보여 드리겠습니다.
      </description>
    </item>
    
    
    
    <item>
      <title>쿠버네티스 레벨 트리거링 및 조정</title>
      <link>https://cxsu.github.io/posts/kubernetes/level-triggering-and-reconciliation/</link>
      <pubDate>Wed, 13 Jan 2021 23:05:00 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/kubernetes/level-triggering-and-reconciliation/</guid>
      <description>
        James Bowes(@jrbowes)의 Level Triggering and Reconciliation in Kubernetes를 번역한 글입니다. 저자의 허락을 받고 번역했습니다.     시스템 프로그래밍 개념으로 보는 쿠버네티스가 클러스터를 관리하는 방법 쿠버네티스는 현재 가장 있기 있는 컨테이너 오케스트레이터입니다. 이런 성공의 밑받침은 신뢰성입니다. 모든 소프트웨어에는 버그가 있죠. 그러나 컨테이너를 실행하는 데 있어서 쿠버네티스는 다른 소프트웨어보다 버그가 적습니다.
쿠버네티스는 원하는 수의 컨테이너를 제때에 실행합니다. 그리고 그 숫자를 계속해서 유지하죠. 공식 문서에 따르면 쿠버네티스가 자가 치유(self-healing) 하는 것이라고 말합니다.
      </description>
    </item>
    
    
    
    <item>
      <title>CS Visualized: 유용한 깃(Git) 명령어</title>
      <link>https://cxsu.github.io/posts/shell/cs-visualized-useful-git-commands/</link>
      <pubDate>Sat, 09 Jan 2021 08:35:00 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/shell/cs-visualized-useful-git-commands/</guid>
      <description>
        리디아 할리(Lydia Hallie, @lydiahallie)가 쓴 CS Visualized: Useful Git Commands를 번역한 글입니다. 저자의 허락을 받고 번역했습니다.   Git이 정말 강력한 도구이긴 하지만, 대다수의 사람들은 끔찍한 악몽 😐 같다는 말도 공감할 거에요. 저는 항상 Git으로 작업할 때 어떤 일이 일어날지 머릿속으로 그려보는 것이 꽤 유용하다는 것을 알았습니다. 특정 명령을 실행할 때 브랜치는 어떻게 상호작용하고, 그것이 히스토리에 어떤 영향을 미칠까요? master에서 하드 리셋하고 origin 리포지터리로 force push한 후, .git 폴더를 rimraf하면 왜 동료가 아우성칠까요?
      </description>
    </item>
    
    
    
    <item>
      <title>CS Visualized: CORS</title>
      <link>https://cxsu.github.io/posts/web/cs-visualized-cors/</link>
      <pubDate>Sat, 02 Jan 2021 08:50:00 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/web/cs-visualized-cors/</guid>
      <description>
        리디아 할리(Lydia Hallie, @lydiahallie)가 쓴 CS Visualized: CORS를 번역한 글입니다. 저자의 허락을 받고 번역했습니다.   어쩌다 콘솔에서 &amp;ldquo;fetch 접근이 CORS 정책에 의해 차단되었습니다&amp;quot;라는 커다란 빨간색 오류를 보면 모든 개발자가 짜증을 느낍니다! 😬 임시방편이 몇 가지 있긴 하지만 오늘은 그 어떤 것도 사용하지 않겠습니다! 대신 CORS가 실제로 무엇을 하고 있는지 왜 우리에게 도움이 되는지 알아보도록 하겠습니다. 👏🏼
 ❗️ 이 글에서는 HTTP 기본에 대해 설명하지 않겠습니다. HTTP 요청과 응답에 대해 더 자세히 알고 싶으시다면 제가 얼마 전에 작성한 짧은 글이 있습니다.
      </description>
    </item>
    
    
    
    <item>
      <title>Go로 밑바닥부터 만드는 BitTorrent 클라이언트</title>
      <link>https://cxsu.github.io/posts/go/building-bittorrent-client/</link>
      <pubDate>Mon, 28 Dec 2020 14:46:00 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/go/building-bittorrent-client/</guid>
      <description>
        Jesse Li의 Building a BitTorrent client from the ground up in Go (2020-01-04)를 번역한 글입니다. 저자의 허락을 받고 번역했습니다.   거두절미(tl;dr): The Pirate Bay를 방문하고 mp3 파일이 나타나기까지 무슨 일이 일어나는 것일까요? 이 글에서는 데비안(Debian)을 다운로드할 수 있을 정도의 비트토렌트 프로토콜을 구현할 것입니다. 바로 소스 코드를 보거나 마지막 부분으로 넘어갈 수 있습니다.
비트토렌트(BitTorrent)는 인터넷을 통해 파일을 다운로드하고 배포하기 위한 프로토콜입니다. 다운로더가 중앙 서버와 연결하는 기존의 클라이언트/서버 관계 (예: 넷플릭스에서 영화를 보거나 지금 읽고 있는 웹 페이지를 불러 오는 것)와 달리, 피어(peer) 라고 불리는 비트토렌트 네트워크 참여자들은 서로에게서 파일 조각을 다운로드합니다.
      </description>
    </item>
    
    
    
    <item>
      <title>VIM 에디터 명령어 정리</title>
      <link>https://cxsu.github.io/posts/shell/vim-editor-shortcuts/</link>
      <pubDate>Mon, 07 Dec 2020 00:44:00 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/shell/vim-editor-shortcuts/</guid>
      <description>
        업무 중에 구성 파일을 편집하기 위해 VIM 에디터를 사용할 일이 많은데, VIM 명령어 중에서도 가장 자주 쓰는 명령어를 정리합니다.
 $HOME/.vimrc  &amp;quot; - comment  syntax on &amp;#34;구문강조 사용 colorscheme desert &amp;#34;color 폴더에 colorscheme 설치 필요 set background=dark &amp;#34;하이라이팅 lihgt / dark set autoindent set shiftwidth=2 &amp;#34;autoindent width set ts=2 &amp;#34;tabstop, width set softtabstop=2 set cindent &amp;#34;C Language indent set nu &amp;#34;number set cul &amp;#34;Highlight current line set hls &amp;#34;hlsearch, 검색어 강조 set incsearch &amp;#34;키워드 입력시 점진적 검색 set ic &amp;#34;ignorecase, 검색시 대소문자 무시 set expandtab &amp;#34;탭 대신 스페이스 set laststatus=2 &amp;#34;status line set nowrapscan &amp;#34;검색할 때 문서의 끝에서 처음으로 안돌아감 set visualbell &amp;#34;키를 잘못눌렀을 때 화면 프레시 set ruler &amp;#34;화면 우측 하단에 현재 커서의 위치(줄,칸) 표시 set fileencoding=utf-8 &amp;#34;파일저장인코딩 set tenc=utf-8 &amp;#34;터미널 인코딩 set history=1000 &amp;#34;vi 편집기록 기억갯수 .
      </description>
    </item>
    
    
    
    <item>
      <title>NFV 도커 컨테이너 초심자 가이드</title>
      <link>https://cxsu.github.io/posts/nfv/beginners-guide-docker-container-nfv/</link>
      <pubDate>Mon, 16 Nov 2020 22:40:00 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/nfv/beginners-guide-docker-container-nfv/</guid>
      <description>
        Faisal Khan의 A Beginner’s Guide to Docker Container in NFV를 번역한 글입니다. 저자의 허락을 받고 번역했습니다. 2016년 3월 3일에 쓰여진 글로 현재와 다를 수 있습니다.   새롭게 등장한 도커(Docker) 컨테이너는 NFV를 혁신할 수 있는 잠재력을 가지고 있습니다.
무엇보다 도커 컨테이너는 가상 머신에 비해 가볍고, 적은 오버헤드와 리소스만을 요구하며, 동일한 운영 체제에서 실행되는 애플리케이션을 격리시킬 수 있습니다.
즉, NFV의 VNF(가상 네트워크 기능)를 완전히 격리시켜 도커 컨테이너에서 실행할 수 있다면 가상 머신이 필요 없을 지도 모릅니다.
      </description>
    </item>
    
    
    
    <item>
      <title>쿠버네티스 컴포넌트를 로컬에서 직접 빌드 및 디버깅하기</title>
      <link>https://cxsu.github.io/posts/kubernetes/local-build-kube/</link>
      <pubDate>Sun, 11 Oct 2020 14:48:00 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/kubernetes/local-build-kube/</guid>
      <description>
        직접 빌드해서 사용한다면 쿠버네티스 기능을 확장해서 사용할 수 있다.
 Reference  kubernetes/build/README.md  사용할 명령어 # master 브랜치 git clone --depth 1 https://github.com/kubernetes/kubernetes.git # 특정 브랜치 git clone --depth 1 --single-branch --branch release-1.19 https://github.com/kubernetes/kubernetes.git # cmd 디렉터리에 있는 다른 컴포넌트도 같은 방식으로 빌드할 수 있다. # cmd/kubeadm, kubectl, kubelet, kube-apiserver, kube-proxy, kube-controller-manager, kube-scheduler, ... make all WHAT=cmd/kubectl GOFLAGS=-v # 그냥 간단히 go build 명령도 가능하다. go build -o k cmd/kubectl 빌드 실행 따라가기 Makefile  make 명령을 내릴 루트 디렉터리 Makefile을 보면 아래와 같이 다른 Makefile을 가리킨다.
      </description>
    </item>
    
    
    
    <item>
      <title>마이크로서비스 기반 observability 용어 정리</title>
      <link>https://cxsu.github.io/posts/cloud/monitor-trace-log-metric/</link>
      <pubDate>Fri, 02 Oct 2020 16:24:00 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/cloud/monitor-trace-log-metric/</guid>
      <description>
        observability 관련 용어를 명확히 설명하기 힘들어서 공부하는 중.
Observability  관측성 관찰성 관측 가능성   제어 이론에서 &amp;lsquo;observability&#39;라는 용어는 시스템의 내부 상태와 그에 따른 행동을 시스템에 대한 입력과 출력만 보고 결정할 수 있다면 그 시스템이 관측 가능하다는 것을 나타낸다. - &amp;lt;마스터링 분산 추적&amp;gt; p6
 Logging  CNCF Landscape : Fluentd
Elastic
 Fluentd-Kibana
로그는 시스템 프로세스의 개별 이벤트를 기록하는 것이다. 하지만 각 로그 스트림은 한 서비스의 단일 인스턴스에 대해서만 알려주기 때문에 마이크로서비스에서 전체적인 모니터링을 하기에는 어려움이 있다.
      </description>
    </item>
    
    
    
    <item>
      <title>NFV의 컴퓨팅 도메인에 대한 오해!</title>
      <link>https://cxsu.github.io/posts/nfv/the-misunderstood-facts-about-compute-domain-in-nfv/</link>
      <pubDate>Thu, 01 Oct 2020 22:23:00 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/nfv/the-misunderstood-facts-about-compute-domain-in-nfv/</guid>
      <description>
        Faisal Khan의 The Misunderstood Facts about Compute Domain in NFV!를 번역한 글입니다. 저자의 허락을 받고 번역했습니다.   NFV에 대해 생각해 보세요! 그리고 x86 프로세서를 생각해 보세요&amp;hellip; 둘은 뗄 수 없는 사이입니다. 그렇죠?
프로세서(컴퓨팅 파트)가 아무리 단순하게 들리더라도 NFV의 컴퓨팅 도메인(compute domain)이 노드의 컴퓨팅 프로세서(compute processor)가 같지 않다는 사실을 모르는 사람이 많을 것입니다. 사실&amp;hellip; 훨씬 더 많습니다.
NFV의 &amp;ldquo;Compute Domain&amp;quot;과 &amp;ldquo;Compute Node&amp;quot;는 ETSI 정의에 따르면 동일한 것을 의미하지 않습니다.
      </description>
    </item>
    
    
  </channel>
</rss>
