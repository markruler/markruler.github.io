<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 임창수 블로그</title>
    <link>https://markruler.github.io/posts/</link>
    <description>Recent content in Posts on 임창수 블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <managingEditor>imcxsu@gmail.com (Im Changsu)</managingEditor>
    <webMaster>imcxsu@gmail.com (Im Changsu)</webMaster>
    <copyright>Im Changsu 2020 - 2024</copyright>
    <lastBuildDate>Thu, 05 Sep 2024 21:13:00 +0900</lastBuildDate><atom:link href="https://markruler.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>일상에서의 스왑 메모리 (Swap Memory)</title>
      <link>https://markruler.github.io/posts/os/swap-memory/</link>
      <pubDate>Thu, 05 Sep 2024 21:13:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/os/swap-memory/</guid>
      <description>스왑 메모리는 물리 메모리 용량이 부족할 때 사용되는 가상 메모리 영역이다. 고사양 작업 중 메모리가 부족해서 컴퓨터가 자주 멈춘다면 스왑 메모리를 늘려보는 것도 하나의 방법이다. 이 글은 Ubuntu에서 스왑 메모리를 file로 설정하고, 나의 환경에 맞게 조정하기 위해 모니터링 하는 방법을 설명한다.
먼저 스왑 메모리 설정을 확인한다.
sudo swapon --show 설정되어 있지 않다면 아무것도 출력되지 않는다. Ubuntu 24.04 기준으로는 기본적으로 다음과 같이 /swap.img가 설정되어 있다. 하지만 이 글은 설정되어 있지 않다는 전제로 진행한다.</description>
    </item>
    
    <item>
      <title>IP로 지리적 위치(Geolocation) 찾기</title>
      <link>https://markruler.github.io/posts/network/ip-geolocation/</link>
      <pubDate>Thu, 29 Aug 2024 22:38:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/network/ip-geolocation/</guid>
      <description>현상 약 10ms 응답속도가 예상되는 API에 500~700ms의 응답속도가 발생했다.
원인 해당 API에서는 국가별로 다른 정책을 적용하기 위해 IP로 국가 정보1를 조회하는 기능이 가장 먼저 수행되고 있다. 국가 정보의 출처는 ipapi라는 유료 API 서비스와 IPInfoDB라는 무료 서비스다. 대략적인 코드는 다음과 같다.
@Cacheable(value = CacheName.IPAPI_COUNTRY_CODE, key = &amp;#34;#ipAddress&amp;#34;) public Geolocation findIsoCountryCode(final String ipAddress) { if (isPrivate(ipAddress)) { return Geolocation.korea(); } var ipapi = ipapiFeignClient.findGeolocationByIpAddress(ipAddress, IPAPI_ACCESS_KEY); if (ipapi != null) { return Geolocation.from(ipapi); } var ipInfoDB = ipInfoDBFeignClient.</description>
    </item>
    
    <item>
      <title>Traceparent 헤더로 클라이언트부터 서버까지 추적하기</title>
      <link>https://markruler.github.io/posts/web/traceparent-datadog/</link>
      <pubDate>Thu, 22 Aug 2024 18:00:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/web/traceparent-datadog/</guid>
      <description>개요 모니터링 도구를 확인해보니 며칠동안 특정 기능에 에러가 발생하고 있었다. 해당 에러는 알람 임계점(threshold)보다 낮아서 알람이 발생하지 않았고, 이용자는 버그 리포팅을 하지 않았다. 에러 로그를 확인해보니 서버에서는 유효성 검사를 하지 않았고, 클라이언트 앱에서는 유효하지 않은 파라미터를 전달했다. 서버에서 유효성 검사를 추가할 수 있겠지만, 클라이언트 앱에서의 잘못된 요청(bug)은 원인을 알 수 없었다. 클라이언트 이벤트는 연결되어 있지 않기 때문이다.
또 다른 문제가 있었다. 서버에서는 정상적인 상태 코드와 함께 100ms 정도의 속도로 응답했지만 클라이언트에서는 4초 이상의 지연이 발생하거나 아래와 같은 Akamai 에러 페이지가 응답되었다.</description>
    </item>
    
    <item>
      <title>Docker Compose로 간단하게 Ollama 시작하기</title>
      <link>https://markruler.github.io/posts/ai/ollama-openwebui-docker-compose/</link>
      <pubDate>Wed, 31 Jul 2024 23:48:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/ai/ollama-openwebui-docker-compose/</guid>
      <description>대형 언어 모델 (LLM, Large Language Model) LLM은 방대한 양의 데이터로 사전 학습된 초대형 딥 러닝 모델1이다. 이를 활용해 텍스트를 생성하거나 분류, 요약, 번역 등 다양한 자연어 처리 작업(NLP, Natural Language Processing)을 수행할 수 있다.
일반적으로 700억 개(70 Billion) 이상의 파라미터를 갖는 모델을 LLM이라고 한다. 70억 개(7 Billion) 수준의 파라미터를 갖는 모델은 SLM(Small Language Model)이라고 한다. 이 사이에 중간 규모의 모델은 sLLM(smaller Large Language Model)이라고 한다.
Ollama는 오픈소스 LLM을 쉽게 실행할 수 있게 도와주는 도구다.</description>
    </item>
    
    <item>
      <title>웹 개발자가 알면 유용한 구글 크롬(Google Chrome)의 기능</title>
      <link>https://markruler.github.io/posts/web/google-chrome/</link>
      <pubDate>Mon, 29 Jul 2024 00:51:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/web/google-chrome/</guid>
      <description>Chrome URLs 북마클릿 Bookmarklet  자바스크립트 스니펫 Performance 패널 Network 패널   개발자 도구 DevTools  Chrome 62 Chrome 65 Chrome 66 Chrome 126   참조  Chrome URLs 크롬 URL은 Google Chrome 브라우저에서 설정 페이지나 특정 기능으로 빠르게 접근할 수 있게 해주는 내부 주소다.
 chrome://about/  크롬 URL 목록   chrome://net-internals/#hsts  HSTS 조회 및 비활성화   chrome://inspect#devices  USB로 모바일 디바이스를 연결해서 개발자 도구(DevTools)로 모바일 크롬 앱을 확인할 수 있다.</description>
    </item>
    
    <item>
      <title>APM만큼 중요한 네트워크 모니터링</title>
      <link>https://markruler.github.io/posts/web/apm-network-device-troubleshooting-mistakes/</link>
      <pubDate>Thu, 25 Jul 2024 01:22:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/web/apm-network-device-troubleshooting-mistakes/</guid>
      <description>APM은 애플리케이션 성능 모니터링(Application Performance Monitoring)이다. 우리팀이 사용하는 모니터링 서비스 데이터독(Datadog)은 APM에서 많은 것을 확인할 수 있다. (인프라, 로그, 호스트의 프로세스, JVM 런타임 메트릭, 각 리소스별 레이턴시 등등)
문제 어느날 체감이 될 정도로 서비스의 레이턴시가 높아지고, 정각마다 스파이크 발생했다. 또한 서비스 전체에 영향이 있었다.
분석: 쉽게 간과했던 문제 Oracle Session 히스토리를 남겨서 확인했을 때 DB에 부하를 일으키면서 반복적으로 보이는 느린 쿼리가 없었다. DB 문제는 아니었다.
발생 시점에 반영된 소스 코드를 보니까 Public IP로 요청하던 내부 API를 Private IP로 요청하도록 변경했다.</description>
    </item>
    
    <item>
      <title>네트워크 장비 모니터링을 위한 SNMP</title>
      <link>https://markruler.github.io/posts/network/snmp/</link>
      <pubDate>Tue, 23 Jul 2024 19:08:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/network/snmp/</guid>
      <description>개요 주로 네트워크 장비의 Metric을 확인하는 모니터링 용도로 사용하지만, SNMP를 지원하는 컴퓨팅 머신이라면 모두 활용할 수 있다.
전제 조건  IP 네트워크 환경이 있다. 관리용 서버(SNMP 서버)가 있다. SNMP 프로토콜을 지원하는 기기다.  구성 요소  매니저 (SNMP 서버)  네트워크 감시 장치(서버)에 설치해서 사용하는 소프트웨어   에이전트 (네트워크 기기/서버)  네트워크 기기나 서버가 가진 기기의 상태 정보를 통보하는 기능   SNMP 프로토콜 (TCP/IP)  UDP 패킷에 실어서 주고받으며, 포트 번호는 161(SNMP), 162(TRAP)를 사용함.</description>
    </item>
    
    <item>
      <title>일상에서의 SSH</title>
      <link>https://markruler.github.io/posts/network/ssh/</link>
      <pubDate>Wed, 17 Jul 2024 22:40:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/network/ssh/</guid>
      <description>SSH key 생성 SSH Server  authoized_keys 주로 사용하는 Server 설정   SSH Client  설정 파일 우선 순위 known_hosts 주로 사용하는 Host 설정 Git Local Forward   Password 입력 없이 SSH Key로 Client에서 Server로 접속하기 참조   업무에서 자주 사용하는 SSH 설정을 정리합니다.
 SSH key 생성 # RSA ssh-keygen -t rsa -b 4096 -C &amp;#34;&amp;#34; # ED25519 ssh-keygen -t ed25519 -f $HOME/.ssh/my-ed25519 -C &amp;#34;comment&amp;#34; -N &amp;#34;password&amp;#34; SSH Server SSH 데몬 설정 파일은 /etc/ssh/sshd_config이다.</description>
    </item>
    
    <item>
      <title>서버 to 서버 요청 시 발생한 DNS 레이턴시</title>
      <link>https://markruler.github.io/posts/network/server-to-server-dns/</link>
      <pubDate>Thu, 13 Jun 2024 17:40:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/network/server-to-server-dns/</guid>
      <description>배경 분석: dig 으로 테스트  nameserver 8.8.8.8 로 지정 nameserver는 resolv.conf 설정을 따름 비교   해결: 호스트 파일 수정  배경  약 200ms 응답 속도가 예상되는 API가 불규칙적으로 2s까지 스파이크가 발생함.  해당 API에는 서버 to 서버로 요청하는 기능이 여러 개 포함되어 있음.   환경: On-Premise(IDC) 환경에 애플리케이션 서버는 컨테이너가 아닌 스탠드얼론 호스트로 실행됨.  분석: dig 으로 테스트 nameserver 8.8.8.8 로 지정 dig @8.8.8.8 api.</description>
    </item>
    
    <item>
      <title>Playwright를 사용해서 HTML 페이지를 PDF로 만들기</title>
      <link>https://markruler.github.io/posts/pdf/html-to-pdf/</link>
      <pubDate>Tue, 12 Dec 2023 22:02:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/pdf/html-to-pdf/</guid>
      <description>개요 팀내에서 문서 생성 도구로 PDFmyURL과 OZ e-Form을 사용하고 있다. 보통 이런 외부 솔루션은 테스트 할 때 매우 불편하다.
PDFmyURL은 PDF를 생성하는 2가지 인터페이스가 있다. 하나는 URL을 통해 페이지를 읽어서 PDF를 생성하는 인터페이스고, 하나는 raw HTML, CSS를 직접 전달해서 PDF를 생성하는 인터페이스다. URL 방식은 PDFmyURL 측 서버(서비스 외부)에서 페이지를 조회할 수 있어야 한다. 그래서 private 환경에서는 테스트 할 수가 없다. 그래서 해당 기능들은 운영 환경에서 QA 테스트를 해야 하는 불상사가 생긴다.</description>
    </item>
    
    <item>
      <title>오라클 DBMS SE2 세션 사후 진단</title>
      <link>https://markruler.github.io/posts/db/oracle-dbms-session-diagnosis/</link>
      <pubDate>Sun, 30 Apr 2023 23:58:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/db/oracle-dbms-session-diagnosis/</guid>
      <description>개요 현재 팀에서 구독 중인 Oracle DBMS의 라이센스는 Standard Edition 2의 Processor 라이센스(이하 SE2)다. 이 라이센스는 프로세서 최대 2개, CPU Threads 최대 16개까지 사용 가능하다. 만약 트래픽이 많지 않다면 이 정도 사양으로도 충분하겠지만, 트래픽이 많아지거나 DB를 비효율적으로 사용하게 되면 성능 저하가 발생할 수 있다. 하지만 우리는 성능 저하가 발생했을 때 이를 진단할 방법이 없었다. SE2의 경우 AWR(Automatic Workload Repository), ASH(Active Session History)와 같은 Oracle Diagnostics Pack을 사용할 수 없다.
DB 진단 도구가 필요하다 연산이 오래 걸리는 쿼리의 경우 SQL을 튜닝해서 해결했다.</description>
    </item>
    
    <item>
      <title>Too many open files</title>
      <link>https://markruler.github.io/posts/java/too-many-open-files/</link>
      <pubDate>Mon, 20 Mar 2023 21:58:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/java/too-many-open-files/</guid>
      <description>커버 이미지 출처: Stable diffusion &amp;ldquo;swimming pool lane pattern&amp;rdquo;
 증상 Spring framework로 만든 웹 애플리케이션에서 비동기로 HTTP 요청하는 기능을 개발하고 있었다. 요구 사항을 위해 동시에 1,000개 이상의 요청을 보낼 때가 있는데, Too many open files 에러가 발생했다. 작업 PC(Ubuntu 22.04)에서 문제 없이 동작하던 프로그램이 IDC에 위치한 서버(CentOS 7)에서는 OutOfMemoryError가 발생하면서 동작하지 않았다.
java.lang.OutOfMemoryError: unable to create new native thread ... java.util.concurrent.ExecutionException: com.markruler.RuntimeException: request error ... Caused by: java.net.SocketException: Too many open files SocketException인데 Too many open files?</description>
    </item>
    
    <item>
      <title>Jenkins Workspace 동시성 문제</title>
      <link>https://markruler.github.io/posts/ci/jenkins-workspace-concurrency/</link>
      <pubDate>Mon, 14 Nov 2022 00:38:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/ci/jenkins-workspace-concurrency/</guid>
      <description>개요 Jenkins Pipeline을 사용해서 잡 스케줄러를 실행하기 위해 triggers directive를 사용했다.
pipeline { agent any triggers { cron(&amp;#34;* * * * *&amp;#34;) // HERE  } stages {...} post { always { cleanWs(cleanWhenNotBuilt: false, deleteDirs: true, disableDeferredWipeout: true, notFailBuild: true, patterns: [ [pattern: &amp;#39;.git/**&amp;#39;, type: &amp;#39;EXCLUDE&amp;#39;], [pattern: &amp;#39;.gitignore&amp;#39;, type: &amp;#39;EXCLUDE&amp;#39;], [pattern: &amp;#39;.meta/**&amp;#39;, type: &amp;#39;EXCLUDE&amp;#39;], ] ) } } } 해당 Job은 빌드 간 메타데이터(.meta/)를 공유해야 했기 때문에 cleanWs 플러그인에서도 .git 디렉토리와 함께 삭제되지 않도록 설정했다.</description>
    </item>
    
    <item>
      <title>Tomcat 이해하기</title>
      <link>https://markruler.github.io/posts/java/tomcat/</link>
      <pubDate>Tue, 23 Aug 2022 02:45:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/java/tomcat/</guid>
      <description>Architecture 이미지 출처 - Datadog
&amp;lt;!-- server.xml --&amp;gt; &amp;lt;?xml version=&amp;#39;1.0&amp;#39; encoding=&amp;#39;utf-8&amp;#39;?&amp;gt; &amp;lt;Server port=&amp;#34;8005&amp;#34; shutdown=&amp;#34;SHUTDOWN&amp;#34;&amp;gt; &amp;lt;Listener className=&amp;#34;org.apache.catalina.core.AprLifecycleListener&amp;#34; SSLEngine=&amp;#34;on&amp;#34; /&amp;gt; &amp;lt;Listener className=&amp;#34;org.apache.catalina.core.JasperListener&amp;#34; /&amp;gt; &amp;lt;Listener className=&amp;#34;org.apache.catalina.core.JreMemoryLeakPreventionListener&amp;#34; /&amp;gt; &amp;lt;Listener className=&amp;#34;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&amp;#34; /&amp;gt; &amp;lt;Listener className=&amp;#34;org.apache.catalina.core.ThreadLocalLeakPreventionListener&amp;#34; /&amp;gt; &amp;lt;GlobalNamingResources&amp;gt; &amp;lt;Resource name=&amp;#34;UserDatabase&amp;#34; auth=&amp;#34;Container&amp;#34; type=&amp;#34;org.apache.catalina.UserDatabase&amp;#34; description=&amp;#34;User database that can be updated and saved&amp;#34; factory=&amp;#34;org.apache.catalina.users.MemoryUserDatabaseFactory&amp;#34; pathname=&amp;#34;conf/tomcat-users.xml&amp;#34; /&amp;gt; &amp;lt;/GlobalNamingResources&amp;gt; &amp;lt;Service name=&amp;#34;Catalina&amp;#34;&amp;gt; &amp;lt;Connector port=&amp;#34;8080&amp;#34; protocol=&amp;#34;HTTP/1.1&amp;#34; redirectPort=&amp;#34;8443&amp;#34; connectionTimeout=&amp;#34;20000&amp;#34; /&amp;gt; &amp;lt;Connector port=&amp;#34;8009&amp;#34; protocol=&amp;#34;AJP/1.3&amp;#34; redirectPort=&amp;#34;8443&amp;#34; /&amp;gt; &amp;lt;Engine name=&amp;#34;Catalina&amp;#34; defaultHost=&amp;#34;localhost&amp;#34;&amp;gt; &amp;lt;Realm className=&amp;#34;org.apache.catalina.realm.LockOutRealm&amp;#34;&amp;gt; &amp;lt;Realm className=&amp;#34;org.apache.catalina.realm.UserDatabaseRealm&amp;#34; resourceName=&amp;#34;UserDatabase&amp;#34;/&amp;gt; &amp;lt;/Realm&amp;gt; &amp;lt;Host name=&amp;#34;localhost&amp;#34; appBase=&amp;#34;webapps&amp;#34; unpackWARs=&amp;#34;true&amp;#34; autoDeploy=&amp;#34;true&amp;#34;&amp;gt; &amp;lt;Valve className=&amp;#34;org.</description>
    </item>
    
    <item>
      <title>X Window System</title>
      <link>https://markruler.github.io/posts/gui/x-based-desktop/</link>
      <pubDate>Sun, 21 Aug 2022 23:04:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/gui/x-based-desktop/</guid>
      <description>참조 freedesktop.org 관련 소프트웨어  XDG user directories X Window System GUI 도구 GNOME Desktop  GTK: GIMP ToolKit   KDE: K(ool) Desktop Environment  Qt      참조  ChatGPT freedesktop.org - Wikipedia  freedesktop.org XDG는 X Desktop Group의 약자로, freedesktop.org의 옛 이름이다.
 freedesktop.org hosts the development of free and open source software, focused on interoperability and shared technology for open-source graphical and desktop systems.</description>
    </item>
    
    <item>
      <title>Load Balancer를 활용해서 배포 프로세스를 개선해보자</title>
      <link>https://markruler.github.io/posts/ci/ci-with-lb/</link>
      <pubDate>Wed, 17 Aug 2022 03:44:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/ci/ci-with-lb/</guid>
      <description>개요  기존 프로세스 개선 프로세스 (Continuous Delivery)   도입 과정에서 발생한 문제들  Active Health Check가 필요하다 iptables 서비스를 다시 시작해야 할 때 httpd를 다시 실행해야 할 때   개선의 여지가 있다  SessionRepositoryFilter 에러 페이지 응답 Proxy Akamai 에러 페이지 응답 HAProxy 전환 선언형 배포 (GitOps?)   더 읽을 거리  각주    개요 현재 팀에서 빌드-배포 도구로 Bamboo를 사용하고 있다. 놀랍게도 개발자가 커밋한 소스 코드를 운영 환경에 반영하기까지 14단계의 수동 작업이 필요했다.</description>
    </item>
    
    <item>
      <title>JVM 모니터링</title>
      <link>https://markruler.github.io/posts/java/jvm-monitoring/</link>
      <pubDate>Mon, 23 May 2022 00:09:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/java/jvm-monitoring/</guid>
      <description>모니터링과 타임아웃의 중요성은 아무리 강조해도 지나치지 않는다. 최근 회사에서 아주 느린 API(약 15초)를 발견했는데 분명 매일 트래픽이 발생하는데도 2년동안 방치되고 있었다. 이런 레거시는 유지 보수할 일이 없다면 개발팀에서도 확인하기 어렵다. 사용자가 리포팅해주길 기대하는 것보다 모니터링 도구를 통해 파악하는 것이 좋다. 심지어 굉장히 간단한 문제여서 파악하고 수정하는 데에 1시간도 안걸렸지만 약 15초 걸리던 API를 100ms까지 줄였다.
 먼저 알아두면 좋은 명령어가 있다. jps는 JVM Process Status를 출력하는 명령어로 현재 머신에서 실행중인 JVM의 PID나 실행 옵션을 확인할 때 유용하다.</description>
    </item>
    
    <item>
      <title>모니터링과 타임아웃의 중요성</title>
      <link>https://markruler.github.io/posts/java/java-timeout-monitoring/</link>
      <pubDate>Wed, 11 May 2022 02:19:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/java/java-timeout-monitoring/</guid>
      <description>Observability 용어 정리
 상황  현재팀에서 만들고 있는 애플리케이션은 Spring Framework로 작성하고 있다. 계속 특정 애플리케이션과 함께 여러 애플리케이션에서 후속 장애가 발생했다. 장애가 발생할 때마다 특정 API의 커넥션이 끊기지 않고 오랜 시간 유지되고 있었다.  RedisSystemException은 해당 서버를 죽이면서 Redis와 커넥션이 끊어졌기 때문에 발생한 예외다. 만약 서버를 죽이지 않았다면 끝까지 물고 있었을 것이다.
분석 시간만 보고도 Timeout이 설정되어 있지 않다는 것을 확인할 수 있다. 설정하지 않으면 default 값은 -1 로 타임아웃이 발생하지 않는다.</description>
    </item>
    
    <item>
      <title>CLI 환경에서 소스 코드 관리하기</title>
      <link>https://markruler.github.io/posts/shell/git-commands/</link>
      <pubDate>Wed, 01 Dec 2021 23:28:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/shell/git-commands/</guid>
      <description>Git Internal  차이가 아니라 스냅샷 데이터의 무결성 Git 프로젝트의 세 가지 단계   Git directory  HEAD refs info objects  tree blob (binary large object) commit tag   index Hash Function config   SCM: Source Code Management 포셀린(Porcelain) 명령어  init clone submodule subtree branch  xargs   tag switch  upstream   status add fetch commit merge pull rebase  squash와 fixup   cherry-pick stash  How git stash works   reset restore revert Git으로 버그 찾기  blame bisect   show log  Triple Dot(&amp;hellip;)   reflog: Reference logs diff push   플러밍(Plumbing) 명령어  rev-parse hash-object ls-tree ls-files cat-file write-tree commit-tree read-tree update-index   Advanced  Git Hooks Garbage Collection  Packfiles gc   prune   Git Server  Fork Branch protection rules   참고   Git의 모든 기능을 지원하는 것은 CLI 뿐이다.</description>
    </item>
    
    <item>
      <title>Go 언어로 컨테이너 이미지 빌드하기</title>
      <link>https://markruler.github.io/posts/container/building-container-images-in-go/</link>
      <pubDate>Sun, 28 Feb 2021 12:49:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/container/building-container-images-in-go/</guid>
      <description>Ahmet Alp Balkan의 Building container images in Go를 번역한 글입니다. 저자의 허락을 받고 번역했습니다.   이 글에서는 도커(Docker)를 사용하지 않고 어떻게 OCI 컨테이너 이미지를 만드는지 설명합니다. 이를 위해 go-containerregistry 모듈을 이용해 프로그래밍해서 레이어 및 이미지 매니페스트를 빌드합니다. 예를 들어 nginx 이미지 위에 정적 웹 사이트 콘텐츠를 추가하여 컨테이너 이미지를 빌드하고 Go 프로그램을 사용하는 gcr.io 같은 레지스트리에 푸시하겠습니다.
순서는 다음과 같습니다.
 도커 허브에서 nginx 이미지를 가져 옵니다(pull). 기존 /usr/share/nginx/html 디렉터리를 삭제하는 새 레이어를 만듭니다.</description>
    </item>
    
    <item>
      <title>책 &#34;컨테이너 보안&#34;</title>
      <link>https://markruler.github.io/posts/review/container-security/</link>
      <pubDate>Sun, 21 Feb 2021 11:47:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/review/container-security/</guid>
      <description>한빛미디어의 지원을 받아 작성되었습니다.
 거두절미 컨테이너에 관심 있으신 분이라면 필수 소장 도서입니다. 저도 컨테이너, 쿠버네티스, 도커, 클라우드 관련 도서를 많이 읽어봤지만 컨테이너를 이렇게 간명하고 깊게 다루는 책은 없었습니다. 컨테이너 &amp;lsquo;보안&amp;rsquo;을 설명하기 위해 컨테이너가 어떻게 동작하는지 설명하는 데에 책의 대부분을 차지합니다. 다만 200 페이지에 많은 내용을 압축한 만큼 도해는 많지 않습니다.
먼저 저자의 katacoda (An Introduction to Containers for Go programmers)로 실습해보시거나 발표(What is a container, really? Let&amp;rsquo;s write one in Go from scratch)를 보시길 추천드립니다.</description>
    </item>
    
    <item>
      <title>컨테이너 톺아보기</title>
      <link>https://markruler.github.io/posts/container/container-study-guide/</link>
      <pubDate>Wed, 17 Feb 2021 23:47:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/container/container-study-guide/</guid>
      <description>거두절미 생각보다 컨테이너는 간단한 게 아닙니다. 컨테이너를 쉽게 생성하고 삭제할 수 있었던 이유는 도커와 같은 컨테이너 관리 도구가 복잡한 것들을 꽁꽁 감췄기 때문입니다. 컨테이너를 공부하면 할수록 알아야 할 게 더 늘어나고 있지만 이쯤에서 유익했던 자료들을 모아 보려 합니다.
참고 자료  👍 필수  책 - 컨테이너 보안, Liz Rice katacoda - An Introduction to Containers for Go programmers, Liz Rice   컨테이너  A Practical Introduction to Container Terminology, Scott McCarty Build Your Own Container Using Less than 100 Lines of Go, Julian Friedman Implementing Container Runtime Shim: runc, Ivan Velichko   컨테이너 런타임  리눅스 컨테이너란?</description>
    </item>
    
    <item>
      <title>최소한의 안전한 Bash 스크립트 템플릿</title>
      <link>https://markruler.github.io/posts/shell/minimal-safe-bash-script-template/</link>
      <pubDate>Sun, 14 Feb 2021 15:22:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/shell/minimal-safe-bash-script-template/</guid>
      <description>Maciej Radzikowski가 작성한 Minimal safe Bash script template (2020-12-14)를 번역한 글입니다. 저자의 허락을 받고 번역했습니다.   Bash 스크립트. 거의 모든 사람들이 언젠가 작성해야 하는 것입니다. 하지만 그 중 누구도 &amp;ldquo;맞아요, 저는 Bash 스크립트 작성하는 것을 사랑합니다&amp;quot;라고 말하지 않습니다. 거의 모든 사람들이 Bash 스크립트를 작성할 때 주의를 기울이지 않는 이유죠.
저는 여러분을 Bash 전문가로 만들려는 것이 아닙니다 (저도 전문가는 아닙니다). 다만 스크립트를 더 안전하게 만들어 줄 최소한의 템플릿을 보여 드리겠습니다.</description>
    </item>
    
    <item>
      <title>쿠버네티스 레벨 트리거링 및 조정</title>
      <link>https://markruler.github.io/posts/kubernetes/level-triggering-and-reconciliation/</link>
      <pubDate>Wed, 13 Jan 2021 23:05:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/kubernetes/level-triggering-and-reconciliation/</guid>
      <description>James Bowes(@jrbowes)의 Level Triggering and Reconciliation in Kubernetes를 번역한 글입니다. 저자의 허락을 받고 번역했습니다.     시스템 프로그래밍 개념으로 보는 쿠버네티스가 클러스터를 관리하는 방법 쿠버네티스는 현재 가장 있기 있는 컨테이너 오케스트레이터입니다. 이런 성공의 밑받침은 신뢰성입니다. 모든 소프트웨어에는 버그가 있죠. 그러나 컨테이너를 실행하는 데 있어서 쿠버네티스는 다른 소프트웨어보다 버그가 적습니다.
쿠버네티스는 원하는 수의 컨테이너를 제때에 실행합니다. 그리고 그 숫자를 계속해서 유지하죠. 공식 문서에 따르면 쿠버네티스가 자가 치유(self-healing) 하는 것이라고 말합니다.</description>
    </item>
    
    <item>
      <title>CS Visualized: 유용한 깃(Git) 명령어</title>
      <link>https://markruler.github.io/posts/shell/cs-visualized-useful-git-commands/</link>
      <pubDate>Sat, 09 Jan 2021 08:35:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/shell/cs-visualized-useful-git-commands/</guid>
      <description>리디아 할리(Lydia Hallie, @lydiahallie)가 쓴 CS Visualized: Useful Git Commands를 번역한 글입니다. 저자의 허락을 받고 번역했습니다.   Git이 정말 강력한 도구이긴 하지만, 대다수의 사람들은 끔찍한 악몽 😐 같다는 말도 공감할 거에요. 저는 항상 Git으로 작업할 때 어떤 일이 일어날지 머릿속으로 그려보는 것이 꽤 유용하다는 것을 알았습니다. 특정 명령을 실행할 때 브랜치는 어떻게 상호작용하고, 그것이 히스토리에 어떤 영향을 미칠까요? master에서 reset --hard 하고 origin 리포지터리로 force push한 후, .</description>
    </item>
    
    <item>
      <title>CS Visualized: CORS</title>
      <link>https://markruler.github.io/posts/web/cs-visualized-cors/</link>
      <pubDate>Sat, 02 Jan 2021 08:50:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/web/cs-visualized-cors/</guid>
      <description>리디아 할리(Lydia Hallie, @lydiahallie)가 쓴 CS Visualized: CORS를 번역한 글입니다. 저자의 허락을 받고 번역했습니다.   어쩌다 콘솔에서 &amp;ldquo;fetch 접근이 CORS 정책에 의해 차단되었습니다&amp;quot;라는 커다란 빨간색 오류를 보면 모든 개발자가 짜증을 느낍니다! 😬 임시방편이 몇 가지 있긴 하지만 오늘은 그 어떤 것도 사용하지 않겠습니다! 대신 CORS가 실제로 무엇을 하고 있는지 왜 우리에게 도움이 되는지 알아보도록 하겠습니다. 👏🏼
 ❗️ 이 글에서는 HTTP 기본에 대해 설명하지 않겠습니다. HTTP 요청과 응답에 대해 더 자세히 알고 싶으시다면 제가 얼마 전에 작성한 짧은 글이 있습니다.</description>
    </item>
    
    <item>
      <title>Go로 밑바닥부터 만드는 BitTorrent 클라이언트</title>
      <link>https://markruler.github.io/posts/go/building-bittorrent-client/</link>
      <pubDate>Mon, 28 Dec 2020 14:46:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/go/building-bittorrent-client/</guid>
      <description>Jesse Li의 Building a BitTorrent client from the ground up in Go (2020-01-04)를 번역한 글입니다. 저자의 허락을 받고 번역했습니다.   거두절미(tl;dr): The Pirate Bay를 방문하고 mp3 파일이 나타나기까지 무슨 일이 일어나는 것일까요? 이 글에서는 데비안(Debian)을 다운로드할 수 있을 정도의 비트토렌트 프로토콜을 구현할 것입니다. 바로 소스 코드를 보거나 마지막 부분으로 넘어갈 수 있습니다.
비트토렌트(BitTorrent)는 인터넷을 통해 파일을 다운로드하고 배포하기 위한 프로토콜입니다. 다운로더가 중앙 서버와 연결하는 기존의 클라이언트/서버 관계 (예: 넷플릭스에서 영화를 보거나 지금 읽고 있는 웹 페이지를 불러 오는 것)와 달리, 피어(peer) 라고 불리는 비트토렌트 네트워크 참여자들은 서로에게서 파일 조각을 다운로드합니다.</description>
    </item>
    
    <item>
      <title>VIM 에디터 명령어 정리</title>
      <link>https://markruler.github.io/posts/shell/vim-editor-shortcuts/</link>
      <pubDate>Mon, 07 Dec 2020 00:44:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/shell/vim-editor-shortcuts/</guid>
      <description>업무 중에 구성 파일을 편집하기 위해 VIM 에디터를 사용할 일이 많은데, VIM 명령어 중에서도 가장 자주 쓰는 명령어를 정리한다.
 설정 설정 파일인 ~/.vimrc에서 큰따옴표(&amp;quot;, double quote)가 앞에 있다면 주석(comment)이 된다.
syntax on &amp;#34;구문강조 사용 colorscheme desert &amp;#34;color 폴더에 colorscheme 설치 필요 set background=dark &amp;#34;하이라이팅 lihgt / dark set autoindent set shiftwidth=2 &amp;#34;autoindent width set ts=2 &amp;#34;tabstop, width set softtabstop=2 set cindent &amp;#34;C Language indent set nu &amp;#34;number set cul &amp;#34;Highlight current line set hls &amp;#34;hlsearch, 검색어 강조 set incsearch &amp;#34;키워드 입력시 점진적 검색 set ic &amp;#34;ignorecase, 검색시 대소문자 무시 set expandtab &amp;#34;탭 대신 스페이스 set laststatus=2 &amp;#34;status line set nowrapscan &amp;#34;검색할 때 문서의 끝에서 처음으로 안돌아감 set visualbell &amp;#34;키를 잘못눌렀을 때 화면 프레시 set ruler &amp;#34;화면 우측 하단에 현재 커서의 위치(줄,칸) 표시 set fileencoding=utf-8 &amp;#34;파일저장인코딩 set tenc=utf-8 &amp;#34;터미널 인코딩 set history=1000 &amp;#34;vi 편집기록 기억갯수 .</description>
    </item>
    
    <item>
      <title>NFV 도커 컨테이너 초심자 가이드</title>
      <link>https://markruler.github.io/posts/nfv/beginners-guide-docker-container-nfv/</link>
      <pubDate>Mon, 16 Nov 2020 22:40:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/nfv/beginners-guide-docker-container-nfv/</guid>
      <description>Faisal Khan의 A Beginner&amp;rsquo;s Guide to Docker Container in NFV를 번역한 글입니다. 저자의 허락을 받고 번역했습니다. 2016년 3월 3일에 쓰여진 글로 현재와 다를 수 있습니다.   새롭게 등장한 도커(Docker) 컨테이너는 NFV를 혁신할 수 있는 잠재력을 가지고 있습니다.
무엇보다 도커 컨테이너는 가상 머신에 비해 가볍고, 적은 오버헤드와 리소스만을 요구하며, 동일한 운영 체제에서 실행되는 애플리케이션을 격리시킬 수 있습니다.
즉, NFV의 VNF(가상 네트워크 기능)를 완전히 격리시켜 도커 컨테이너에서 실행할 수 있다면 가상 머신이 필요 없을 지도 모릅니다.</description>
    </item>
    
    <item>
      <title>쿠버네티스 컴포넌트를 로컬에서 직접 빌드 및 디버깅하기</title>
      <link>https://markruler.github.io/posts/kubernetes/local-build-kube/</link>
      <pubDate>Sun, 11 Oct 2020 14:48:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/kubernetes/local-build-kube/</guid>
      <description>직접 빌드해서 사용한다면 쿠버네티스 기능을 확장해서 사용할 수 있다.
 Reference  kubernetes/build/README.md  사용할 명령어 # master 브랜치 git clone --depth 1 https://github.com/kubernetes/kubernetes.git # 특정 브랜치 git clone --depth 1 --single-branch --branch release-1.19 https://github.com/kubernetes/kubernetes.git # cmd 디렉터리에 있는 다른 컴포넌트도 같은 방식으로 빌드할 수 있다. # cmd/kubeadm, kubectl, kubelet, kube-apiserver, kube-proxy, kube-controller-manager, kube-scheduler, ... make all WHAT=cmd/kubectl GOFLAGS=-v # 그냥 간단히 go build 명령도 가능하다. go build -o k cmd/kubectl 빌드 실행 따라가기 Makefile  make 명령을 내릴 루트 디렉터리 Makefile을 보면 아래와 같이 다른 Makefile을 가리킨다.</description>
    </item>
    
    <item>
      <title>Observability 용어 정리</title>
      <link>https://markruler.github.io/posts/cloud/monitor-trace-log-metric/</link>
      <pubDate>Fri, 02 Oct 2020 16:24:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/cloud/monitor-trace-log-metric/</guid>
      <description>Observability  관측성 관찰성 관측 가능성  제어 이론에서 &amp;lsquo;observability&amp;rsquo;라는 용어는 시스템의 내부 상태 변수와 그에 따른 행동을 시스템에 대한 입력과 출력만 보고 결정할 수 있다면 그 시스템이 관측 가능하다는 것을 나타낸다.
Event Logging Fluentd-Kibana
로그는 시스템 프로세스의 개별 이벤트를 기록하는 것이다. 하지만 각 로그 스트림은 단일 인스턴스에 대해서만 알려주기 때문에 마이크로서비스에서 전체적인 모니터링을 하기에는 어려움이 있다.
 Fluentd Elastic Datadog Log Management  Software Tracing Jaeger
사용자의 트래픽이 지나가는 애플리케이션의 전체 스택을 추적한다.</description>
    </item>
    
    <item>
      <title>NFV의 컴퓨팅 도메인에 대한 오해!</title>
      <link>https://markruler.github.io/posts/nfv/the-misunderstood-facts-about-compute-domain-in-nfv/</link>
      <pubDate>Thu, 01 Oct 2020 22:23:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/nfv/the-misunderstood-facts-about-compute-domain-in-nfv/</guid>
      <description>Faisal Khan의 The Misunderstood Facts about Compute Domain in NFV!를 번역한 글입니다. 저자의 허락을 받고 번역했습니다.   NFV에 대해 생각해 보세요! 그리고 x86 프로세서를 생각해 보세요&amp;hellip; 둘은 뗄 수 없는 사이입니다. 그렇죠?
프로세서(컴퓨팅 파트)가 아무리 단순하게 들리더라도 NFV의 컴퓨팅 도메인(compute domain)이 노드의 컴퓨팅 프로세서(compute processor)가 같지 않다는 사실을 모르는 사람이 많을 것입니다. 사실&amp;hellip; 훨씬 더 많습니다.
NFV의 &amp;ldquo;Compute Domain&amp;quot;과 &amp;ldquo;Compute Node&amp;quot;는 ETSI 정의에 따르면 동일한 것을 의미하지 않습니다.</description>
    </item>
    
    <item>
      <title>NFV MANO 초심자 가이드</title>
      <link>https://markruler.github.io/posts/nfv/beginners-guide-to-nfv-mano/</link>
      <pubDate>Wed, 23 Sep 2020 00:58:08 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/nfv/beginners-guide-to-nfv-mano/</guid>
      <description>Faisal Khan의 A Beginner&amp;rsquo;s Guide to NFV Management &amp;amp; Orchestration (MANO)을 번역한 글입니다. 저자의 허락을 받고 번역했습니다.    NFV에서 MANO란? 1. Virtualized Infrastructure Manager (VIM) 2. Virtual Network Function Manager (VNFM) 3. NFV Orchestrator (NFVO)  Resource Orchestration Service Orchestration   4. Repositories  VNF Catalog Network Services (NS) Catalog NFV Instances NFVI Resources   5. Element Management (EM) 6. OSS/BSS 7. Reference Points  NFV가 처음이라면 NFV Management &amp;amp; Orchestration (NFV MANO)를 이해하려고 할 때 두 가지 어려운 점이 있습니다.</description>
    </item>
    
    <item>
      <title>&#34;NFV 아키텍처&#34; 이해를 위한 치트 시트</title>
      <link>https://markruler.github.io/posts/nfv/cheat-sheet-understanding-nfv-architecture/</link>
      <pubDate>Tue, 22 Sep 2020 21:58:08 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/nfv/cheat-sheet-understanding-nfv-architecture/</guid>
      <description>Faisal Khan의 A Cheat Sheet for Understanding &amp;ldquo;NFV Architecture&amp;rdquo;를 번역한 글입니다. 저자의 허락을 받고 번역했습니다.   시간이 없으신가요?
쉽게 이해할 수 있는 NFV 용어/아키텍처에 대한 빠른 업데이트가 필요하신가요?
그렇다면 NFV 아키텍처를 시작하는 데 필요한 모든 정보를 얻을 수 있는 아래 7가지 주요 블록을 보세요. 블록 번호 및 정의를 따라가세요.
1. VNF (Virtual Network Function) VNF는 가상화된 네트워크 요소로 NFV 아키텍처의 기본 블록입니다. 예를 들어 라우터를 가상화하면 라우터 VNF라고 부르고, 다른 예는 기지국(base station) VNF도 있습니다.</description>
    </item>
    
    <item>
      <title>쿠버네티스 API 접근 제어</title>
      <link>https://markruler.github.io/posts/kubernetes/controlling-access-api/</link>
      <pubDate>Thu, 17 Sep 2020 06:58:08 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/kubernetes/controlling-access-api/</guid>
      <description>쿠버네티스 공식 문서를 번역했습니다.  이 페이지는 쿠버네티스 API에 대한 접근 제어의 개요를 제공한다.
사용자는kubectl, 클라이언트 라이브러리 또는 REST 요청을 통해 API에 접근한다. 사용자와 쿠버네티스 서비스 어카운트 모두 API에 접근할 수 있다. 요청이 API에 도달하면, 다음 다이어그램에 설명된 몇 가지 단계를 거친다.
전송 보안 일반적인 쿠버네티스 클러스터에서 API는 443번 포트에서 서비스한다. API 서버는 인증서를 제시한다. 이 인증서는 종종 자체 서명되기 때문에 일반적으로 사용자 머신의 $USER/.kube/config은 API 서버의 인증서에 대한 루트 인증서를 포함하며, 시스템 기본 루트 인증서 대신 사용된다.</description>
    </item>
    
    <item>
      <title>MEC 아키텍처 초심자 가이드</title>
      <link>https://markruler.github.io/posts/mec/beginners-guide-to-mec-architecture/</link>
      <pubDate>Sun, 13 Sep 2020 20:58:08 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/mec/beginners-guide-to-mec-architecture/</guid>
      <description>Faisal Khan의 Beginners Guide to MEC Architecture (Multi-access Edge Computing)을 번역한 글입니다. 저자의 허락을 받고 번역했습니다. 처음에는 MEC가 Mobile Edge Computing 의 줄임말이었지만 현재는 Multi-access Edge Computing 입니다.   MEC 아키텍처 가이드에 오신 것을 환영합니다!
MEC는 5G의 저지연(low-latency) 서비스를 활용하려는 모바일 사업자들에 의해 새로운 투자 물결을 가져올 것입니다. 이는 소비자와 더 가까운 곳(무선 기지국)에서 서비스를 운영하겠다는 것을 의미합니다.
MEC는 서비스 사업자들에게 새로운 서비스 분야와 수익 창출의 수단입니다. 예를 들어 더 빠른 게임 경험, 증강/가상 현실, 커넥티드 카 등이 있습니다.</description>
    </item>
    
  </channel>
</rss>
