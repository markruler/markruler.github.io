<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>임창수</title>
    <link>https://markruler.github.io/</link>
    <description>Recent content on 임창수</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <managingEditor>imcxsu@gmail.com (Im Changsu)</managingEditor>
    <webMaster>imcxsu@gmail.com (Im Changsu)</webMaster>
    <copyright>Im Changsu | Since 2020</copyright>
    <lastBuildDate>Sun, 23 Mar 2025 12:10:00 +0900</lastBuildDate>
    
        <atom:link href="https://markruler.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>책 &#34;컨테이너 보안&#34;</title>
        <link>https://markruler.github.io/posts/review/container-security/</link>
        <pubDate>Sun, 21 Feb 2021 11:47:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/review/container-security/</guid>
        <description>임창수 https://markruler.github.io/posts/review/container-security/ -&lt;blockquote&gt;
&lt;p&gt;한빛미디어의 지원을 받아 작성되었습니다.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;거두절미&#34;&gt;거두절미&lt;/h1&gt;
&lt;p&gt;컨테이너에 관심 있으신 분이라면 필수 소장 도서입니다.
저도 컨테이너, 쿠버네티스, 도커, 클라우드 관련 도서를 많이 읽어봤지만
컨테이너를 이렇게 간명하고 깊게 다루는 책은 없었습니다.
컨테이너 &amp;lsquo;보안&amp;rsquo;을 설명하기 위해 컨테이너가 어떻게 동작하는지
설명하는 데에 책의 대부분을 차지합니다.
다만 200 페이지에 많은 내용을 압축한 만큼 도해는 많지 않습니다.&lt;/p&gt;
&lt;p&gt;먼저 저자의 &lt;a href=&#34;https://www.katacoda.com/lizrice/courses/containers-and-go&#34;&gt;katacoda (An Introduction to Containers for Go programmers)&lt;/a&gt;로
실습해보시거나 &lt;a href=&#34;https://youtu.be/HPuvDm8IC-4&#34;&gt;발표(What is a container, really? Let&amp;rsquo;s write one in Go from scratch)&lt;/a&gt;를 보시길 추천드립니다.&lt;/p&gt;
&lt;h1 id=&#34;저자-리즈-라이스에-대해&#34;&gt;저자 리즈 라이스에 대해&lt;/h1&gt;
&lt;p&gt;저자 리즈 라이스(Liz Rice)는 아쿠아 시큐리티(Aqua Security)의 오픈 소스 엔지니어링
부사장(VP Open Source Engineering)이자 클라우드 네이티브 보안 전문가입니다.
저자는 수년 전부터 꾸준히 &lt;code&gt;컨테이너&lt;/code&gt;와 &lt;code&gt;보안&lt;/code&gt;에 관련된 좋은 글을 내고 발표를 하고 있습니다.
저는 한빛미디어의 &amp;lt;나는 리뷰어다 2021&amp;gt; 리뷰어로 선정되어 책의 리뷰를 쓰게 되었지만
이전부터 저자의 &lt;a href=&#34;https://www.lizrice.com/&#34;&gt;블로그&lt;/a&gt;나
&lt;a href=&#34;https://twitter.com/lizrice&#34;&gt;트위터&lt;/a&gt;를 챙겨볼 정도로 팬이 되었습니다.&lt;/p&gt;
&lt;h1 id=&#34;대상-독자&#34;&gt;대상 독자&lt;/h1&gt;
&lt;p&gt;도커와 쿠버네티스 등 컨테이너 관련 도구들을 조금은 다뤄보셨고 리눅스의
기본 명령어를 알고 계신 분에게 추천드리지만
하나씩 찾아보면서 읽어보겠다 하는 분들도 충분히 읽으실 수 있습니다.
컨테이너 네트워크를 설명할 때 방화벽과 OSI 레이어부터 설명할 정도니까요.&lt;/p&gt;
&lt;h1 id=&#34;번역&#34;&gt;번역&lt;/h1&gt;
&lt;p&gt;컴퓨터 분야 기술 번역으로 꽤 오래 활동하신 류광님이 번역해주셨습니다.
&lt;a href=&#34;https://kubernetes.io/ko/docs/contribute/localization_ko/&#34;&gt;공식 한글화 쿠버네티스 문서&lt;/a&gt;나
한국 커뮤니티에서 쓰이는 용어와 다소 차이가 있어서 자연스럽게 읽히진 않습니다.
사실 영어와 한국어가 정확히 일대일로 치환되는 것은 아니기 때문에
역자의 고민이 묻어나는 부분이긴 하지만 독자에 따라 호불호가 있을 수 있습니다.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;원문&lt;/th&gt;
          &lt;th&gt;번역&lt;/th&gt;
          &lt;th&gt;커뮤니티에서 흔히 볼 수 있는 번역&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;deployment&lt;/td&gt;
          &lt;td&gt;배치본&lt;/td&gt;
          &lt;td&gt;디플로이먼트&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;controller&lt;/td&gt;
          &lt;td&gt;제어기&lt;/td&gt;
          &lt;td&gt;컨트롤러&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;namespace&lt;/td&gt;
          &lt;td&gt;이름공간&lt;/td&gt;
          &lt;td&gt;네임스페이스&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;multitenancy&lt;/td&gt;
          &lt;td&gt;다중 입주&lt;/td&gt;
          &lt;td&gt;멀티테넌시&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;더-읽을-거리&#34;&gt;더 읽을 거리&lt;/h1&gt;
&lt;p&gt;책이 압축되어 있는 만큼 중간중간 별도의 링크를 남겨 더 읽을 거리를
제공합니다. 저도 컨테이너 분야를 공부하면서
&lt;a href=&#34;https://markruler.github.io/posts/container/container-study-guide/&#34;&gt;도움되었던 자료들&lt;/a&gt;을
모으며 번역하고 있습니다. 필요하신 분들에게 도움이 되었으면 좋겠습니다.&lt;/p&gt;
- https://markruler.github.io/posts/review/container-security/ - Im Changsu | Since 2020</description>
        </item>
    
    
    
        <item>
        <title>컨테이너 톺아보기</title>
        <link>https://markruler.github.io/posts/container/container-study-guide/</link>
        <pubDate>Wed, 17 Feb 2021 23:47:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/container/container-study-guide/</guid>
        <description>임창수 https://markruler.github.io/posts/container/container-study-guide/ -&lt;h1 id=&#34;거두절미&#34;&gt;거두절미&lt;/h1&gt;
&lt;p&gt;생각보다 컨테이너는 간단한 게 아닙니다.
컨테이너를 쉽게 생성하고 삭제할 수 있었던 이유는
도커와 같은 컨테이너 관리 도구가 복잡한 것들을 꽁꽁 감췄기 때문입니다.
컨테이너를 공부하면 할수록 알아야 할 게 더 늘어나고 있지만
이쯤에서 유익했던 자료들을 모아 보려 합니다.&lt;/p&gt;
&lt;h1 id=&#34;참고-자료&#34;&gt;참고 자료&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;👍 필수
&lt;ul&gt;
&lt;li&gt;책 - &lt;a href=&#34;https://www.hanbit.co.kr/store/books/look.php?p_code=B8383749156&#34;&gt;컨테이너 보안&lt;/a&gt;, Liz Rice&lt;/li&gt;
&lt;li&gt;katacoda - &lt;a href=&#34;https://www.katacoda.com/lizrice/courses/containers-and-go&#34;&gt;An Introduction to Containers for Go programmers&lt;/a&gt;, Liz Rice&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;컨테이너
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/&#34;&gt;A Practical Introduction to Container Terminology&lt;/a&gt;, Scott McCarty&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/build-a-container-golang/&#34;&gt;Build Your Own Container Using Less than 100 Lines of Go&lt;/a&gt;, Julian Friedman&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://iximiuz.com/en/posts/implementing-container-runtime-shim/&#34;&gt;Implementing Container Runtime Shim: runc&lt;/a&gt;, Ivan Velichko&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;컨테이너 런타임
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.44bits.io/ko/keyword/linux-container&#34;&gt;리눅스 컨테이너란?&lt;/a&gt;, Daegwon Nacyot Kim&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.samsungsds.com/kr/insights/docker.html&#34;&gt;흔들리는 도커(Docker)의 위상: OCI와 CRI 중심으로 재편되는 컨테이너 생태계&lt;/a&gt;, 김준석&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.redhat.com/blog/2019/02/21/podman-and-buildah-for-docker-users/&#34;&gt;Podman and Buildah for Docker users&lt;/a&gt;, Red Hat&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://joejulian.name/post/kubernetes-container-engine-comparison/&#34;&gt;Selecting a container runtime for use with Kubernetes&lt;/a&gt;, Joe Julian&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;컨테이너 오케스트레이션
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.redhat.com/ko/topics/containers/what-is-container-orchestration&#34;&gt;컨테이너 오케스트레이션이란?&lt;/a&gt;, Red Hat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;네임스페이스
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.44bits.io/ko/keyword/linux-namespace&#34;&gt;리눅스 네임스페이스란?&lt;/a&gt;, Daegwon Nacyot Kim&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jake.dothome.co.kr/namespace/&#34;&gt;네임스페이스&lt;/a&gt;, 문영일&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://windsock.io/using-linux-namespaces-to-isolate-processes/&#34;&gt;Using Linux Namespaces to Isolate Processes&lt;/a&gt;, Scott McCarty&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.redhat.com/en/blog/whats-next-containers-user-namespaces&#34;&gt;What’s Next for Containers? User Namespaces&lt;/a&gt;, Scott McCarty&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://netflixtechblog.com/evolving-container-security-with-linux-user-namespaces-afbe3308c082&#34;&gt;Evolving Container Security With Linux User Namespaces&lt;/a&gt;, Netflix&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kinvolk.io/blog/2020/12/improving-kubernetes-and-container-security-with-user-namespaces/&#34;&gt;Improving Kubernetes and container security with user namespaces&lt;/a&gt;, Alban Crequy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;컨트롤 그룹
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/&#34;&gt;Cgroup Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/resource_management_guide/&#34;&gt;Red Hat Resource Management Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tech.kakao.com/2020/06/29/cgroup-driver/&#34;&gt;Cgroup Driver 선택하기&lt;/a&gt;, ssup&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://b.luavis.kr/server/missing-800mb&#34;&gt;사라진 800MB를 찾아서&lt;/a&gt;, Luavis&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;루트 파일세스템
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt&#34;&gt;Linux Kernel Documentation - ramfs, rootfs and initramfs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.44bits.io/ko/post/change-root-directory-by-using-chroot&#34;&gt;chroot를 사용한 프로세스의 루트 디렉터리 격리&lt;/a&gt;, Daegwon Nacyot Kim&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;유니온 마운트
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ahmet.im/blog/building-container-images-in-go/&#34;&gt;Building container images in Go&lt;/a&gt;, Ahmet Alp Balkan (번역중)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.44bits.io/ko/post/how-docker-image-work&#34;&gt;도커 이미지 빌드 원리와 OverlayFS&lt;/a&gt;, Daegwon Nacyot Kim&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.redhat.com/blog/2016/01/13/a-practical-introduction-to-docker-container-terminology/&#34;&gt;A Practical Introduction to Docker Container Terminology&lt;/a&gt;, Scott McCarty / Joe Brockmeier&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.naver.com/alice_k106/221530340759&#34;&gt;투명 셀로판지 이론을 통한 Overlay FS 사용 방법과 유니온 마운트 이해하기&lt;/a&gt;, 최용호&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ssup2.github.io/theory_analysis/Union_Mount_AUFS_Docker_Image_Layer/&#34;&gt;Union Mount, AUFS, Docker Image Layer&lt;/a&gt;, ssup2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/storage/storagedriver/aufs-driver&#34;&gt;Use the AUFS storage driver&lt;/a&gt;, Docker&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lwn.net/Articles/312641/&#34;&gt;Unifying filesystems with union mounts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;캐퍼빌리티
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/capabilities.7.html&#34;&gt;capabilities(7)&lt;/a&gt;, Linux manual page&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://archive.is/20130112225523/http://www.eros-os.org/essays/capintro.html&#34;&gt;What is a Capability, Anyway?&lt;/a&gt;, Jonathan Shapiro&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.epnc.co.kr/news/articleView.html?idxno=43405&#34;&gt;권한을 최소화시키는 리눅스 커널 자격&lt;/a&gt;, 이혜원&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.container-solutions.com/linux-capabilities-why-they-exist-and-how-they-work&#34;&gt;Linux Capabilities: Why They Exist and How They Work&lt;/a&gt;, Adrian Mouat&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.container-solutions.com/linux-capabilities-in-practice&#34;&gt;Linux Capabilities In Practice&lt;/a&gt;, Adrian Mouat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;컨테이너 네트워크
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.44bits.io/ko/post/container-network-1-uts-namespace&#34;&gt;UTS 네임스페이스를 사용한 호스트네임 격리 - 컨테이너 네트워크 기초 1편&lt;/a&gt;, Daegwon Nacyot Kim&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.44bits.io/ko/post/container-network-2-ip-command-and-network-namespace&#34;&gt;ip로 직접 만들어보는 네트워크 네임스페이스와 브리지 네트워크 - 컨테이너 네트워크 기초 2편&lt;/a&gt;, Daegwon Nacyot Kim&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;리눅스-컨테이너&#34;&gt;리눅스 컨테이너&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;A Linux container is a set of 1 or more processes that are isolated from the rest of the system.&amp;rdquo;
&lt;a href=&#34;https://www.redhat.com/en/topics/containers/whats-a-linux-container&#34;&gt;Red Hat&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;리눅스 컨테이너(Linux Container)는 시스템의 다른 부분과 격리된 하나 이상의 프로세스 집합입니다.
즉, 어떤 응용 프로그램이나 프로세스를 일컫는 것이 아니라 그저 리눅스 자원이 격리된 것입니다(‼️).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/container/user-space-vs-kernel-space-simple-container.png&#34; alt=&#34;user-space-vs-kernel-space-simple-container&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;출처: &lt;a href=&#34;https://www.redhat.com/en/blog/architecting-containers-part-1-why-understanding-user-space-vs-kernel-space-matters&#34;&gt;레드햇 블로그 &amp;ldquo;Architecting Containers Part 1: Why Understanding User Space vs. Kernel Space Matters&amp;rdquo; - Scott McCarty (fatherlinux)&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/container/user-space-vs-kernel-space-virtualization-vs-containerization11.png&#34; alt=&#34;user-space-vs-kernel-space-virtualization-vs-containerization&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;출처: &lt;a href=&#34;https://www.redhat.com/en/blog/architecting-containers-part-2-why-user-space-matters&#34;&gt;레드햇 블로그 &amp;ldquo;Architecting Containers Part 2: Why the User Space Matters&amp;rdquo; - Scott McCarty (fatherlinux)&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;컨테이너-엔진&#34;&gt;컨테이너 엔진&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/#h.6yt1ex5wfo3l&#34;&gt;컨테이너 엔진(Container Engine)&lt;/a&gt;은
컨테이너를 관리하기 위한 API나 CLI 도구를 제공하는 소프트웨어입니다.
&lt;code&gt;도커 엔진(docker-ce)&lt;/code&gt;부터 레드햇의 &lt;code&gt;파드맨(Podman)&lt;/code&gt;, 로켓 컴퍼니의 &lt;code&gt;rkt&lt;/code&gt; 등이
컨테이너 엔진에 해당합니다. 컨테이너 엔진은 사용자 입력을 받고, 컨테이너
이미지를 꺼내고(pull), 컨테이너 실행 방법을 명시한 메타데이터를 만든 다음,
컨테이너 런타임에 이 정보들을 전달합니다.&lt;/p&gt;
&lt;h2 id=&#34;컨테이너-런타임&#34;&gt;컨테이너 런타임&lt;/h2&gt;
&lt;p&gt;컨테이너 런타임(Container Runtime)은 루트 파일시스템과 메타 데이터(spec file)를
받아 컨테이너를 실행하는 도구입니다. 가장 일반적으로 쓰이는 런타임은 OCI를 준수하는
&lt;a href=&#34;https://github.com/opencontainers/runc&#34;&gt;&lt;code&gt;runC&lt;/code&gt;&lt;/a&gt;입니다.
흔히 쓰이는 &lt;a href=&#34;https://github.com/containerd/containerd/blob/master/pkg/process/init.go#L64&#34;&gt;&lt;code&gt;컨테이너-디 (containerd)&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&#34;https://github.com/cri-o/cri-o/blob/master/pkg/config/config.go#L38-L40&#34;&gt;&lt;code&gt;크라이-오 (cri-o)&lt;/code&gt;&lt;/a&gt;도 실제로는 &lt;code&gt;runC&lt;/code&gt;에 의존합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/container/docker-containerd-runc.png&#34; alt=&#34;docker-containerd-runc&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;출처: &lt;a href=&#34;https://www.docker.com/blog/oci-release-of-v1-0-runtime-and-image-format-specifications/&#34;&gt;Docker Leads OCI Release of v1.0 Runtime and Image Format Specifications&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;최근 쿠버네티스 블로그에 업로드된 Dockershim 제거에 대한 글&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;로
도커를 못 쓰게 된 건지 혼란이 있었습니다. 도커가 워낙 만능이다보니
&amp;ldquo;컨테이너 엔진==컨테이너 런타임==CRI==도커&amp;quot;라는 오해에서 비롯되었습니다.
자세한 내용은 &lt;a href=&#34;https://subicura.com/k8s/2020/12/19/deprecate-docker&#34;&gt;서비큐라님 글&lt;/a&gt;,
&lt;a href=&#34;https://www.slideshare.net/JoHoon1/the-myths-of-deprecating-docker-in-kubernetes&#34;&gt;조훈님과 심근우님 글&lt;/a&gt;을 참고해주세요.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/container/simple-orchestration-node.png&#34; alt=&#34;simple-orchestration-node&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;출처: &lt;a href=&#34;https://www.katacoda.com/fatherlinux/courses/subsystems/container-internals-lab-2-0-part-1&#34;&gt;Linux Container Internals - Scott McCarty&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;컨테이너-오케스트레이션&#34;&gt;컨테이너 오케스트레이션&lt;/h2&gt;
&lt;p&gt;컨테이너 오케스트레이션(Container Orchestration)은 컨테이너 배포, 관리, 확장, 네트워킹 등을 자동화합니다.
대표적으로 CNCF에서 관리하고 있는 &lt;a href=&#34;https://kubernetes.io/&#34;&gt;쿠버네티스&lt;/a&gt;가 있습니다.&lt;/p&gt;
&lt;h1 id=&#34;컨테이너를-만드는-리눅스-커널-기능&#34;&gt;컨테이너를 만드는 리눅스 커널 기능&lt;/h1&gt;
&lt;p&gt;처음에는 리눅스 커널까지 깊게 알아야 하나 싶었는데
&lt;a href=&#34;https://b.luavis.kr/server/missing-800mb&#34;&gt;사라진 메모리를 찾아가는 Luavis님 글&lt;/a&gt;을
읽어보니 반드시 알아야겠더라구요.
대표적으로 쓰이는 리눅스 커널 기능은 네임스페이스와 컨트롤 그룹 등이 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/container/docker-with-linux-kernel.png&#34; alt=&#34;docker-with-linux-kernel&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;출처: &lt;a href=&#34;https://www.educative.io/edpresso/what-are-kernel-namespaces&#34;&gt;educative&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;네임스페이스-what-you-can-see&#34;&gt;네임스페이스: What you can see&lt;/h2&gt;
&lt;p&gt;리눅스 네임스페이스(Namespace)는 프로세스 실행 시 시스템 자원을 격리시켜주는 기능입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/namespaces.7.html&#34;&gt;&lt;code&gt;namespaces&lt;/code&gt;(7)&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;네임스페이스 유형&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;네임스페이스&lt;/th&gt;
          &lt;th&gt;플래그&lt;/th&gt;
          &lt;th&gt;경로&lt;/th&gt;
          &lt;th&gt;매뉴얼&lt;/th&gt;
          &lt;th&gt;격리 대상&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Cgroup&lt;/td&gt;
          &lt;td&gt;CLONE_NEWCGROUP&lt;/td&gt;
          &lt;td&gt;/proc/[pid]/ns/cgroup&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/cgroup_namespaces.7.html&#34;&gt;cgroup_namespaces(7)&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Cgroup root directory&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;IPC&lt;/td&gt;
          &lt;td&gt;CLONE_NEWIPC&lt;/td&gt;
          &lt;td&gt;/proc/[pid]/ns/ipc&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/ipc_namespaces.7.html&#34;&gt;ipc_namespaces(7)&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;System V IPC, POSIX message queues&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Network&lt;/td&gt;
          &lt;td&gt;CLONE_NEWNET&lt;/td&gt;
          &lt;td&gt;/proc/[pid]/ns/net&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/network_namespaces.7.html&#34;&gt;network_namespaces(7)&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Network devices, stacks, ports, etc.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Mount&lt;/td&gt;
          &lt;td&gt;CLONE_NEWNS&lt;/td&gt;
          &lt;td&gt;/proc/[pid]/ns/mnt&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/mount_namespaces.7.html&#34;&gt;mount_namespaces(7)&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Mount points&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;PID&lt;/td&gt;
          &lt;td&gt;CLONE_NEWPID&lt;/td&gt;
          &lt;td&gt;/proc/[pid]/ns/pid, /proc/[pid]/ns/pid_for_children&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/pid_namespaces.7.html&#34;&gt;pid_namespaces(7)&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Process IDs&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Time&lt;/td&gt;
          &lt;td&gt;CLONE_NEWTIME&lt;/td&gt;
          &lt;td&gt;/proc/[pid]/ns/time, /proc/[pid]/ns/time_for_children&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/time_namespaces.7.html&#34;&gt;time_namespaces(7)&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Boot and monotonic clocks&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;User&lt;/td&gt;
          &lt;td&gt;CLONE_NEWUSER&lt;/td&gt;
          &lt;td&gt;/proc/[pid]/ns/user&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/user_namespaces.7.html&#34;&gt;user_namespaces(7)&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;User and group IDs&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;UTS (UNIX Time Sharing)&lt;/td&gt;
          &lt;td&gt;CLONE_NEWUTS&lt;/td&gt;
          &lt;td&gt;/proc/[pid]/ns/uts&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/uts_namespaces.7.html&#34;&gt;uts_namespaces(7)&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Hostname and NIS domain name&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;네임스페이스 관련 API&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;시스템 호출&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man2/clone.2.html&#34;&gt;clone&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;새로운 자식 프로세스를 생성합니다. 위의 표에서 &lt;code&gt;CLONE_NEW*&lt;/code&gt; 플래그를 인수로 지정합니다.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man2/setns.2.html&#34;&gt;setns&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;시스템 호출한 프로세스가 &lt;code&gt;/proc/[pid]/ns&lt;/code&gt;를 참조해 기존 네임스페이스에 할당됩니다.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man2/unshare.2.html&#34;&gt;unshare&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;시스템 호출한 프로세스가 새로운 네임스페이스에 할당됩니다. 마찬가지로 &lt;code&gt;CLONE_NEW*&lt;/code&gt; 플래그를 인수로 지정합니다.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man2/ioctl.2.html&#34;&gt;ioctl&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;네임스페이스 관련 정보를 찾기 위한 다양한 기능을 제공합니다. 기본적으로 디바이스 제어 API입니다.&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;clone&lt;/code&gt;과 &lt;code&gt;unshare&lt;/code&gt;는 &lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt; &lt;a href=&#34;#%EB%A6%AC%EB%88%85%EC%8A%A4-%EC%BA%90%ED%8D%BC%EB%B9%8C%EB%A6%AC%ED%8B%B0linux-capabilities&#34;&gt;캐퍼빌리티&lt;/a&gt;가 필요합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/namespaces/compatibility-list.rst&#34;&gt;네임스페이스 호환성 문제&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;컨트롤-그룹-what-you-can-use&#34;&gt;컨트롤 그룹: What you can use&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;보통 &lt;code&gt;씨-그룹&lt;/code&gt;이나 &lt;code&gt;컨트롤-그룹&lt;/code&gt;이라고 발음합니다.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;컨트롤 그룹(cgroup, control group)은 프로세스에서 사용 가능한 CPU, 메모리, 네트워크 대역폭, 디스크 I/O 등을
그룹 단위로 제어하는 리눅스 커널의 기능입니다.
원래는 &lt;a href=&#34;https://lwn.net/Articles/236038/&#34;&gt;프로세스 컨테이너&lt;/a&gt;라는
이름으로 제안되었지만, 나중에 컨트롤 그룹이 되었습니다.
컨트롤 그룹은 컨테이너에서만 사용되는 기능은 아니고
리눅스 시스템에서 프로세스 관리를 위해 일반적으로 사용되고 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;control-group-드라이버&#34;&gt;&lt;a href=&#34;https://kubernetes.io/ko/docs/setup/production-environment/container-runtimes/#cgroup-%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B2%84&#34;&gt;Control Group 드라이버&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;cgroupfs&lt;/li&gt;
&lt;li&gt;systemd&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo docker info -f &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;{{json .}}&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;. | .CgroupDriver&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# &amp;#34;cgroupfs&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cgroupfs-컨트롤-그룹-파일-시스템&#34;&gt;cgroupfs (컨트롤 그룹 파일 시스템)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;memory&lt;/code&gt; 중에서도 &lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v1/memory.html#benefits-and-purpose-of-the-memory-controller&#34;&gt;일부분만 갈무리&lt;/a&gt;해봤습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;tasks&lt;/th&gt;
          &lt;th&gt;attach a task(thread) and show list of threads&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;cgroup.procs&lt;/td&gt;
          &lt;td&gt;show list of processes&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;cgroup.event_control&lt;/td&gt;
          &lt;td&gt;an interface for event_fd()&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;memory.stat&lt;/td&gt;
          &lt;td&gt;show various statistics&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;memory.limit_in_bytes&lt;/td&gt;
          &lt;td&gt;set/show limit of memory usage&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;memory.usage_in_bytes&lt;/td&gt;
          &lt;td&gt;show current usage for memory (See 5.5 for details)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;memory.max_usage_in_bytes&lt;/td&gt;
          &lt;td&gt;show max memory usage recorded&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;memory.numa_stat&lt;/td&gt;
          &lt;td&gt;show the number of memory usage per numa node&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;memory.kmem.tcp.max_usage_in_bytes&lt;/td&gt;
          &lt;td&gt;show max tcp buf memory usage recorded&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;hellip;&lt;/td&gt;
          &lt;td&gt;&amp;hellip;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;control-group-v1-컨트롤러&#34;&gt;Control Group v1 컨트롤러&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;컨트롤러&lt;/th&gt;
          &lt;th&gt;커널 설정 옵션&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/blkio-controller.rst&#34;&gt;blkio&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;CONFIG_BLK_CGROUP&lt;/td&gt;
          &lt;td&gt;블록 IO 제어&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/cpuacct.rst&#34;&gt;cpuacct&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;CONFIG_CGROUP_CPUACCT&lt;/td&gt;
          &lt;td&gt;프로세스 그룹 CPU 사용량 계산&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/cpusets.rst&#34;&gt;cpuset&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;CONFIG_CPUSETS&lt;/td&gt;
          &lt;td&gt;특정 CPU나 NUMA 노드 할당&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/devices.rst&#34;&gt;devices&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;CONFIG_CGROUP_DEVICE&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man2/mknod.2.html&#34;&gt;mknod&lt;/a&gt;를 통해 디바이스를 관리할 수 있는지 결정&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/freezer-subsystem.rst&#34;&gt;freezer&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;CONFIG_CGROUP_FREEZER&lt;/td&gt;
          &lt;td&gt;프로세스 일시 정지-재개&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/memory.rst&#34;&gt;memory&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;CONFIG_MEMCG&lt;/td&gt;
          &lt;td&gt;사용중인 프로세스 메모리, 커널 메모리, 스왑 메모리 관리&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/net_cls.rst&#34;&gt;net_cls&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;CONFIG_CGROUP_NET_CLASSID&lt;/td&gt;
          &lt;td&gt;트래픽 제어에 쓰이는 classid 관리&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/net_prio.rst&#34;&gt;net_prio&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;CONFIG_CGROUP_NET_PRIO&lt;/td&gt;
          &lt;td&gt;네트워크 인터페이스 우선순위(priorities) 관리&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/pids.rst&#34;&gt;pids&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;CONFIG_CGROUP_PIDS&lt;/td&gt;
          &lt;td&gt;생성할 수 있는 프로세스 수 관리&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;hellip;&lt;/td&gt;
          &lt;td&gt;&amp;hellip;&lt;/td&gt;
          &lt;td&gt;&amp;hellip;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;control-group-v2&#34;&gt;Control Group v2&lt;/h3&gt;
&lt;p&gt;cgroups v2가 Linux 커널 4.5부터 공식적으로 포함되었습니다. 자세한 내용은
&lt;a href=&#34;https://medium.com/nttlabs/cgroup-v2-596d035be4d7&#34;&gt;Akihiro Suda의 글&lt;/a&gt;과
&lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v2.html&#34;&gt;커널 문서&lt;/a&gt;를
참고해주세요.&lt;/p&gt;
&lt;h2 id=&#34;루트-파일시스템&#34;&gt;루트 파일시스템&lt;/h2&gt;
&lt;p&gt;루트 파일시스템(Root File System)이란 &lt;code&gt;ramfs&lt;/code&gt;나 &lt;code&gt;tmpfs&lt;/code&gt;의 특수 인스턴스로
루트 디렉토리(&lt;code&gt;/&lt;/code&gt;)에 마운트되는 파일 시스템을 말합니다.
&lt;code&gt;rootfs&lt;/code&gt;은 커널이 동작하기 위한 필수 파일들이 있기 때문에 마운트를 해제할 수 없습니다.
&lt;code&gt;chroot&lt;/code&gt;나 &lt;code&gt;pivot_root&lt;/code&gt; 명령어로 &lt;code&gt;rootfs&lt;/code&gt; 경로를 변경(chroot jail)하여 파일 시스템을 격리할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;유니온-마운트&#34;&gt;유니온 마운트&lt;/h2&gt;
&lt;p&gt;유니온 마운트(Union Mount)란 여러 파일 시스템을 단일 포인트로 마운트하는 것을 말합니다.
컨테이너에 필수적인 기능은 아니지만 이미지 레이어 구현에 사용되면서 필수적인
기능으로 자리잡았습니다. 예를 들면 도커가 사용하는 &lt;a href=&#34;https://docs.docker.com/storage/storagedriver/aufs-driver/&#34;&gt;AUFS&lt;/a&gt;, &lt;a href=&#34;https://docs.docker.com/storage/storagedriver/overlayfs-driver/&#34;&gt;OverlayFS&lt;/a&gt; 등이 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/container/aufs-layers.jpg&#34; alt=&#34;aufs&#34;&gt;&lt;/p&gt;
&lt;p&gt;출처: &lt;a href=&#34;https://docs.docker.com/storage/storagedriver/aufs-driver/&#34;&gt;Use the AUFS storage driver - docker docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/container/overlay-constructs.jpg&#34; alt=&#34;overlay-constructs&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;출처: &lt;a href=&#34;https://docs.docker.com/storage/storagedriver/overlayfs-driver/#how-the-overlay-driver-works&#34;&gt;Use the OverlayFS storage driver - docker docs&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;리눅스-캐퍼빌리티&#34;&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/capabilities.7.html&#34;&gt;리눅스 캐퍼빌리티&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Capability-based_security#POSIX_capabilities&#34;&gt;POSIX capabilities&lt;/a&gt;
개념으로 루트 프로세스 권한을 세부적으로 제어하기 위한 속성입니다. &amp;lsquo;자격&amp;rsquo;, &amp;lsquo;능력&amp;rsquo; 등으로 번역됩니다.&lt;/p&gt;
&lt;p&gt;캐퍼빌리티가 없을 때 프로세스는 두 가지로만 나뉘었습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(User ID가 0인, superuser라 불리는) 루트 사용자가 소유한 특권(privileged) 프로세스&lt;/li&gt;
&lt;li&gt;(User ID가 0이 아닌) 일반 사용자가 소유한 비특권(unprivileged) 프로세스.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 중 루트 권한을 세분화해서 프로세스마다 다르게 적용할 수 있도록 만든 기능이 바로 리눅스 캐퍼빌리티입니다.
컨테이너 런타임에서 루트 권한 일부분만 필요할 경우 리눅스 캐퍼빌리티를 사용합니다.&lt;/p&gt;
&lt;h1 id=&#34;샌드박싱-솔루션&#34;&gt;샌드박싱 솔루션&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;샌드박싱이란? 자원 접근이 제한되도록 응용 프로그램을 격리하는 것 - &amp;lt;컨테이너 보안&amp;gt; 참조&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;seccomp&lt;/li&gt;
&lt;li&gt;AppArmor&lt;/li&gt;
&lt;li&gt;SELinux&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/blog/2020/12/02/dont-panic-kubernetes-and-docker/&#34;&gt;Don&amp;rsquo;t Panic: Kubernetes and Docker&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/blog/2020/12/02/dockershim-faq/&#34;&gt;Dockershim Deprecation FAQ&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
- https://markruler.github.io/posts/container/container-study-guide/ - Im Changsu | Since 2020</description>
        </item>
    
    
    
        <item>
        <title>최소한의 안전한 Bash 스크립트 템플릿</title>
        <link>https://markruler.github.io/posts/shell/minimal-safe-bash-script-template/</link>
        <pubDate>Sun, 14 Feb 2021 15:22:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/shell/minimal-safe-bash-script-template/</guid>
        <description>임창수 https://markruler.github.io/posts/shell/minimal-safe-bash-script-template/ -&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/radzikowski_m&#34;&gt;Maciej Radzikowski&lt;/a&gt;가 작성한 &lt;a href=&#34;https://betterdev.blog/minimal-safe-bash-script-template/&#34;&gt;Minimal safe Bash script template (2020-12-14)&lt;/a&gt;를 번역한 글입니다.&lt;/li&gt;
&lt;li&gt;저자의 허락을 받고 번역했습니다.&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;Bash 스크립트.
거의 모든 사람들이 언젠가 작성해야 하는 것입니다.
하지만 그 중 누구도 &amp;ldquo;맞아요, 저는 Bash 스크립트 작성하는 것을 사랑합니다&amp;quot;라고 말하지 않습니다.
거의 모든 사람들이 Bash 스크립트를 작성할 때 주의를 기울이지 않는 이유죠.&lt;/p&gt;
&lt;p&gt;저는 여러분을 Bash 전문가로 만들려는 것이 아닙니다 (저도 전문가는 아닙니다).
다만 스크립트를 더 안전하게 만들어 줄 최소한의 템플릿을 보여 드리겠습니다.
저에게 감사해하실 필요는 없어요. 여러분의 미래가 여러분에게 감사해할 것입니다.&lt;/p&gt;
&lt;h1 id=&#34;bash에서-스크립팅-하는-이유&#34;&gt;Bash에서 스크립팅 하는 이유&lt;/h1&gt;
&lt;p&gt;Bash 스크립팅에 대한 가장 좋은 설명이 최근 저의 트위터 피드에 나타났습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;자전거 타는 거랑 비슷해&amp;quot;의 반대말은 &amp;ldquo;bash 프로그래밍이랑 비슷해&amp;quot;이다.&lt;br&gt;
몇 번을 했던지 상관없이 매번 다시 배워야 한다는 말.&lt;br&gt;
&lt;br&gt;
- &lt;a href=&#34;https://twitter.com/JakeWharton/status/1334177665356587008&#34;&gt;Jake Wharton&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;하지만 Bash는 널리 사랑받는 언어인 JavaScript처럼 쉽게 사라지지 않을 것입니다.
주요 언어가 되지 않길 바라더라도 Bash는 항상 우리와 가까운 곳에 있습니다.&lt;/p&gt;
&lt;p&gt;Bash는 &lt;a href=&#34;https://www.quora.com/Is-Bash-considered-the-lingua-franca-of-shells/answer/Paul-Reiber&#34;&gt;셸(shell) 왕좌를 물려받았고&lt;/a&gt;
Docker 이미지를 포함한 거의 모든 Linux에서 찾을 수 있습니다.
이는 대부분의 백엔드가 실행되는 환경입니다.
따라서 서버 애플리케이션 시작, CI/CD 또는 통합 테스트 실행을
스크립팅해야 하는 경우 Bash를 사용하면 됩니다.&lt;/p&gt;
&lt;p&gt;몇 가지 명령을 이어 붙이고, 출력을 다른 명령으로 전달하고,
실행 파일을 시작하기 위해 Bash는 가장 쉽고 가장 기본적인 솔루션입니다.
더 크고 복잡한 스크립트를 다른 언어로 작성하는 것은 매우 타당한 일이지만
Python, Ruby, fish 또는 다른 인터프리터가 어디에서나 사용할 수 있을 것이라고 기대할 수는 없습니다.
또한 일부 프로덕션 서버, Docker 이미지 또는 CI 환경에 이 언어들을 추가하려면
두 번 생각해보고 또 다시 한 번 생각해 보아야 합니다.&lt;/p&gt;
&lt;p&gt;하지만 Bash는 완벽하지 않습니다.
문법은 최악이고 에러 핸들링도 어렵습니다.
우리가 해결해야 하는 지뢰가 널려 있죠.&lt;/p&gt;
&lt;h1 id=&#34;bash-스크립트-템플릿&#34;&gt;Bash 스크립트 템플릿&lt;/h1&gt;
&lt;p&gt;거두절미하고 템플릿은 다음과 같습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set -Eeuo pipefail
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;trap cleanup SIGINT SIGTERM ERR EXIT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;script_dir&lt;/span&gt;=&lt;span style=&#34;color:#f00&#34;&gt;$(&lt;/span&gt;cd &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;$(&lt;/span&gt;dirname &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;BASH_SOURCE&lt;/span&gt;[0]&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; &amp;amp;&amp;gt;/dev/null &amp;amp;&amp;amp; pwd -P&lt;span style=&#34;color:#f00&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;usage() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cat &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;Usage: $(basename &amp;#34;${BASH_SOURCE[0]}&amp;#34;) [-h] [-v] [-f] -p param_value arg1 [arg2...]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;Script description here.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;Available options:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;-h, --help      Print this help and exit
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;-v, --verbose   Print script debug info
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;-f, --flag      Some flag description
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;-p, --param     Some param description
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  exit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cleanup() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  trap - SIGINT SIGTERM ERR EXIT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;# script cleanup here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setup_colors() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; [[ -t &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; ]] &amp;amp;&amp;amp; [[ -z &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;NO_COLOR&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; ]] &amp;amp;&amp;amp; [[ &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;TERM&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; != &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;dumb&amp;#34;&lt;/span&gt; ]]; &lt;span style=&#34;color:#f00&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eedd82&#34;&gt;NOFORMAT&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;RED&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;31m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;GREEN&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;32m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;ORANGE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;33m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;BLUE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;34m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;PURPLE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;35m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;CYAN&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;36m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;YELLOW&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[1;33m&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eedd82&#34;&gt;NOFORMAT&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;RED&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;GREEN&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;ORANGE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;BLUE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;PURPLE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;CYAN&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;YELLOW&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msg() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  echo &amp;gt;&amp;amp;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; -e &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;1&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;die() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local &lt;span style=&#34;color:#eedd82&#34;&gt;msg&lt;/span&gt;=&lt;span style=&#34;color:#eedd82&#34;&gt;$1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local &lt;span style=&#34;color:#eedd82&#34;&gt;code&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;2&lt;/span&gt;-1&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#0f0&#34;&gt;# default exit status 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  msg &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$msg&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  exit &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$code&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parse_params() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;# default values of variables set from params&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eedd82&#34;&gt;flag&lt;/span&gt;=&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eedd82&#34;&gt;param&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;while&lt;/span&gt; :; &lt;span style=&#34;color:#f00&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;1&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; in
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -h | --help) usage ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -v | --verbose) set -x ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    --no-color) &lt;span style=&#34;color:#eedd82&#34;&gt;NO_COLOR&lt;/span&gt;=&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -f | --flag) &lt;span style=&#34;color:#eedd82&#34;&gt;flag&lt;/span&gt;=&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ;; &lt;span style=&#34;color:#0f0&#34;&gt;# example flag&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -p | --param) &lt;span style=&#34;color:#0f0&#34;&gt;# example named parameter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eedd82&#34;&gt;param&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;2&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      shift
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -?*) die &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Unknown option: &lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    *) break ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    shift
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eedd82&#34;&gt;args&lt;/span&gt;=(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$@&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;# check required params and arguments&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [[ -z &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;param&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; ]] &amp;amp;&amp;amp; die &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Missing required parameter: param&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [[ &lt;span style=&#34;color:#87ceeb&#34;&gt;${#&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;args&lt;/span&gt;[@]&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt; -eq &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; ]] &amp;amp;&amp;amp; die &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Missing script arguments&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parse_params &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$@&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setup_colors
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# script logic here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msg &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;RED&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;Read parameters:&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;NOFORMAT&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msg &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;- flag: &lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;flag&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msg &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;- param: &lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msg &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;- arguments: &lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;args&lt;/span&gt;[*]-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;너무 길지 않게 만들려는 생각이었습니다.
저는 스크립트 로직때문에 500줄이나 스크롤하고 싶지 않습니다.
동시에 어떤 스크립트에서든 좋은 기반 스크립트가 되었으면 했습니다.
하지만 Bash는 의존성 관리라는 것이 없어서 쉽게 만들 수는 없었습니다.&lt;/p&gt;
&lt;p&gt;한 가지 해결책은 처음부터 모든 보일러 플레이트 및 유틸리티
함수(function)가 있는 별도의 스크립트를 같이 실행시키는 것입니다.
이 방식의 단점은 &amp;ldquo;간단한 Bash 스크립트&amp;quot;라는 의도를 잃어버리고 항상
별도의 파일을 달고 다녀야 한다는 것입니다. 그래서 저는 템플릿을
가능한 한 짧게 만들기 위해 필수적인 것만을 템플릿에 넣자고 결정했습니다.&lt;/p&gt;
&lt;p&gt;이제 좀 더 자세히 살펴보겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;bash-선택하기&#34;&gt;Bash 선택하기&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;스크립트는 기본적으로 셔뱅(shebang)&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;으로 시작합니다.
&lt;a href=&#34;https://stackoverflow.com/questions/21612980/why-is-usr-bin-env-bash-superior-to-bin-bash&#34;&gt;최적의 호환성&lt;/a&gt;을 위해
&lt;code&gt;/bin/bash&lt;/code&gt;가 아닌 &lt;code&gt;/usr/bin/env&lt;/code&gt;를 참조합니다.
링크된 StackOverflow 질문의 답변을 읽어 보시면
이 경우에도 오류가 발생할 수는 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;빠르게-실패하기&#34;&gt;빠르게 실패하기&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set -Eeuo pipefail
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;set&lt;/code&gt; 명령어는 스크립트 실행 옵션을 변경합니다.
예를 들면 &lt;strong&gt;기본적으로 Bash는 일부 명령이 실패하는 것과 상관없이&lt;/strong&gt;
0 외의 종료 상태 코드를 반환합니다. 다음 단계로 잘 넘어갑니다.
이제 다음과 같이 짧은 스크립트를 살펴보겠습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;&lt;/span&gt;cp important_file ./backups/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm important_file
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기서 &lt;code&gt;backups&lt;/code&gt; 디렉토리가 존재하지 않을 경우 어떻게 될까요?
정확히 말하면 콘솔에 오류 메시지가 표시되지만
응답하기 전에 두 번째 명령에 의해 파일이 이미 제거됩니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set -Eeuo pipefail&lt;/code&gt; 옵션들이 정확하게 무엇을 바꾸는지,
어떻게 사용자를 보호할 것인지에 대한 자세한 내용은
&lt;a href=&#34;https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/&#34;&gt;몇 년 동안 제 북마크에 있는 글&lt;/a&gt;을 참조해주세요.&lt;/p&gt;
&lt;p&gt;하지만 &lt;a href=&#34;https://www.reddit.com/r/commandline/comments/g1vsxk/the_first_two_statements_of_your_bash_script/fniifmk/&#34;&gt;이러한 옵션 설정에 대해 몇 가지 반론&lt;/a&gt;이 있다는 것을 알고 있어야 합니다.&lt;/p&gt;
&lt;h2 id=&#34;위치-가져오기&#34;&gt;위치 가져오기&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;script_dir&lt;/span&gt;=&lt;span style=&#34;color:#f00&#34;&gt;$(&lt;/span&gt;cd &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;$(&lt;/span&gt;dirname &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;BASH_SOURCE&lt;/span&gt;[0]&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; &amp;amp;&amp;gt;/dev/null &amp;amp;&amp;amp; pwd -P&lt;span style=&#34;color:#f00&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 줄은 스크립트가 위치한 디렉토리를 지정하는 데 가장 효과적이며, &lt;del&gt;여기에 &lt;code&gt;cd&lt;/code&gt;를 붙입니다.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;스크립트가 작업 디렉토리에 있다면 스크립트가 상대 경로로 동작하며
파일을 복사하고 명령어를 실행합니다.
동일한 디렉토리에서 스크립트를 실행하는 한 그렇습니다.&lt;/p&gt;
&lt;p&gt;하지만 CI 구성에서 다음과 같은 스크립트를 실행한다면&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/ci/project/script.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 스크립트는 프로젝트 디렉토리가 아니라 CI 도구의 다른 작업 디렉토리에서 동작합니다.
스크립트를 실행하기 전에 해당 디렉토리로 이동함으로써 고칠 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /opt/ci/project &amp;amp;&amp;amp; ./script.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그래도 스크립트 쪽에서 해결하는 게 훨씬 좋습니다.
스크립트가 일부 파일을 읽거나 동일한 디렉터리에서
다른 프로그램을 실행하려는 경우 아래처럼 호출합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$script_dir&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;/my_file&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;동시에 스크립트는 작업 디렉토리 위치를 변경하지 않습니다.
스크립트가 다른 디렉토리에서 실행되어 사용자가 일부 파일에 대한
상대 경로를 제공하더라도 해당 스크립트를 읽을 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;정리하기&#34;&gt;정리하기&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;trap cleanup SIGINT SIGTERM ERR EXIT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cleanup() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  trap - SIGINT SIGTERM ERR EXIT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;# script cleanup here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;스크립트의 &lt;code&gt;trap&lt;/code&gt;을 &lt;code&gt;finally&lt;/code&gt; 블록으로 생각해 보세요.
보통 오류나 외부 신호에 의해 스크립트가 끝나면 &lt;code&gt;cleanup()&lt;/code&gt; 함수가 실행됩니다.
예를 들어 스크립트가 생성한 모든 임시 파일들을 제거할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cleanup()&lt;/code&gt;은 끝날 때뿐만 아니라 스크립트가 특정 부분만 제거할 수도 있다는 것을 기억하세요.
제거하려는 자원이 반드시 있어야 하는 것은 아닙니다.&lt;/p&gt;
&lt;h2 id=&#34;도움되는-도움말-표시하기&#34;&gt;도움되는 도움말 표시하기&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;usage() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cat &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;Usage: $(basename &amp;#34;${BASH_SOURCE[0]}&amp;#34;) [-h] [-v] [-f] -p param_value arg1 [arg2...]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;Script description here.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  exit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;usage()&lt;/code&gt; 함수가 상대적으로 스크립트 상단에 있을 경우 다음 두 가지 방식으로 동작합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든 옵션을 아는 것도 아니면서 스크립트 전체를 보고 싶지 않은 사용자를 위해 &lt;code&gt;도움말을 표시합니다&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;스크립트 수정 시 &lt;code&gt;최소한의 문서&lt;/code&gt;입니다. (예: 2주 후, 무엇을 작성했는지 떠올릴 필요가 없습니다)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기에 모든 함수를 기록해야 한다고 말하는 것은 아닙니다.
그러나 짧고 적절한 스크립트 사용법(usage) 메시지는 필수 항목입니다.&lt;/p&gt;
&lt;h2 id=&#34;적절한-메시지-출력하기&#34;&gt;적절한 메시지 출력하기&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setup_colors() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; [[ -t &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; ]] &amp;amp;&amp;amp; [[ -z &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;NO_COLOR&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; ]] &amp;amp;&amp;amp; [[ &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;TERM&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; != &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;dumb&amp;#34;&lt;/span&gt; ]]; &lt;span style=&#34;color:#f00&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eedd82&#34;&gt;NOFORMAT&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;RED&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;31m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;GREEN&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;32m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;ORANGE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;33m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;BLUE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;34m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;PURPLE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;35m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;CYAN&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;36m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;YELLOW&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[1;33m&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eedd82&#34;&gt;NOFORMAT&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;RED&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;GREEN&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;ORANGE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;BLUE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;PURPLE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;CYAN&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;YELLOW&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msg() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  echo &amp;gt;&amp;amp;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; -e &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;1&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;먼저 텍스트에서 색상을 사용하지 않으려면 &lt;code&gt;setup_colors()&lt;/code&gt; 함수를 지우세요.
하지만 저는 매번 코드를 구글에다 검색하지 않는다면
색상을 더 자주 사용할 수 있다는 것을 알기 때문에 지우지 않습니다.&lt;/p&gt;
&lt;p&gt;둘째로, 이러한 &lt;strong&gt;색상은 &lt;code&gt;msg()&lt;/code&gt; 함수에만 사용하도록 되어 있고&lt;/strong&gt; &lt;code&gt;echo&lt;/code&gt; 명령에는 사용되지 않습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;msg()&lt;/code&gt; 함수는 스크립트 출력을 제외한 모든 것을 출력하는 데 사용됩니다.
여기에는 오류뿐만 아니라 모든 로그와 메시지가 포함됩니다.
&lt;a href=&#34;https://medium.com/@jdxcode/12-factor-cli-apps-dd3c227a0e46&#34;&gt;12 팩터 CLI 앱&lt;/a&gt;이라는 좋은 글을 인용합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;요컨대 stdout은 출력용이고 stderr는 메시지용입니다.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://jdxcode.com/&#34;&gt;Jeff Dickey&lt;/a&gt;, who &lt;a href=&#34;https://github.com/oclif/oclif/graphs/contributors&#34;&gt;knows a little&lt;/a&gt; about &lt;a href=&#34;https://github.com/heroku/cli/graphs/contributors&#34;&gt;building CLI apps&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;그래서 대부분의 경우 &lt;code&gt;stdout&lt;/code&gt;에 색상을 사용하지 않는 것이 좋습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;msg()&lt;/code&gt;로 출력된 메시지는 &lt;code&gt;stderr&lt;/code&gt; 스트림으로 전송되며 색상과 같은 특수 시퀀스를 지원합니다.
또한 &lt;code&gt;stderr&lt;/code&gt; 출력이 대화형 터미널이 아니거나 &lt;a href=&#34;https://no-color.org/&#34;&gt;표준 파라미터 중 하나&lt;/a&gt;가 전달되면 색상이 비활성화됩니다.&lt;/p&gt;
&lt;p&gt;사용법:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msg &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;This is a &lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;RED&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;very important&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;NOFORMAT&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt; message, but not a script output value!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;stderr&lt;/code&gt;가 대화형 터미널이 아닐 때 어떻게 작동하는지 확인하려면 스크립트에 위와 같은 줄을 추가하세요.
그런 다음 &lt;code&gt;stderr&lt;/code&gt;를 &lt;code&gt;stdout&lt;/code&gt;으로 리다이렉션하고 cat에 보내줍니다(pipe).
파이프가 동작하면 출력이 더 이상 터미널로 직접 전송되지 않고 다음 명령으로
전송되므로 이제 색상을 사용하지 않도록 설정해야 합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./test.sh 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; | cat
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This is a very important message, but not a script output value!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;모든-파라미터-파싱&#34;&gt;모든 파라미터 파싱&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parse_params() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;# default values of variables set from params&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eedd82&#34;&gt;flag&lt;/span&gt;=&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eedd82&#34;&gt;param&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;while&lt;/span&gt; :; &lt;span style=&#34;color:#f00&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;1&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; in
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -h | --help) usage ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -v | --verbose) set -x ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    --no-color) &lt;span style=&#34;color:#eedd82&#34;&gt;NO_COLOR&lt;/span&gt;=&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -f | --flag) &lt;span style=&#34;color:#eedd82&#34;&gt;flag&lt;/span&gt;=&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ;; &lt;span style=&#34;color:#0f0&#34;&gt;# example flag&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -p | --param) &lt;span style=&#34;color:#0f0&#34;&gt;# example named parameter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eedd82&#34;&gt;param&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;2&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      shift
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -?*) die &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Unknown option: &lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    *) break ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    shift
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eedd82&#34;&gt;args&lt;/span&gt;=(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$@&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;# check required params and arguments&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [[ -z &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;param&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; ]] &amp;amp;&amp;amp; die &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Missing required parameter: param&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [[ &lt;span style=&#34;color:#87ceeb&#34;&gt;${#&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;args&lt;/span&gt;[@]&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt; -eq &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; ]] &amp;amp;&amp;amp; die &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Missing script arguments&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;스크립트에서 파라미터로 만들어야 하는 것이 있다면, 저는 보통 그렇게 합니다.
스크립트가 한 곳에서만 사용되더라도 마찬가지입니다.
이렇게 하면 복사 및 재사용이 쉬워지며, 이 작업은 종종 더 빠릅니다.
또한 하드 코딩이 필요한 부분이 있더라도 일반적으로 Bash 스크립트보다 더 높은 수준입니다.&lt;/p&gt;
&lt;p&gt;플래그(flags), 지정된 파라미터(named parameters, keyword arguments) 및 위치 인자(positional arguments)라는
&lt;a href=&#34;https://betterdev.blog/command-line-arguments-anatomy-explained/&#34;&gt;세 가지 주요 CLI 파라미터 유형&lt;/a&gt;이 있습니다&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.
&lt;code&gt;parse_params()&lt;/code&gt; 함수는 모두 지원합니다.&lt;/p&gt;
&lt;p&gt;여기서 처리되지 않는 유일한 공통 파라미터 패턴은
&lt;a href=&#34;https://betterdev.blog/command-line-arguments-anatomy-explained/#flags_and_named_arguments&#34;&gt;여러 개의 단일 문자 플래그를 연결하는&lt;/a&gt; 것입니다.
&lt;code&gt;-a -b&lt;/code&gt;처럼 두 개의 플래그가 아닌 &lt;code&gt;-ab&lt;/code&gt;로 전달하려면 추가 코드가 필요합니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;while&lt;/code&gt; 루프는 파라미터들을 수동으로 파싱하는 방법입니다.
다른 모든 언어에서는 &lt;a href=&#34;https://docs.python.org/3/library/argparse.html&#34;&gt;내장 파서&lt;/a&gt;
또는 &lt;a href=&#34;https://yargs.js.org/&#34;&gt;사용 가능한 라이브러리&lt;/a&gt;를 사용해야 합니다.
하지만 우리가 사용하려는 것은 Bash입니다.&lt;/p&gt;
&lt;p&gt;템플릿에 플래그(&lt;code&gt;-f&lt;/code&gt;)와 지정된 파라미터(&lt;code&gt;-p&lt;/code&gt;)가 예시로 있습니다.
다른 파라미터를 추가하기 위해서는 변경하거나 복사하기만 하면 됩니다.
그후 잊지 말고 &lt;code&gt;usage()&lt;/code&gt; 함수를 업데이트하세요.&lt;/p&gt;
&lt;p&gt;여기서 중요한 것은 &lt;strong&gt;알 수 없는 옵션에 오류를 던지는 것&lt;/strong&gt;입니다.
Bash 인자 파싱에 대한 Google 검색 결과를 보면 일반적으로 놓치는 것입니다.
스크립트가 알 수 없는 옵션을 받았다는 것은 스크립트가 수행할 수
없는 작업을 사용자는 수행하기를 원했음을 의미합니다.
따라서 사용자의 기대와 스크립트 동작은 상당히 다를 수 있습니다.
좋지 않은 일이 일어나기 전에 실행을 아예 막는 것이 좋습니다.&lt;/p&gt;
&lt;p&gt;Bash에는 파라미터를 파싱하는 두 가지 대안이 있습니다. &lt;code&gt;getopt&lt;/code&gt;와 &lt;code&gt;getopts&lt;/code&gt;입니다.
이 명령어들을 사용하는 것에 대한 &lt;a href=&#34;https://unix.stackexchange.com/questions/62950/getopt-getopts-or-manual-parsing-what-to-use-when-i-want-to-support-both-shor&#34;&gt;찬성과 반대 의견&lt;/a&gt;이 있습니다.
기본적으로 macOS의 &lt;code&gt;getopt&lt;/code&gt;가 &lt;a href=&#34;https://stackoverflow.com/questions/11777695/why-the-getopt-doesnt-work-well-in-my-mac-os&#34;&gt;완전히 다르게 동작&lt;/a&gt;하고,
&lt;code&gt;getopts&lt;/code&gt;가 긴 파라미터(예: &lt;code&gt;--help&lt;/code&gt;)를 지원하지 않기 때문에 이러한 도구가 최선은 아니라는 것을 알게 되었습니다.&lt;/p&gt;
&lt;h1 id=&#34;템플릿-사용하기&#34;&gt;템플릿 사용하기&lt;/h1&gt;
&lt;p&gt;인터넷에서 찾을 수 있는 대부분의 코드처럼 복사-붙여넣기만 하면 됩니다.&lt;/p&gt;
&lt;p&gt;음, 사실은 말하자면요.
Bash를 사용하면 &lt;code&gt;npm install&lt;/code&gt;과 같은 범용 기능이 없습니다.&lt;/p&gt;
&lt;p&gt;복사한 후에는 4가지 항목만 변경하면 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스크립트에 대한 설명이 있는 &lt;code&gt;usage()&lt;/code&gt; 텍스트&lt;/li&gt;
&lt;li&gt;관련 내용 &lt;code&gt;cleanup()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse_params()&lt;/code&gt;의 파라미터 - &lt;code&gt;--help&lt;/code&gt;와 &lt;code&gt;--no-color&lt;/code&gt;는 그대로 두고 예시(&lt;code&gt;-f&lt;/code&gt;, &lt;code&gt;-p&lt;/code&gt;)는 변경하세요.&lt;/li&gt;
&lt;li&gt;실제 스크립트 로직&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;이식성-portability&#34;&gt;이식성 (Portability)&lt;/h1&gt;
&lt;p&gt;MacOS (기본적으로 구식 Bash 3.2)와 몇몇의 Docker 이미지에서 템플릿을 테스트했습니다.
Debian, Ubuntu, CentOS, Amazon Linux, Fedora입니다. 제대로 동작합니다.&lt;/p&gt;
&lt;p&gt;분명히 Alpine Linux와 같은 Bash가 빠진 환경에서는 작동하지 않을 것입니다.
Alpine은 미니멀리즘 시스템으로서 매우 가벼운 ash (Almquist shell)를 사용합니다.&lt;/p&gt;
&lt;p&gt;거의 모든 곳에서 작동하는
&lt;a href=&#34;https://en.wikipedia.org/wiki/Bourne_shell&#34;&gt;본 셸&lt;/a&gt;(Bourne shell, &lt;code&gt;/bin/sh&lt;/code&gt;)
호환 스크립트를 사용하는 것이 좋지 않냐고 질문할 수 있습니다.
적어도 저에게는 그렇지 않습니다.
Bash는 (아직도 사용하기 쉽지 않지만) 더 안전하고 강력하기 때문에
거의 다룰 일 없는 몇 가지 리눅스 배포판을 지원하지 않는 것 정도는 받아들일 수 있습니다.&lt;/p&gt;
&lt;h1 id=&#34;더-읽을-거리&#34;&gt;더 읽을 거리&lt;/h1&gt;
&lt;p&gt;Bash 또는 기타 &lt;del&gt;더 나은&lt;/del&gt; 언어로 CLI 스크립트를 만들 때 몇 가지 범용 규칙이 있습니다.
다음 자료들은 작은 스크립트와 대형 CLI 애플리케이션을 안정적으로 만드는 방법으로 안내합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://clig.dev/&#34;&gt;명령행 인터페이스 가이드라인&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@jdxcode/12-factor-cli-apps-dd3c227a0e46&#34;&gt;12 팩터 CLI 앱&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://betterdev.blog/command-line-arguments-anatomy-explained/&#34;&gt;예시를 들어 설명하는 명령행 인자 구조&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;끝맺음&#34;&gt;끝맺음&lt;/h1&gt;
&lt;p&gt;제가 Bash 스크립트 템플릿을 만든 첫 번째이자 마지막이 아닙니다.
좋은 대안 중 하나는 &lt;a href=&#34;https://github.com/ralish/bash-script-template&#34;&gt;이 프로젝트&lt;/a&gt;입니다.
비록 제가 매일 필요로 하는 것에 비해 조금 크긴 하지만요.
결국 저는 Bash 스크립트를 가능한 한 작게 (그리고 희한하게) 유지하려고 노력합니다.&lt;/p&gt;
&lt;p&gt;Bash 스크립트를 작성할 때 JetBrains IDE와 같이
&lt;a href=&#34;https://github.com/koalaman/shellcheck&#34;&gt;ShellCheck&lt;/a&gt; 린터를 지원하는 IDE를 사용하십시오.
이것은 당신에게 역효과를 줄 수 있는 &lt;a href=&#34;https://github.com/koalaman/shellcheck/blob/master/README.md#user-content-gallery-of-bad-code&#34;&gt;많은 것&lt;/a&gt;들을 하지 못하게 할 것입니다.&lt;/p&gt;
&lt;p&gt;저의 Bash 스크립트 템플릿은 GitHub Gist(MIT 라이센스)처럼 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/m-radzikowski/53e0b39e9a59a1518990e76c2bff8038&#34;&gt;script-template.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;템플릿에 문제가 있거나 중요한 항목이 빠졌다고 생각되면 &lt;a href=&#34;https://betterdev.blog/minimal-safe-bash-script-template/&#34;&gt;코멘트&lt;/a&gt;로 알려 주세요.&lt;/p&gt;
&lt;h2 id=&#34;업데이트-2020-12-15&#34;&gt;업데이트 2020-12-15&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/programming/duplicates/kcxnag/minimal_safe_bash_script_template/&#34;&gt;Reddit&lt;/a&gt;과
&lt;a href=&#34;https://news.ycombinator.com/item?id=25428621&#34;&gt;HackerNews&lt;/a&gt;에서 많은 코멘트를 받은 후
템플릿을 개선했습니다.
개정 이력을 &lt;a href=&#34;https://gist.github.com/m-radzikowski/53e0b39e9a59a1518990e76c2bff8038&#34;&gt;gist&lt;/a&gt;에서 확인하세요.&lt;/p&gt;
&lt;h2 id=&#34;업데이트-2020-12-16&#34;&gt;업데이트 2020-12-16&lt;/h2&gt;
&lt;p&gt;이 게시물에 대한 링크는 &lt;a href=&#34;https://news.ycombinator.com/front?day=2020-12-15&#34;&gt;Hacker News의 첫 페이지(#7)&lt;/a&gt;에 도달했습니다.
상상도 못한 일이었습니다.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://ko.wikipedia.org/wiki/%EC%85%94%EB%B1%85&#34;&gt;셔뱅&lt;/a&gt;이란 해시 기호와 느낌표(&lt;code&gt;#!&lt;/code&gt;)로 이루어진 문자 시퀀스로 인터프리터 지시자(interpreter directive)를 지정합니다. 지정하려는 인터프리터 프로그램은 절대경로로 표시합니다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;간단히 말하면,
&amp;lsquo;플래그&amp;rsquo;는 &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;를 인자로 받으며 &lt;code&gt;true&lt;/code&gt;일 경우 생략할 수 있습니다.
&amp;lsquo;지정된 파라미터&amp;rsquo;는 파라미터와 함께 특정 값을 인자로 지정해야 합니다.
&amp;lsquo;위치 인자&amp;rsquo;는 인자를 적합한 위치에 지정해야 합니다.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
- https://markruler.github.io/posts/shell/minimal-safe-bash-script-template/ - Im Changsu | Since 2020</description>
        </item>
    
    
    
        <item>
        <title>쿠버네티스 레벨 트리거링 및 조정</title>
        <link>https://markruler.github.io/posts/kubernetes/level-triggering-and-reconciliation/</link>
        <pubDate>Wed, 13 Jan 2021 23:05:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/kubernetes/level-triggering-and-reconciliation/</guid>
        <description>임창수 https://markruler.github.io/posts/kubernetes/level-triggering-and-reconciliation/ -&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;James Bowes(&lt;a href=&#34;https://twitter.com/jrbowes&#34;&gt;@jrbowes&lt;/a&gt;)의 &lt;a href=&#34;https://hackernoon.com/level-triggering-and-reconciliation-in-kubernetes-1f17fe30333d&#34;&gt;Level Triggering and Reconciliation in Kubernetes&lt;/a&gt;를 번역한 글입니다.&lt;/li&gt;
&lt;li&gt;저자의 허락을 받고 번역했습니다.&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/tCht7FvIDdY?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;h1 id=&#34;시스템-프로그래밍-개념으로-보는-쿠버네티스가-클러스터를-관리하는-방법&#34;&gt;시스템 프로그래밍 개념으로 보는 쿠버네티스가 클러스터를 관리하는 방법&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/&#34;&gt;쿠버네티스&lt;/a&gt;는 현재
&lt;a href=&#34;https://techcrunch.com/2017/12/18/as-kubernetes-surged-in-popularity-in-2017-it-created-a-vibrant-ecosystem/&#34;&gt;가장 있기 있는&lt;/a&gt;
컨테이너 오케스트레이터입니다. 이런 성공의 밑받침은 신뢰성입니다. 모든
소프트웨어에는 버그가 있죠. 그러나 컨테이너를 실행하는 데 있어서 쿠버네티스는
다른 소프트웨어보다 버그가 적습니다.&lt;/p&gt;
&lt;p&gt;쿠버네티스는 원하는 수의 컨테이너를 제때에 실행합니다.
그리고 그 숫자를 계속해서 유지하죠.
&lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/&#34;&gt;공식 문서&lt;/a&gt;에
따르면 쿠버네티스가 &lt;strong&gt;자가 치유(self-healing)&lt;/strong&gt; 하는 것이라고 말합니다.
이런 동작 방식은 쿠버네티스 설계의 핵심 철학에서 비롯됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;제어 루프(control loop)의 목표 탐색 행위는 매우 안정적입니다.
이것은 쿠버네티스에서 입증되었죠.
근본적으로는 제어 루프가 안정적이고 시간이 지나면 알아서 교정하기 때문에
버그가 있어도 알아챌 수 없었거든요.&lt;br&gt;
&lt;br&gt;
에지 트리거링은 상태를 망가뜨리고 다시 원상태를 생성하지 못하게 할 위험이 있습니다.
레벨 트리거링은 굉장히 포용적이고, 교정되어야 할 컴포넌트가 그렇지
못할 경우 다시 교정될 수 있도록 여지를 줍니다. 이것이 쿠버네티스가 잘 동작하는 이유입니다.&amp;rdquo;&lt;br&gt;
&lt;br&gt;
― Joe Beda&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, Heptio CTO (&lt;a href=&#34;http://shop.oreilly.com/product/0636920075837.do&#34;&gt;Cloud Native Infrastructure&lt;/a&gt;에서 발췌)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;잠깐: 다음은 동일한 신호에 대한 에지 및 레벨 트리거링입니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/kubernetes/edge-and-level-triggering-for-the-same-signal.png&#34; alt=&#34;edge-and-level-triggering-for-the-same-signal&#34;&gt;&lt;/p&gt;
&lt;p&gt;에지 및 레벨 트리거링은 전자 공학 및 &lt;a href=&#34;https://en.wikipedia.org/wiki/Interrupt#Types_of_interrupts&#34;&gt;시스템 프로그래밍&lt;/a&gt;에서 나온 개념입니다.
이것은 시스템이 시간에 따라 전기 신호(또는 디지털 논리) 형태에
어떻게 반응해야 하는지를 나타냅니다. 시스템은 신호가 로우(low)에서 하이(high)로,
하이에서 로우로 &lt;strong&gt;바뀔 때&lt;/strong&gt; 신경써야 할까요, 아니면 하이에
&lt;strong&gt;있는 지 여부&lt;/strong&gt;에 신경써야 할까요?&lt;/p&gt;
&lt;p&gt;아래처럼 간단한 덧셈 연산을 통해 설명해보겠습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; &lt;span style=&#34;color:#f00&#34;&gt;let&lt;/span&gt; a = &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; a += &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt; &lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;에지 트리거링 관점에서 위 연산은 다음과 같습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; to a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;더하는 순간 한 번 발생합니다.&lt;/p&gt;
&lt;p&gt;레벨 트리거링 관점에서는 다음과 같습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a is &lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;더할 때부터 다음 이벤트가 발생할 때까지 계속 이러한 상태가 유지됩니다.&lt;/p&gt;
&lt;h2 id=&#34;분산-시스템에서-에지-트리거링과-레벨-트리거링&#34;&gt;분산 시스템에서 에지 트리거링과 레벨 트리거링&lt;/h2&gt;
&lt;p&gt;추상적으로는 에지 트리거링과 레벨 트리거링 사이에 명확한 차이가 없습니다.
하지만 현실에서는 시스템 프로그래밍 수준에서도 실질적인 한계에 대처해야 합니다.
흔히 만날 수 있는 한계는 &lt;a href=&#34;https://en.wikipedia.org/wiki/Sampling_%28signal_processing%29#Sampling_rate&#34;&gt;샘플링 레이트(sampling rate)&lt;/a&gt;입니다.
시스템이 신호를 충분히 자주 샘플링하지 않으면 에지 트리거링에서 신호가 변할 때나
레벨 트리거링에서 짧은 변화가 일어났을 때 신호를 놓칠 수 있습니다.&lt;/p&gt;
&lt;p&gt;대규모 컴퓨팅, 대규모 네트워킹에서는 다루어야 할
&lt;a href=&#34;https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing&#34;&gt;문제들이 더 많습니다&lt;/a&gt;.
&lt;a href=&#34;http://www.cbc.ca/news/canada/nova-scotia/cellular-service-outage-bell-mobility-tellus-1.4235624&#34;&gt;네트워크&lt;/a&gt;는 신뢰할 수 없고요.
사람들은 &lt;a href=&#34;https://hothardware.com/news/dont-trip-over-the-power-cord-human-error-caused-massive-time-warner-network-outage&#34;&gt;실수를 저지릅니다&lt;/a&gt;.
다람쥐는 &lt;a href=&#34;http://cybersquirrel1.com/&#34;&gt;말을 듣지 않고요&lt;/a&gt;.
어떤 면에선 이러한 문제들은 정확하지 않거나 일관되지 않은 샘플링 레이트와 같습니다.
신호를 보는 우리의 시야를 가리거든요.&lt;/p&gt;
&lt;h1 id=&#34;신호-교란이-관측-결과를-바꿉니다&#34;&gt;신호 교란이 관측 결과를 바꿉니다&lt;/h1&gt;
&lt;p&gt;에지 및 레벨 트리거 시스템에서 신호 교란이 관측 결과에
어떤 영향을 미치는지 살펴보겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;이상적인-상황&#34;&gt;이상적인 상황&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/kubernetes/ideal-conditions.png&#34; alt=&#34;ideal-conditions&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;에지 및 레벨 트리거 시스템이 신호를 해석하는 방식입니다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;이상적인 상황에서는 에지 트리거 시스템과 레벨 트리거 시스템 모두 신호를 올바르게
관측할 수 있습니다. 신호가 사라진 직후 둘 다 신호가 사라졌다고 관측합니다.&lt;/p&gt;
&lt;h2 id=&#34;두-번의-신호-교란&#34;&gt;두 번의 신호 교란&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/kubernetes/two-disruptions.png&#34; alt=&#34;two-disruptions&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;상승 및 하강에 신호 교란이 발생하면 에지 트리거 시스템에서 상승 신호가 손실되지만 마지막에는 올바른 상태가 됩니다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;신호가 변할 때 두 번 발생된 신호 교란을 보면 에지 및 레벨 트리거 시스템 간의 차이가
분명해집니다. 에지 트리거 관점에서는 첫 번째 상승을 놓칩니다. 레벨 트리거 시스템은
신호가 다르게 보일 때까지 마지막으로 관측된 상태라고 가정합니다. 이는 대부분의 관측
신호가 정확하지만 신호 교란이 사라질 때까지는 그렇지 않습니다.&lt;/p&gt;
&lt;h2 id=&#34;한-번의-장애&#34;&gt;한 번의 장애&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/kubernetes/one-disruption.png&#34; alt=&#34;one-disruptions&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;에지 트리거 시스템에서는 신호 교란 하나가 중요한 곳에 생기면 큰 영향이 미칠 수 있습니다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;신호 교란이 적다고 해서 항상 더 나은 결과를 낳는 것은 아닙니다. 신호 교란 한번으로
하강하는 신호가 가려지면 레벨 트리거 시스템은 대부분 다시 교정하지만,
에지 트리거 시스템은 두 번의 상승만 볼 수 있기 때문에 본래의 신호를 잃어버립니다.&lt;/p&gt;
&lt;p&gt;다시 덧셈 연산으로 레벨 트리거 시스템의 신호를 나타내면 다음과 같습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; &lt;span style=&#34;color:#f00&#34;&gt;let&lt;/span&gt; a = &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; a += &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; a -= &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; a += &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그러나 에지 트리거 시스템에서는 아래와 같이 관측됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; &lt;span style=&#34;color:#f00&#34;&gt;let&lt;/span&gt; a = &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; a += &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; a += &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;희망-상태와-실제-상태-조정하기&#34;&gt;희망 상태와 실제 상태 조정하기&lt;/h1&gt;
&lt;p&gt;쿠버네티스는 하나의 신호만 관측하지 않고 &lt;strong&gt;희망하는(desired)&lt;/strong&gt; 클러스터
상태와 &lt;strong&gt;실제(actual)&lt;/strong&gt; 클러스터 상태 두 가지를 관측합니다.
희망 상태는 클러스터를 사용하는 사람이 바라는 상태를 말합니다.
(&lt;em&gt;&amp;ldquo;애플리케이션 컨테이너 인스턴스를 두 개 실행해주세요&amp;rdquo;&lt;/em&gt;)
실제 상태와 희망 상태는 가능하면 일치해야 하지만 수많은 하드웨어 오류와
유해 프로그램의 영향을 받기 쉽습니다. 희망 상태와 멀어지게 만들 수 있죠.
실제 상태가 희망 상태와 즉시 일치할 수는 없기 때문에 시간조차도 하나의
요인입니다. 예를 들면 레지스트리에서 컨테이너 이미지를 다운로드하고
애플리케이션을 정상적으로 종료하려면 시간이 필요합니다.&lt;/p&gt;
&lt;p&gt;쿠버네티스는 실제 상태를 희망 상태로 &lt;strong&gt;조정(reconcile)&lt;/strong&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;해야 합니다.
계속 반복해서 두 상태를 가져오고, 차이나는 부분을 가려내고,
실제 상태를 희망 상태로 만들기 위해 어떤 변경이든 적용합니다.&lt;/p&gt;
&lt;h2 id=&#34;쿠버네티스-디플로이먼트-스케일링&#34;&gt;쿠버네티스 디플로이먼트 스케일링&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/kubernetes/scaling-a-deployment-in-kubernetes.png&#34; alt=&#34;scaling-a-deployment-in-kubernetes&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;에지 트리거 시스템에서는 원하는 결과와 크게 달라질 수 있습니다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;신호 교란이 없더라도 에지 트리거 시스템은 두 상태를
조정하려고 하기 때문에 잘못된 결과를 초래할 수 있습니다.&lt;/p&gt;
&lt;p&gt;단일 컨테이너 레플리카로 시작해서 5개의 레플리카로 확장한 후
2개의 레플리카로 축소하려는 경우,
에지 트리거 시스템은 희망 상태를 아래와 같이 관측합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; &lt;span style=&#34;color:#f00&#34;&gt;let&lt;/span&gt; replicas = &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; replicas += &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; replicas -= &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;시스템의 실제 상태는 이러한 명령에 즉시 반응할 수 없습니다.
위 다이어그램처럼 실행 중인 레플리카가 3개만 있을 때 3개의 레플리카를
종료할 수도 있습니다. 그럼 레플리카가 하나도 안 남겠죠.&lt;/p&gt;
&lt;p&gt;레벨 트리거 시스템에서는 항상 희망 상태와 실제 상태 전체를 비교합니다.
이렇게 하면 상태 동기화 실패(state desynchronization) 버그가 발생할 가능성이 줄어듭니다.&lt;/p&gt;
&lt;h1 id=&#34;안정적으로-만들기&#34;&gt;안정적으로 만들기&lt;/h1&gt;
&lt;p&gt;본질적으로 에지 트리거링이 안 좋은 것은 아닙니다.
레벨 트리거링에 비해 이점도 있습니다.
에지 트리거링은 신호가 변경되었을 때 변경된 부분만 전달합니다.&lt;/p&gt;
&lt;p&gt;신호 교란과 관련된 에지 트리거 시스템의 문제를 줄일 수도 있습니다.
흔히 레벨 트리거 시스템이 동작하는 것처럼 전체 상태를 주기적으로
조정하면서 해결합니다. 명확한 이벤트 순서와 버전 관리를 통해
신호 교란을 줄일 수도 있습니다.&lt;/p&gt;
&lt;p&gt;분산 컴퓨팅 고유의 문제에도 불구하고 쿠버네티스는 위 문제를
레벨 트리거 시스템 관점으로 바라봄으로써 간명하고
사용자가 원하는 것을 수행하는 아키텍처가 되었습니다.&lt;/p&gt;
&lt;p&gt;이 글에 포함된 다이어그램을 그려준 &lt;a href=&#34;https://medium.com/@megthesmith&#34;&gt;Meg Smith&lt;/a&gt;에게 특별히 감사드립니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;역주: 쿠버네티스의 조정(Reconciliation)과 관련하여 &lt;a href=&#34;https://kubernetes.io/docs/concepts/architecture/controller/&#34;&gt;컨트롤러 패턴&lt;/a&gt;,
파드 실행 흐름 등을 같이 익히는 것이 좋다고 생각합니다. 조 베다(Joe Beda)가 작성한 &lt;a href=&#34;https://blog.heptio.com/core-kubernetes-jazz-improv-over-orchestration-a7903ea92ca&#34;&gt;좋은 글&lt;/a&gt;이 있습니다.
&lt;a href=&#34;http://book.naver.com/bookdb/book_detail.nhn?bid=16320585&#34;&gt;책 &amp;lt;쿠버네티스 패턴&amp;gt;&lt;/a&gt;도 좋았습니다.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/kubernetes/typical-flow-scheduling-pod.png&#34; alt=&#34;typical-flow-scheduling-pod&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;출처: Core Kubernetes: Jazz Improv over Orchestration - Joe Beda&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;쿠버네티스 창시자 중 한 명&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;조정(reconciliation)이란 실제 클러스터 상태를 사용자가 정의한 상태로 제어하는 것을 말합니다. 이에 대한 자세한 내용은
&lt;a href=&#34;https://github.com/kubernetes-sigs/controller-runtime/blob/v0.7.0/pkg/reconcile/reconcile.go#L53-L87&#34;&gt;소스 코드에 달린 주석&lt;/a&gt;을 읽어보세요.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
- https://markruler.github.io/posts/kubernetes/level-triggering-and-reconciliation/ - Im Changsu | Since 2020</description>
        </item>
    
    
    
        <item>
        <title>CS Visualized: 유용한 깃(Git) 명령어</title>
        <link>https://markruler.github.io/posts/shell/cs-visualized-useful-git-commands/</link>
        <pubDate>Sat, 09 Jan 2021 08:35:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/shell/cs-visualized-useful-git-commands/</guid>
        <description>임창수 https://markruler.github.io/posts/shell/cs-visualized-useful-git-commands/ -&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;리디아 할리(Lydia Hallie, &lt;a href=&#34;https://twitter.com/lydiahallie&#34;&gt;@lydiahallie&lt;/a&gt;)가 쓴 &lt;a href=&#34;https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1&#34;&gt;CS Visualized: Useful Git Commands&lt;/a&gt;를 번역한 글입니다.&lt;/li&gt;
&lt;li&gt;저자의 허락을 받고 번역했습니다.&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;Git이 정말 강력한 도구이긴 하지만, 대다수의 사람들은 끔찍한 악몽 😐
같다는 말도 공감할 거에요. 저는 항상 Git으로 작업할 때 어떤 일이 일어날지
머릿속으로 그려보는 것이 꽤 유용하다는 것을 알았습니다. 특정 명령을 실행할
때 브랜치는 어떻게 상호작용하고, 그것이 히스토리에 어떤 영향을 미칠까요?
&lt;code&gt;master&lt;/code&gt;에서 &lt;code&gt;reset --hard&lt;/code&gt; 하고 &lt;code&gt;origin&lt;/code&gt; 리포지터리로 &lt;code&gt;force push&lt;/code&gt;한 후,
&lt;code&gt;.git&lt;/code&gt; 폴더를 &lt;code&gt;rimraf&lt;/code&gt;하면 왜 저의 팀원은 소리를 지를까요?&lt;/p&gt;
&lt;p&gt;* &lt;code&gt;rimraf&lt;/code&gt; == &lt;code&gt;rm -rf&lt;/code&gt;: 묻지도 따지지도 않고 전부 지워버린다.&lt;/p&gt;
&lt;p&gt;저는 가장 많이 쓰이면서 유용한 명령어들을 시각화하는 것이 완벽한 유즈 케이스라고 생각했습니다! 🥳
명령어들은 동작(behavior)을 바꾸기 위해 사용할 수 있는 전달 인자들(arguments)이 있지만,
제가 다룰 예시에서는 (수많은) 설정 옵션 없이 명령어의 기본 동작에 대해서만 설명하겠습니다. 😄&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;병합-merge&#34;&gt;병합 (Merge)&lt;/h1&gt;
&lt;p&gt;브랜치가 여러 개 있으면 새로운 변경 사항들을 분리해서 관리하기 편합니다.
승인되지 않았거나 잘못된 변경 사항을 실수로 운영 환경에 푸시하지
않도록 하는 데에도 편합니다. 변경 사항이 승인됐다면 운영 환경
브랜치에 적용해야 하죠!&lt;/p&gt;
&lt;p&gt;한 브랜치에서 다른 브랜치로 변경 사항을 옮기는 한 가지 방법은
&lt;code&gt;git merge&lt;/code&gt;를 실행하는 것입니다! Git이 수행할 수 있는 병합에는
&lt;strong&gt;fast-forward&lt;/strong&gt;, &lt;strong&gt;no-fast-forward&lt;/strong&gt;라는 두 가지 유형이 있습니다. 🐢&lt;/p&gt;
&lt;p&gt;지금 당장은 무슨 말인지 이해되지 않으실테니 차이점을 살펴보도록 하겠습니다!&lt;/p&gt;
&lt;h2 id=&#34;fast-forward---ff&#34;&gt;Fast-forward (&lt;code&gt;--ff&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;fast-forward 병합&lt;/strong&gt;은 현재 브랜치에 병합하려는 브랜치에 비해 추가
커밋이 없을 때 발생할 수 있습니다. Git은&amp;hellip; &lt;em&gt;게을러서&lt;/em&gt; 가장 쉬운
옵션인 fast-forward부터 시도하려 할 것입니다! 이 방식은 새로운
커밋을 생성하지 않고 병합하려는 브랜치의 커밋을 그대로 병합합니다. 🥳&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/merge-ff.gif&#34; alt=&#34;merge-ff&#34;&gt;&lt;/p&gt;
&lt;p&gt;Perfect! 우리는 이제 &lt;code&gt;dev&lt;/code&gt; 브랜치에서 만든 모든 변경 사항들을
&lt;code&gt;master&lt;/code&gt; 브랜치에서도 접근할 수 있게 되었습니다. 그럼
&lt;strong&gt;no-fast-forward&lt;/strong&gt;는 뭘까요?&lt;/p&gt;
&lt;h2 id=&#34;no-fast-foward---no-ff&#34;&gt;No-fast-foward (&lt;code&gt;--no-ff&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;병합하려는 브랜치와 비교해 현재 브랜치에 추가 커밋이 없는 경우가 좋겠지만
안타깝게도 그런 경우는 거의 없습니다! 병합할 브랜치에 없는 변경 사항을 현재 브랜치에 커밋한 경우
Git은 &lt;em&gt;no-fast-forward&lt;/em&gt; 병합을 수행합니다.&lt;/p&gt;
&lt;p&gt;Git은 no-fast-forward을 사용해 현재 브랜치에 새로운 &lt;em&gt;병합 커밋&lt;/em&gt;을 생성합니다.
상위 커밋은 현재 브랜치와 병합하려는 브랜치 모두를 가리킵니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/merge-no-ff.gif&#34; alt=&#34;merge-no-ff&#34;&gt;&lt;/p&gt;
&lt;p&gt;별 거 아니지만 완벽해요! 🎉
이제 &lt;code&gt;master&lt;/code&gt; 브랜치는 &lt;code&gt;dev&lt;/code&gt; 브랜치에서 변경한 내용을 모두 포함합니다.&lt;/p&gt;
&lt;h2 id=&#34;병합-충돌-merge-conflicts&#34;&gt;병합 충돌 (Merge conflicts)&lt;/h2&gt;
&lt;p&gt;어떻게 브랜치를 병합하고 파일에 변경 사항을 추가할지 Git이 잘 결정할테지만,
Git이 항상 혼자 결정할 수는 없습니다. 🙂 병합하려는 두 개의 브랜치가 똑같은
파일, 똑같은 줄에 변경 사항이 있거나 한 브랜치가 다른 브랜치에서 변경한 파일을
삭제하는 경우 등의 문제가 발생할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이런 경우 Git이 두 가지 중 어떤 내용을 유지하고 싶은지 물어볼 것입니다!
두 브랜치 모두에서 &lt;code&gt;README.md&lt;/code&gt;의 첫번째 줄을 편집했다고 가정해 보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/readme.png&#34; alt=&#34;readme&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dev&lt;/code&gt;를 &lt;code&gt;master&lt;/code&gt;로 병합하려는 경우 병합 충돌이 발생합니다.
그럼 제목을 &lt;code&gt;Hello!&lt;/code&gt; 또는 &lt;code&gt;Hey!&lt;/code&gt; 중 어떤 걸로 지정하실래요?&lt;/p&gt;
&lt;p&gt;브랜치를 병합하려고 하면 Git은 충돌이 발생한 위치를 보여줄 겁니다.
버리고 싶은 변경 사항을 수동으로 제거하고 저장한 후,
변경된 파일을 다시 추가하면 커밋할 수 있게 됩니다. 🥳&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/merge-conflict.gif&#34; alt=&#34;merge-conflict&#34;&gt;&lt;/p&gt;
&lt;p&gt;Yay! 병합 충돌은 정말 번거롭지만 꼭 필요한 과정입니다.
Git은 단순히 우리가 유지하고자 하는 변경 사항을 &lt;em&gt;가정&lt;/em&gt;해서는 안 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;리베이스-rebase&#34;&gt;리베이스 (Rebase)&lt;/h1&gt;
&lt;p&gt;방금 &lt;code&gt;git merge&lt;/code&gt;를 수행하여 한 브랜치에서 다른 브랜치로 변경 사항을 적용하는 방법을
보았습니다. 여기에 또 한 가지 방법이 있는데 바로 &lt;code&gt;git rebase&lt;/code&gt;입니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git rebase&lt;/code&gt;는 현재 브랜치에서 커밋을 복사하고 복사된 커밋을 지정한 브랜치 맨 위에 놓습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/rebase.gif&#34; alt=&#34;rebase&#34;&gt;&lt;/p&gt;
&lt;p&gt;Perfect! 이제 &lt;code&gt;master&lt;/code&gt; 브랜치의 모든 변경 사항을 &lt;code&gt;dev&lt;/code&gt; 브랜치에서도 사용할 수 있게 되었습니다! 🎊&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git merge&lt;/code&gt;와 비교할 때 큰 차이점은 Git이 유지할 파일과 유지하지 않을 파일을 물어보지
않았는다는 거에요. 리베이스 하는 브랜치에는 항상 최근 변경 사항이 적용됩니다!
이러한 방식으로 병합 충돌은 발생하지 않고 Git 히스토리를 선형으로 유지하죠.&lt;/p&gt;
&lt;p&gt;이 예에서는 &lt;code&gt;master&lt;/code&gt; 브랜치에 대한 리베이스를 보여 줍니다.
그러나 더 큰 프로젝트에서는 대개 이렇게 하고 싶지 않을 거에요.
&lt;code&gt;git rebase&lt;/code&gt;는 복사된 커밋의 해시가 새로 생성될 때
&lt;strong&gt;프로젝트 히스토리를 변형시킵니다&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;리베이스는 &lt;code&gt;feature&lt;/code&gt; 브랜치에서 작업할 때나 &lt;code&gt;master&lt;/code&gt; 브랜치가 업데이트될 때 유용합니다.
브랜치에서 모든 업데이트를 받을 수 있으므로 이후 병합 충돌을 방지할 수 있거든요! 😄&lt;/p&gt;
&lt;h2 id=&#34;대화형-리베이스--i-interactive-rebase&#34;&gt;대화형 리베이스 (&lt;code&gt;-i&lt;/code&gt; interactive rebase)&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;대화형 리베이스&lt;/em&gt;를 사용하면 커밋을 리베이스 하기 전에 변형시킬 수도 있어요! 😃
대화형 리베이스는 현재 작업 중인 브랜치에서 일부 커밋을 수정하고 싶은 경우 유용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;리베이스 작업중인 커밋에 대해 수행할 수 있는 명령어는 6가지가 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reword&lt;/code&gt;: 커밋 메시지 수정&lt;/li&gt;
&lt;li&gt;&lt;code&gt;edit&lt;/code&gt;: 커밋 수정&lt;/li&gt;
&lt;li&gt;&lt;code&gt;squash&lt;/code&gt;: 이전 커밋과 혼합&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fixup&lt;/code&gt;: 커밋 로그 메시지를 유지하지 않고 이전 커밋과 혼합&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec&lt;/code&gt;: 리베이스하려는 커밋마다 명령어 실행&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drop&lt;/code&gt;: 커밋 삭제&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Awesome! 이 명령어들을 사용해 커밋을 완전히 제어할 수 있습니다.
만약 커밋을 지우고 싶다면 그냥 &lt;code&gt;drop&lt;/code&gt;하세요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/rebase-drop.gif&#34; alt=&#34;rebase-drop&#34;&gt;&lt;/p&gt;
&lt;p&gt;만약 깨끗한 히스토리를 유지하고 싶다면 여러 커밋들을 &lt;code&gt;squash&lt;/code&gt;하시면 됩니다. 문제 없어요!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/rebase-squash.gif&#34; alt=&#34;rebase-squash&#34;&gt;&lt;/p&gt;
&lt;p&gt;대화형 리베이스는 커밋을 제어하는 다양한 방법을 제공합니다.
현재 작업 중인 브랜치라도 말이죠!&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;리셋-reset&#34;&gt;리셋 (Reset)&lt;/h1&gt;
&lt;p&gt;나중에 원치 않는 변경 사항을 커밋할 수도 있습니다.
&lt;code&gt;WIP&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 커밋이거나 버그가 발견된 커밋일 수도 있죠! 🐛
그런 경우에 &lt;code&gt;git reset&lt;/code&gt; 명령어를 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git reset&lt;/code&gt;은 스테이징&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;된 파일을 제거하거나
&lt;code&gt;HEAD&lt;/code&gt;가 가리키는 곳을 제어할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;소프트-리셋---soft&#34;&gt;소프트 리셋 (&lt;code&gt;--soft&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;소프트 리셋&lt;/em&gt;은 &lt;code&gt;HEAD&lt;/code&gt;를 지정된 커밋으로 옮기거나 해당 커밋의 인덱스를 &lt;code&gt;HEAD&lt;/code&gt;와 비교합니다.
나중에 커밋된 변경 사항들을 제거하지 않고서 말이죠!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;style.css&lt;/code&gt; 파일을 추가한 &lt;code&gt;9e78i&lt;/code&gt; 커밋과
&lt;code&gt;index.js&lt;/code&gt; 파일을 추가한 &lt;code&gt;035cc&lt;/code&gt; 커밋을 유지하고 싶지 않다고 가정해 보겠습니다.
하지만 새로 추가된 &lt;code&gt;style.css&lt;/code&gt;와 &lt;code&gt;index.js&lt;/code&gt; 파일은 유지하고 싶어요!
그럼 소프트 리셋을 위한 완벽한 유즈 케이스입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/reset-soft.gif&#34; alt=&#34;reset-soft&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;를 입력하면 아직 이전 커밋에서 변경한 모든 내용에 접근할 수 있다는 것을 알 수 있습니다.
이렇게 파일의 내용을 변경하고 또 다시 커밋할 수 있으니 좋은 방법입니다!&lt;/p&gt;
&lt;h2 id=&#34;하드-리셋---hard&#34;&gt;하드 리셋 (&lt;code&gt;--hard&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;때로는 특정 커밋에 의해 반영된 변경 사항을 유지하고 싶지 않을 겁니다.
그럼 소프트 리셋과 달리 더 이상 변경 사항에 접근할 필요가 없겠죠.
Git은 지정된 커밋의 상태로 간단하게 리셋합니다.
여기에는 워킹 디렉토리와 스테이징된 파일의 변경 사항도 포함됩니다! 💣&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/reset-hard.gif&#34; alt=&#34;reset-hard&#34;&gt;&lt;/p&gt;
&lt;p&gt;Git은 &lt;code&gt;9e78i&lt;/code&gt;와 &lt;code&gt;035cc&lt;/code&gt; 커밋에 반영된 변경 사항을 버리고
&lt;code&gt;ec5be&lt;/code&gt;커밋으로 다시 상태를 리셋했습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;리버트-revert&#34;&gt;리버트 (Revert)&lt;/h1&gt;
&lt;p&gt;변경 사항을 되돌리는 또 다른 방법은 &lt;code&gt;git revert&lt;/code&gt; 하는 것입니다.
특정 커밋을 리버트하면 &lt;em&gt;새로운 커밋&lt;/em&gt;이 생성되고 여기에는 리버트된 변경 사항이 포함됩니다!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ec5be&lt;/code&gt; 커밋으로 &lt;code&gt;index.js&lt;/code&gt; 파일이 추가됐다고 가정해 보겠습니다.
그리고 나중에서야 이 변경 사항이 더 이상 필요없다는 것을 느끼죠!
이제 &lt;code&gt;ec5be&lt;/code&gt; 커밋을 되돌려보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/revert.gif&#34; alt=&#34;revert&#34;&gt;&lt;/p&gt;
&lt;p&gt;Perfect! &lt;code&gt;9e78i&lt;/code&gt; 커밋은 &lt;code&gt;ec5be&lt;/code&gt; 커밋에 반영된 변경 사항을 제거했습니다.
&lt;code&gt;git revert&lt;/code&gt;를 실행하면 브랜치의 히스토리를 수정하지 않고 특정 커밋을 되돌릴 수 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;체리-피킹-cherry-pick&#34;&gt;체리 피킹 (Cherry-pick)&lt;/h1&gt;
&lt;p&gt;특정 브랜치에 우리에게 필요한 변경 사항을 가진 커밋이 있다면,
&lt;code&gt;cherry-pick&lt;/code&gt; 명령어를 사용할 수 있습니다! 커밋을 &lt;code&gt;cherry-pick&lt;/code&gt;하면
&lt;code&gt;cherry-pick&lt;/code&gt; 커밋에 담긴 변경 사항을 포함해 현재 브랜치에 새로운 커밋을 만듭니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dev&lt;/code&gt; 브랜치의 &lt;code&gt;76d12&lt;/code&gt; 커밋이 &lt;code&gt;master&lt;/code&gt; 브랜치에서 원하는 변경 사항을
&lt;code&gt;index.js&lt;/code&gt; 파일에 추가했다고 가정해 보세요. 그럼 &lt;em&gt;다른 커밋&lt;/em&gt;들은 필요없고
단 한 가지 커밋만 있으면 됩니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/cherry-pick.gif&#34; alt=&#34;cherry-pick&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;페치-fetch&#34;&gt;페치 (Fetch)&lt;/h1&gt;
&lt;p&gt;현재 브랜치에 없는 커밋이 원격 브랜치에 생길 수 있습니다!
예를 들어 다른 브랜치가 병합된다거나 동료가 빠르게 변경 사항을 푸시하는 경우 등이 있죠.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git fetch&lt;/code&gt;를 실행해서 원격 브랜치의 변경 사항을 로컬로 가져올 수 있습니다!
&lt;code&gt;fetch&lt;/code&gt;는 단순히 새로운 데이터를 다운로드 하는 것일 뿐이지, 로컬 브랜치에 영향을 끼치지는
않습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/git-fetch.gif&#34; alt=&#34;git-fetch&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;풀-pull&#34;&gt;풀 (Pull)&lt;/h1&gt;
&lt;p&gt;브랜치의 원격 데이터를 가져오기 위해서는 &lt;code&gt;git fetch&lt;/code&gt;도 유용하지만 &lt;code&gt;git pull&lt;/code&gt;도 좋습니다.
&lt;code&gt;git pull&lt;/code&gt;은 &lt;code&gt;git fetch&lt;/code&gt;와 &lt;code&gt;git merge&lt;/code&gt; 두 가지 명령을 합친 것입니다.
&lt;code&gt;origin&lt;/code&gt; 저장소에서 변경 사항을 풀(pull)할 때 먼저 &lt;code&gt;git fetch&lt;/code&gt; 명령처럼
모든 데이터를 가져온 후 최신 변경 사항을 자동으로 로컬 브랜치에 병합합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/git-pull.gif&#34; alt=&#34;git-pull&#34;&gt;&lt;/p&gt;
&lt;p&gt;Awesome! 이제 원격 브랜치와 완전히 동기화되었고 최신 변경 사항이 모두 반영되었습니다! 🤩&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;레프-로그-reflog&#34;&gt;레프-로그 (Reflog)&lt;/h1&gt;
&lt;p&gt;모든 사람은 실수를 합니다. 지극히 정상이에요!
때로는 Git 저장소를 망쳐버려서 완전히 삭제하고 싶은 충동을 느낄 수도 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git reflog&lt;/code&gt;는 실행된 작업 로그를 모두 표시하는 데 정말 유용한 명령입니다!
여기에는 병합, 리셋, 리버트 등 기본적으로 브랜치에 대한 모든 변경 사항이 포함됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/git-reflog.gif&#34; alt=&#34;git-reflog&#34;&gt;&lt;/p&gt;
&lt;p&gt;실수를 했다면 &lt;code&gt;reflog&lt;/code&gt;가 주는 정보를 바탕으로 &lt;code&gt;HEAD&lt;/code&gt;를 리셋해서 쉽게 되돌릴 수 있습니다!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;origin&lt;/code&gt; 저장소의 브랜치를 병합하지 않고 싶다고 가정해보세요.
&lt;code&gt;git reflog&lt;/code&gt; 명령어를 실행하면 병합 전의 저장소 상태가 &lt;code&gt;HEAD@{1}&lt;/code&gt;로 표시됩니다.
&lt;code&gt;git reset&lt;/code&gt;을 수행하여 헤드가 &lt;code&gt;head@{1}&lt;/code&gt;으로 돌아가도록 합니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/reset-reflog.gif&#34; alt=&#34;reset-reflog&#34;&gt;&lt;/p&gt;
&lt;p&gt;리셋 명령으로 &lt;code&gt;reflog&lt;/code&gt;가 밀린 것을 볼 수 있습니다!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Git에는 유용한 포셀린(porcelain) 명령어와 플러밍(plumbing) 명령어&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;가 너무
많아서 모두 다룰 수 있었으면 좋겠어요! 😄 다른 명령어나 대안들이 많아서 미처
다룰 시간이 없었다는 것을 이해해주세요. 좋아하는 명령어나 가장 유용한 명령어가
무엇인지 알려주시면 제가 다른 글에서 다룰 수도 있습니다!&lt;/p&gt;
&lt;p&gt;그리고 언제나 그랬듯이 저(Lydia Hallie)와 소통해요! 😊&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;✨&lt;/th&gt;
          &lt;th&gt;👩🏽‍💻&lt;/th&gt;
          &lt;th&gt;💻&lt;/th&gt;
          &lt;th&gt;💡&lt;/th&gt;
          &lt;th&gt;📷&lt;/th&gt;
          &lt;th&gt;💌&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.twitter.com/lydiahallie&#34;&gt;Twitter&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.instagram.com/theavocoder&#34;&gt;Instagram&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.github.com/lydiahallie&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.linkedin.com/in/lydia-hallie&#34;&gt;LinkedIn&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/channel/UC4EWKIKdKiDtAscQ9BIXwUw&#34;&gt;YouTube&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;mailto:lydiahallie.dev@gmail.com&#34;&gt;Email&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;WIP (Work in Progress): 진행 중인 작업&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;현재 작업 중인 &amp;ldquo;working directory&amp;quot;를 &lt;code&gt;git add&lt;/code&gt; 하면 &amp;ldquo;staging area&amp;quot;로 옮겨진다. 그 후 &lt;code&gt;git commit&lt;/code&gt;을 하면 &amp;ldquo;local repository&amp;quot;로 옮겨진다. 여기서 &lt;code&gt;git push&lt;/code&gt;를 명령할 경우 마침내 &amp;ldquo;remote repository&amp;quot;로 간다.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/book/ko/v2/Git%EC%9D%98-%EB%82%B4%EB%B6%80-Plumbing-%EB%AA%85%EB%A0%B9%EA%B3%BC-Porcelain-%EB%AA%85%EB%A0%B9&#34;&gt;저수준의 명령어는 &amp;ldquo;Plumbing&amp;rdquo; 명령어라고 부르고 좀 더 사용자에게 친숙한 사용자용 명령어는 &amp;ldquo;Porcelain&amp;rdquo; 명령어라고 부른다.&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
- https://markruler.github.io/posts/shell/cs-visualized-useful-git-commands/ - Im Changsu | Since 2020</description>
        </item>
    
    
    
        <item>
        <title>CS Visualized: CORS</title>
        <link>https://markruler.github.io/posts/web/cs-visualized-cors/</link>
        <pubDate>Sat, 02 Jan 2021 08:50:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/web/cs-visualized-cors/</guid>
        <description>임창수 https://markruler.github.io/posts/web/cs-visualized-cors/ -&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;리디아 할리(Lydia Hallie, &lt;a href=&#34;https://twitter.com/lydiahallie&#34;&gt;@lydiahallie&lt;/a&gt;)가 쓴 &lt;a href=&#34;https://dev.to/lydiahallie/cs-visualized-cors-5b8h&#34;&gt;CS Visualized: CORS&lt;/a&gt;를 번역한 글입니다.&lt;/li&gt;
&lt;li&gt;저자의 허락을 받고 번역했습니다.&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;어쩌다 콘솔에서 &amp;ldquo;fetch 접근이 CORS 정책에 의해 차단되었습니다&amp;quot;라는
커다란 빨간색 오류를 보면 모든 개발자가 짜증을 느낍니다! 😬
임시방편이 몇 가지 있긴 하지만 오늘은 그 어떤 것도 사용하지 않겠습니다!
대신 CORS가 실제로 무엇을 하고 있는지 왜 우리에게 도움이 되는지
알아보도록 하겠습니다. 👏🏼&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;❗️ 이 글에서는 HTTP 기본에 대해 설명하지 않겠습니다.
HTTP 요청과 응답에 대해 더 자세히 알고 싶으시다면 제가 얼마 전에
작성한 &lt;a href=&#34;https://www.lydiahallie.dev/blog/http11&#34;&gt;짧은 글&lt;/a&gt;이
있습니다. 🙂 제가 사용한 예시에서 HTTP/2 대신 HTTP/1.1을
사용하지만 CORS에 영향을 미치지는 않습니다.&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;우리는 종종 프런트엔드에서 다른 곳에 있는 데이터를 보여주고 싶습니다!
해당 데이터를 가져오기 위해 브라우저는 먼저 서버에 요청을 해야 하죠!
이 요청은 서버가 데이터를 클라이언트로 보내기 위해 필요한
모든 정보를 포함합니다. 🙂&lt;/p&gt;
&lt;p&gt;예를 들어 웹사이트 &lt;code&gt;www.mywebsite.com&lt;/code&gt;에서 &lt;code&gt;api.website.com&lt;/code&gt; 서버에
있는 사용자 정보를 가져오려고 합니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/request-same.gif&#34; alt=&#34;request-same&#34;&gt;&lt;/p&gt;
&lt;p&gt;Perfect! 😃 방금 서버로 HTTP 요청을 보냈습니다.
그런 다음 서버는 우리가 요청했던 JSON 데이터를 응답했습니다.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;동일한&lt;/em&gt; 요청을 &lt;strong&gt;다른 도메인&lt;/strong&gt;에 시도해보겠습니다.
&lt;code&gt;www.mywebsite.com&lt;/code&gt; 대신
&lt;code&gt;www.anotherdomain.com&lt;/code&gt;에서 요청하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/request-another.gif&#34; alt=&#34;request-another&#34;&gt;&lt;/p&gt;
&lt;p&gt;잠깐, 뭐죠? 우리는 똑같은 요청을 보냈는데 이번에는 브라우저가 이상한 오류가 보여주죠?&lt;/p&gt;
&lt;p&gt;우리는 방금 CORS가 동작하는 것을 보았습니다! 💪🏼
그럼 이 오류가 발생한 원인과 정확히 무엇을 뜻하는지 알아보겠습니다.&lt;/p&gt;
&lt;h1 id=&#34;-같은-출처-정책-same-origin-policy&#34;&gt;✋🏼 같은 출처 정책 (Same-Origin Policy)&lt;/h1&gt;
&lt;p&gt;웹은 &lt;strong&gt;같은 출처 정책&lt;/strong&gt;이라는 것을 시행합니다. 기본적으로 우리는
요청을 하는 곳과 &lt;strong&gt;같은 출처&lt;/strong&gt;에 있는 자원만 접근할 수 있습니다! 💪🏼
예를 들어 &lt;code&gt;https://mywebsite.com&lt;/code&gt;에서 &lt;code&gt;https://mywebsite.com/image1.png&lt;/code&gt;에
있는 이미지를 불러 오는 것은 괜찮습니다.&lt;/p&gt;
&lt;p&gt;만약 자원이 다른 (하위)도메인 또는 다른 프로토콜, 다른 포트에 있는 경우
다른 출처(cross-origin)에 있다고 말합니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/origin.png&#34; alt=&#34;origin&#34;&gt;&lt;/p&gt;
&lt;p&gt;좋아요, 그런데 왜 같은 출처 정책까지 있는 거죠?&lt;/p&gt;
&lt;p&gt;만약 같은 출처 정책이 없었고 이모가 페이스북에서 보낸
수많은 바이러스 링크 중 하나를 실수로 클릭했다고 가정해 보세요.
이 링크가 여러분을 &amp;ldquo;유해 사이트&amp;quot;로 리다이렉션 시킵니다.
은행 사이트를 불러 오는 iframe이 내장된 웹사이트로요.
그리고 설정되어 있던 쿠키를 통해 성공적으로 로그인합니다! 😬&lt;/p&gt;
&lt;p&gt;&amp;ldquo;유해 사이트&amp;rdquo; 개발자들은 본인 계좌로 돈을 보내기 위해
웹사이트가 이 iframe에 접근하고 은행 사이트 DOM 콘텐츠에
접근할 수 있게끔 만들었습니다!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;역주: 위 공격은 CSRF (Cross-Site Request Forgery) 공격에 해당되며
XSS (Cross-Site Scripting)도 같은 출처 정책과 관련된 공격입니다.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/wo-same-origin-policy.gif&#34; alt=&#34;wo-same-origin-policy&#34;&gt;&lt;/p&gt;
&lt;p&gt;맞습니다&amp;hellip; 이건 엄청난 보안 위험이에요! 우리는 그 누구도 접근하지 못하길 바랍니다. 😧&lt;/p&gt;
&lt;p&gt;운 좋게도 여기서 같은 출처 정책이 우리를 도와줍니다!
이 정책은 &lt;strong&gt;같은 출처&lt;/strong&gt; 자원만 접근할 수 있도록 합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/with-policy.gif&#34; alt=&#34;with-policy&#34;&gt;&lt;/p&gt;
&lt;p&gt;이 경우 &lt;code&gt;www.evilwebsite.com&lt;/code&gt;은 다른 출처인 &lt;code&gt;www.bank.com&lt;/code&gt; 자원에
접근하려고 했습니다! 같은 출처 정책은 이러한 일이 발생하지 않도록 접근을
차단하고 유해 사이트 개발자가 우리의 은행 데이터에 접근할 수 없도록 만듭니다. 🥳&lt;/p&gt;
&lt;p&gt;좋아요, 그럼&amp;hellip; 이것이 CORS와 무슨 관계가 있나요?&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;-클라이언트-측-cors&#34;&gt;🔥 클라이언트 측 CORS&lt;/h1&gt;
&lt;p&gt;같은 출처 정책은 실제로 스크립트에만 적용되지만, 브라우저는 자바스크립트에서
요청하는 것까지 이 정책을 &amp;ldquo;확장&amp;quot;시킵니다. 기본적으로 우리는 &lt;strong&gt;같은 출처&lt;/strong&gt;에서
가져온 자원만 접근할 수 있습니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/client-side-cors.gif&#34; alt=&#34;client-side-cors&#34;&gt;&lt;/p&gt;
&lt;p&gt;흠, 하지만&amp;hellip; 때로는 다른 출처 자원에 접근해야만 합니다. 🤔
프런트엔드가 데이터를 불러 오기 위해 백엔드 API를 호출해야 할 수도 있습니다.
그래서 브라우저는 다른 출처 요청을 안전하게 만들기 위해 &lt;strong&gt;CORS&lt;/strong&gt;라는
메커니즘을 사용합니다! 🥳&lt;/p&gt;
&lt;p&gt;CORS는 &lt;strong&gt;다른 출처 자원 공유(Cross-Origin Resource Sharing)&lt;/strong&gt; 를 말합니다.
브라우저가 같은 출처가 아닌 자원에 접근할 수 없게 하지만, CORS를 사용하여
이러한 보안 제한을 약간 바꿔서 다른 출처 자원에 안전하게 접근할 수 있습니다. 🎉&lt;/p&gt;
&lt;p&gt;사용자 에이전트(예: 브라우저)는 차단될 &lt;strong&gt;다른 출처 요청을 허용&lt;/strong&gt;하기 위해
HTTP 응답의 특정 CORS 헤더 값에 따라 CORS 메커니즘을 사용할 수 있습니다! ✅&lt;/p&gt;
&lt;p&gt;다른 출처 요청을 하면 클라이언트는 자동으로 HTTP 요청에
&lt;code&gt;Origin&lt;/code&gt; 헤더를 추가합니다. &lt;code&gt;Origin&lt;/code&gt; 헤더 값은 요청을 보낸 출처입니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/origin-header.gif&#34; alt=&#34;origin-header&#34;&gt;&lt;/p&gt;
&lt;p&gt;브라우저가 다른 출처 자원에 접근할 수 있도록 클라이언트의 &lt;code&gt;Origin&lt;/code&gt; 헤더는
해당 서버에게 다른 출처 요청 허용 여부를 명시한 응답 헤더를 요구하는 것입니다!&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;-서버-측-cors&#34;&gt;💻 서버 측 CORS&lt;/h1&gt;
&lt;p&gt;서버 개발자는 HTTP 응답에 헤더를 추가하여 다른 출처 요청이 허용되는지
확인시켜줄 수 있습니다. 이 헤더는 모두 &lt;code&gt;Access-Control-*&lt;/code&gt;로 시작합니다. 🔥
이 CORS 응답 헤더의 값에 따라 브라우저는 일반적으로 같은 출처
정책에 의해 차단되는 특정 다른 출처 응답을 허용할 수 있습니다!&lt;/p&gt;
&lt;p&gt;사용할 수 있는 &lt;a href=&#34;https://fetch.spec.whatwg.org/#http-responses&#34;&gt;여러 CORS 헤더&lt;/a&gt;가
있지만 브라우저가 다른 출처 자원 접근을 허용하기 위해 필요한 헤더는 하나입니다.
바로 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;입니다! 🙂 이 헤더 값은 서버의
&lt;strong&gt;자원에 접근할 수 있는 출처&lt;/strong&gt;를 지정합니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://mywebsite.com&lt;/code&gt;에서 접근할 서버를 개발 중인 경우
&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 헤더에 해당 도메인을 추가할 수 있습니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/access-control-allow-origin.gif&#34; alt=&#34;access-control-allow-origin&#34;&gt;&lt;/p&gt;
&lt;p&gt;Awesome! 🎉 이제 서버가 클라이언트로 보내는 응답에 이 헤더가 추가됩니다.
그럼 &lt;code&gt;https://mywebsite.com&lt;/code&gt;에서 요청을 보내도 &lt;code&gt;https://api.mywebsite.com&lt;/code&gt;
&lt;strong&gt;자원을 가져가는 걸 같은 출처 정책이 더 이상 막지 않습니다&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/allowed-origins.gif&#34; alt=&#34;allowed-origins&#34;&gt;&lt;/p&gt;
&lt;p&gt;브라우저 내부 CORS 메커니즘은 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 헤더 값이
요청할 때 보낸 &lt;code&gt;Origin&lt;/code&gt; 값과 동일한지 확인합니다. 🤚🏼&lt;/p&gt;
&lt;p&gt;이 경우 요청 출처는 &lt;code&gt;https://www.mywebsite.com&lt;/code&gt;으로
응답 헤더 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;에 실려 있습니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/response-header.gif&#34; alt=&#34;response-header&#34;&gt;&lt;/p&gt;
&lt;p&gt;Perfect! 🎉 다른 출처 자원을 성공적으로 받을 수 있습니다!
그러면 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 헤더에 실려 있지 않은
출처에서 다른 출처 자원에 접근하려고 하면 어떻게 될까요? 🤔&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/cors-error.gif&#34; alt=&#34;cors-error&#34;&gt;&lt;/p&gt;
&lt;p&gt;맞아요. CORS는 때때로 악명 높은 에러를 던지죠!
하지만 우리는 이제 이것이 오히려 이치에 맞다는 것을 알게 되었습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#39;Access-Control-Allow-Origin&amp;#39; 헤더 값이
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;제공된 출처(Origin)와 다른 &amp;#39;https://www.mywebsite.com&amp;#39;입니다.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 경우에 제공된 출처는 &lt;code&gt;https://www.anotherwebsite.com&lt;/code&gt;입니다.
그러나 서버가 보낸 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 헤더에는 해당 출처가
없습니다! CORS가 요청을 차단했고 우리의 코드는 가져온 데이터에 접근할
수 없습니다. 😃&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;또한 CORS를 사용하면 허용되는 Origin 값으로 와일드카드 &lt;code&gt;*&lt;/code&gt;를
추가할 수 있습니다. 이것은 모든 출처가 요청된 자원에
접근할 수 있다는 것이니 주의하세요!&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;은 우리가 제공할 수 있는 수많은 CORS 헤더
중 하나입니다. 서버 개발자는 특정 요청을 허용하거나 차단하기 위해
CORS 정책을 수정할 수 있습니다! 💪🏼&lt;/p&gt;
&lt;p&gt;또 하나 자주 사용되는 헤더는 &lt;code&gt;Access-Control-Allow-Methods&lt;/code&gt;입니다!
CORS가 나열된 메서드들만 다른 출처 요청을 허용합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/access-control-allow-methods.gif&#34; alt=&#34;access-control-allow-methods&#34;&gt;&lt;/p&gt;
&lt;p&gt;이 경우 &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; 메서드 요청만 허용됩니다!
&lt;code&gt;PATCH&lt;/code&gt; 또는 &lt;code&gt;DELETE&lt;/code&gt;와 같은 다른 메서드들은 차단됩니다. ❌&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;다른 CORS 헤더는 무엇이 있으며 어떤 용도로 사용되는지 궁금하다면
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#The_HTTP_response_headers&#34;&gt;이 목록을 확인해보세요&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;CORS는 실제로 &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; 요청에 대해서는
다르게 처리합니다! 🙃 이렇게 &amp;ldquo;&lt;em&gt;단순하지 않은&lt;/em&gt;&amp;rdquo; 요청은
&lt;strong&gt;예비 요청&lt;/strong&gt; 이라는 것을 만듭니다!&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;-예비-요청-preflighted-requests&#34;&gt;🚀 예비 요청 (Preflighted Requests)&lt;/h1&gt;
&lt;p&gt;CORS에는 &lt;strong&gt;단순 요청&lt;/strong&gt;과 &lt;strong&gt;예비 요청&lt;/strong&gt;이라는 두 가지 요청이 있습니다.
요청이 단순 요청인지 예비 요청인지는 요청이 가진 일부 값에 따라
달라집니다(걱정하지 마세요. 이 내용을 외울 필요는 없습니다ㅋㅋㅋ).&lt;/p&gt;
&lt;p&gt;단순 요청은 &lt;code&gt;GET&lt;/code&gt; 또는 &lt;code&gt;POST&lt;/code&gt; 메서드이고 사용자 정의 헤더가 없는 경우입니다!
예비 요청은 &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt; 또는 &lt;code&gt;DELETE&lt;/code&gt; 메서드와 같은 다른 모든 요청입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;단순 요청이 되기 위해 어떤 요구 사항을 충족해야 하는지 궁금하다면 MDN에
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests&#34;&gt;유용한 목록&lt;/a&gt;이 있습니다!&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;알겠어요, 근데 &amp;ldquo;예비 요청&amp;quot;은 뭐고 왜 이런 일이 일어나는 건가요?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;실제 요청을 전송하기 전에 클라이언트는 예비 요청을 생성합니다!
예비 요청에는 &lt;code&gt;Access-Control-Request-*&lt;/code&gt; 헤더에 실제로 보내려는
요청 정보가 포함되어 있습니다. 🔥&lt;/p&gt;
&lt;p&gt;이 헤더는 브라우저가 수행하려는 실제 요청 정보를 서버에 제공합니다.
여기에는 요청 &lt;strong&gt;메서드&lt;/strong&gt;, &lt;strong&gt;추가 헤더&lt;/strong&gt; 등이 포함됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/preflighted-request.gif&#34; alt=&#34;preflighted-request&#34;&gt;&lt;/p&gt;
&lt;p&gt;서버는 이 예비 요청을 수신하고 서버 CORS 헤더와 함께 텅 빈 HTTP 응답을 보냅니다!
브라우저는 CORS 헤더 외에 아무 데이터가 없는 예비 응답을 수신하고
해당 HTTP 요청이 허용되는지 여부를 확인합니다! ✅&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/preflighted-response.gif&#34; alt=&#34;preflighted-response&#34;&gt;&lt;/p&gt;
&lt;p&gt;이런 경우 브라우저가 실제 요청을 서버로 보내면
서버는 요청 받은 데이터를 응답합니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/actual-request.gif&#34; alt=&#34;actual-request&#34;&gt;&lt;/p&gt;
&lt;p&gt;하지만 허용되지 않을 경우에는 CORS가 예비 요청을 차단하고 실제 요청은
절대 보내지지 않습니다. ✋🏼 예비 요청은 아직 CORS 정책이 적용되지 않은 서버의
자원에 접근하거나 수정할 수 없도록 하는 좋은 방법입니다! 서버가 잠재적으로
원하지 않는 다른 출처 요청으로부터 보호됩니다.😃&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 서버 통신 횟수를 줄이기 위해 CORS 요청에 &lt;code&gt;Access-Control-Max-Age&lt;/code&gt;
헤더를 추가하여 예비 요청에 대한 응답을 캐시할 수 있습니다!
그럼 브라우저는 새로운 예비 요청을 보내는 대신 캐시된 응답을
사용할 수 있습니다!&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;-자격-증명credentials&#34;&gt;🍪 자격 증명(Credentials)&lt;/h1&gt;
&lt;p&gt;쿠키, 인가 헤더, TLS 인증서는 기본적으로 같은 출처 요청에서만 설정됩니다!
그러나 이러한 자격 증명을 다른 출처 요청에 사용할 수도 있습니다.
서버가 사용자를 식별하기 위해 사용하는 쿠키를 요청에 포함시킬 수도 있습니다!&lt;/p&gt;
&lt;p&gt;기본적으로 CORS에 자격 증명이 포함되어 있지 않지만
CORS 헤더 &lt;code&gt;Access-Control-Allow-Credentials&lt;/code&gt;를 추가할 수 있습니다! 🎉&lt;/p&gt;
&lt;p&gt;다른 출처 요청에 쿠키 및 기타 인가 헤더를 포함시키려면
요청에 &lt;code&gt;withCredentials&lt;/code&gt; 필드를 &lt;code&gt;true&lt;/code&gt;로 설정하고
응답에 &lt;code&gt;Access-Control-Allow-Credentials&lt;/code&gt; 헤더를 추가해야 합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/access-control-allow-credentials.gif&#34; alt=&#34;access-control-allow-credentials&#34;&gt;&lt;/p&gt;
&lt;p&gt;준비 끝! 이제 우리는 다른 출처 요청에 자격 증명을 포함시킬 수 있습니다. 🥳&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;제가 생각하기엔 우리 모두 CORS 오류가 가끔 짜증나지만
브라우저에서 다른 출처 요청을 안전하게 해준다는 것은 놀라울 거에요.
(좀 더 많은 사랑을 받아야 합니다 ㅋㅋㅋ) ✨&lt;/p&gt;
&lt;p&gt;제가 이 블로그 포스트에서 다룰 수 있었던 것보다 더 많은 자료들이 있습니다!
더 궁금하다면 운 좋게도
&lt;a href=&#34;https://livebook.manning.com/book/cors-in-action/part-1/&#34;&gt;CORS in Action&lt;/a&gt;이나
&lt;a href=&#34;https://www.w3.org/wiki/CORS_Enabled&#34;&gt;W3 규격&lt;/a&gt;과 같은 좋은 자료들이 있습니다. 💪🏼&lt;/p&gt;
&lt;p&gt;그리고 언제나 그랬듯이 저(Lydia Hallie)와 소통해요! 😊&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;✨&lt;/th&gt;
          &lt;th&gt;👩🏽‍💻&lt;/th&gt;
          &lt;th&gt;💻&lt;/th&gt;
          &lt;th&gt;💡&lt;/th&gt;
          &lt;th&gt;📷&lt;/th&gt;
          &lt;th&gt;💌&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.twitter.com/lydiahallie&#34;&gt;Twitter&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.instagram.com/theavocoder&#34;&gt;Instagram&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.github.com/lydiahallie&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.linkedin.com/in/lydia-hallie&#34;&gt;LinkedIn&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/channel/UC4EWKIKdKiDtAscQ9BIXwUw&#34;&gt;YouTube&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;mailto:lydiahallie.dev@gmail.com&#34;&gt;Email&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
- https://markruler.github.io/posts/web/cs-visualized-cors/ - Im Changsu | Since 2020</description>
        </item>
    
    
    
        <item>
        <title>Go로 밑바닥부터 만드는 BitTorrent 클라이언트</title>
        <link>https://markruler.github.io/posts/go/building-bittorrent-client/</link>
        <pubDate>Mon, 28 Dec 2020 14:46:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/go/building-bittorrent-client/</guid>
        <description>임창수 https://markruler.github.io/posts/go/building-bittorrent-client/ -&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jse.li/posts/torrent/&#34;&gt;Jesse Li의 Building a BitTorrent client from the ground up in Go (2020-01-04)&lt;/a&gt;를 번역한 글입니다.&lt;/li&gt;
&lt;li&gt;저자의 허락을 받고 번역했습니다.&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;거두절미(tl;dr):&lt;/strong&gt; The Pirate Bay를 방문하고 mp3 파일이 나타나기까지 무슨 일이 일어나는 것일까요?
이 글에서는 데비안(Debian)을 다운로드할 수 있을 정도의 비트토렌트 프로토콜을 구현할 것입니다.
바로 &lt;a href=&#34;https://github.com/veggiedefender/torrent-client/&#34;&gt;소스 코드&lt;/a&gt;를 보거나 &lt;a href=&#34;#%EB%AA%A8%EB%91%90-%ED%95%A9%EC%B9%98%EA%B8%B0&#34;&gt;마지막 부분&lt;/a&gt;으로 넘어갈 수 있습니다.&lt;/p&gt;
&lt;p&gt;비트토렌트(BitTorrent)는 인터넷을 통해 파일을 다운로드하고 배포하기 위한 프로토콜입니다.
다운로더가 중앙 서버와 연결하는 기존의 클라이언트/서버 관계 (예: 넷플릭스에서
영화를 보거나 지금 읽고 있는 웹 페이지를 불러 오는 것)와 달리,
&lt;strong&gt;피어(peer)&lt;/strong&gt; 라고 불리는 비트토렌트 네트워크 참여자들은 &lt;em&gt;서로에게서&lt;/em&gt; 파일 조각을 다운로드합니다.
이것이 &lt;strong&gt;P2P(peer-to-peer)&lt;/strong&gt; 프로토콜입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/client-server-p2p.png&#34; alt=&#34;client-server-p2p&#34;&gt;&lt;/p&gt;
&lt;p&gt;이 프로토콜은 지난 20년 동안 진화했으며, 다양한 사람들과 조직들이 암호화(encryption),
비공개 토렌트(private torrent), 새로운 피어 탐색법과 같은 기능들을 추가했습니다.
우리는 주말에 구현할 수 있을 정도의 프로젝트 사이즈로 만들기 위해 &lt;a href=&#34;https://www.bittorrent.org/beps/bep_0003.html&#34;&gt;2001년 규격&lt;/a&gt;을 구현할 것입니다.&lt;/p&gt;
&lt;p&gt;저의 실험 재료로 적당한 350MB의 &lt;a href=&#34;https://cdimage.debian.org/debian-cd/current/amd64/bt-cd/#indexlist&#34;&gt;데비안 ISO&lt;/a&gt; 파일을 사용하겠습니다.
널리 사용되는 리눅스 배포판은 빠르고 협력적인 피어들이 많이 연결될 것입니다.
그리고 불법 복제 콘텐츠 다운로드와 관련된 법적, 윤리적 문제를 피할 수 있습니다.&lt;/p&gt;
&lt;h1 id=&#34;피어-찾기&#34;&gt;피어 찾기&lt;/h1&gt;
&lt;p&gt;다음과 같은 문제가 있습니다. 우리는 비트토렌트로 파일을 다운로드하려고 하지만 P2P 프로토콜이고 파일을 다운로드할 피어를 찾을 수 없습니다.
이것은 마치 새로운 도시로 이사해서 친구를 사귀는 것과 같습니다. 어쩌면 우리가 동네 술집이나 밋업 그룹에 가는 것처럼요!
중앙 집중식 서버는 피어들이 서로를 알 수 있도록 알려주는 &lt;strong&gt;트래커(tracker)&lt;/strong&gt; 의 핵심입니다.
이들은 HTTP&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 웹 서버일 뿐이며, 데비안의 서버는 &lt;a href=&#34;http://bttracker.debian.org:6969/stat&#34;&gt;http://bttracker.debian.org:6969/stat&lt;/a&gt;에서 찾을 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/trackers.png&#34; alt=&#34;trackers&#34;&gt;&lt;/p&gt;
&lt;p&gt;물론 이러한 중앙 서버는 피어들이 불법 컨텐츠를 교환할 수 있게 둔다면 정부의 단속을 받기 쉽습니다.
여러분은 불법 컨텐츠로 인해 폐쇄된 TorrentSpy, Popcorn Time, 그리고 KickassTorrents 와 같은 트래커에 대해 읽었을 수 있습니다.
오늘날에는 &lt;strong&gt;피어 탐색&lt;/strong&gt;도 분산 프로세스로 만들어 중간자를 생략했습니다 (역주: Trackerless Torrent).
우리가 이것까지 구현하지는 않지만 만약 관심이 있다면 &lt;strong&gt;DHT (Distributed Hash Table)&lt;/strong&gt;, &lt;strong&gt;PEX (Peer exchange)&lt;/strong&gt;, 그리고 &lt;strong&gt;자석 링크 (magnet link)&lt;/strong&gt; 같은 몇몇 용어들을 찾아보세요.&lt;/p&gt;
&lt;h2 id=&#34;torrent-파일-파싱-parsing-구문-분석&#34;&gt;.torrent 파일 파싱 (parsing: 구문 분석)&lt;/h2&gt;
&lt;p&gt;.torrent 파일에는 토렌트를 통해 다운로드할 수 있는(torrentable) 파일의 내용 및 트래커 연결에 대한 정보가 포함됩니다.
토렌트를 다운로드 하기 위해 필요한 것은 이것뿐입니다. 데비안의 .torrent 파일은 다음과 같습니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;d8:announce41:http://bttracker.debian.org:6969/announce7:comment35:&amp;#34;Debian CD from cdimage.debian.org&amp;#34;13:creation datei1573903810e9:httpseedsl145:https://cdimage.debian.org/cdimage/release/10.2.0//srv/cdbuilder.debian.org/dst/deb-cd/weekly-builds/amd64/iso-cd/debian-10.2.0-amd64-netinst.iso145:https://cdimage.debian.org/cdimage/archive/10.2.0//srv/cdbuilder.debian.org/dst/deb-cd/weekly-builds/amd64/iso-cd/debian-10.2.0-amd64-netinst.isoe4:infod6:lengthi351272960e4:name31:debian-10.2.0-amd64-netinst.iso12:piece lengthi262144e6:pieces26800:�����PS�^�� (binary blob of the hashes of each piece)ee
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;B인코드(Bencode)&lt;/strong&gt; 형식으로 인코딩되어 있고, 우리는 이것을 디코딩해야 합니다.&lt;/p&gt;
&lt;p&gt;B인코드는 JSON과 거의 동일한 유형(문자열, 정수, 리스트 및 딕셔너리)의 구조로 인코딩할 수 있습니다.
B인코딩된 데이터는 JSON만큼 사람이 쉽게 읽고 쓸 수 있는 것은 아니지만 바이너리 데이터를 효율적으로
처리할 수 있으며 스트림에서 파싱하는 것이 매우 간단합니다.
문자열은 길이 접두사가 붙으며 &lt;code&gt;4:spam&lt;/code&gt;와 같이 나타냅니다.
정수는 마커로 시작하고 끝나기 때문에 &lt;code&gt;7&lt;/code&gt;의 경우 &lt;code&gt;i7e&lt;/code&gt;로 인코딩됩니다.
리스트와 딕셔너리는 비슷한 방식으로 인코딩됩니다. &lt;code&gt;l4:spami7ee&lt;/code&gt;는 &lt;code&gt;[&#39;spam&#39;, 7]&lt;/code&gt;을, &lt;code&gt;d4:spami7ee&lt;/code&gt;는 &lt;code&gt;{spam: 7}&lt;/code&gt;을 나타냅니다.&lt;/p&gt;
&lt;p&gt;.torrent 파일을 보기 쉽게 다듬으면 다음과 같습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;:announce
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f60&#34;&gt;41&lt;/span&gt;:http:&lt;span style=&#34;color:#0f0&#34;&gt;//bttracker.debian.org:6969/announce
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;:comment
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f60&#34;&gt;35&lt;/span&gt;:&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Debian CD from cdimage.debian.org&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f60&#34;&gt;13&lt;/span&gt;:creation date
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i1573903810e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;:info
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;:length
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i351272960e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;:name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f60&#34;&gt;31&lt;/span&gt;:debian-&lt;span style=&#34;color:#f60&#34;&gt;10.2.0&lt;/span&gt;-amd64-netinst.iso
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f60&#34;&gt;12&lt;/span&gt;:piece length
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i262144e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;:pieces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f60&#34;&gt;26800&lt;/span&gt;:�����PS�^�� (binary blob of the hashes of each piece)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 파일에서는 트래커의 URL, 생성 날짜(유닉스 타임스탬프), 파일 이름 및 크기,
다운로드하려는 파일 &lt;strong&gt;조각&lt;/strong&gt; 의 SHA-1 해시가 들어 있는 큰 바이너리 블롭을 찾을 수 있습니다.
조각의 정확한 크기는 토렌트마다 다르지만 일반적으로 256KB에서 1MB 사이입니다.
이것은 큰 파일이 수천 개의 조각으로 구성될 수 있다는 것을 의미합니다.
피어들에게서 이 조각들을 다운로드해서 토렌트 파일에 있는 해시와 대조해 보고, 조립해 보고, 파일을 가지게 되는 겁니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/pieces.png&#34; alt=&#34;pieces&#34;&gt;&lt;/p&gt;
&lt;p&gt;이 메커니즘을 통해 각 조각의 무결성을 검증할 수 있습니다.
비트토렌트는 이를 통해 우발적인 데이터 손상이나 의도적인 &lt;strong&gt;토렌트 포이즈닝&lt;/strong&gt;(&lt;a href=&#34;https://en.wikipedia.org/wiki/Torrent_poisoning&#34;&gt;torrent poisoning&lt;/a&gt;) 을 막을 수 있습니다.
공격자가 역상 공격(&lt;a href=&#34;https://en.wikipedia.org/wiki/Preimage_attack&#34;&gt;preimage attack&lt;/a&gt;)을 통해 SHA-1을 해독할 수 없다면, 우리는 요청한 컨텐츠를 정확하게 받을 수 있습니다.&lt;/p&gt;
&lt;p&gt;B인코드 파서를 만드는 것은 정말 재미있겠지만, 파싱은 이 글의 목적이 아닙니다.
이해하기 쉬운 Fredrik Lundh의 &lt;a href=&#34;https://effbot.org/zone/bencode.htm&#34;&gt;50줄짜리 파서&lt;/a&gt;를 찾았지만,
이 프로젝트에서는 &lt;a href=&#34;https://github.com/jackpal/bencode-go&#34;&gt;github.com/jackpal/bencode-go&lt;/a&gt; 을 사용했습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;github.com/jackpal/bencode-go&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;type&lt;/span&gt; bencodeInfo &lt;span style=&#34;color:#f00&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Pieces      &lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#87ceeb&#34;&gt;`bencode:&amp;#34;pieces&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PieceLength &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;`bencode:&amp;#34;piece length&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Length      &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;`bencode:&amp;#34;length&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Name        &lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#87ceeb&#34;&gt;`bencode:&amp;#34;name&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;type&lt;/span&gt; bencodeTorrent &lt;span style=&#34;color:#f00&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Announce &lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;      &lt;span style=&#34;color:#87ceeb&#34;&gt;`bencode:&amp;#34;announce&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Info     bencodeInfo &lt;span style=&#34;color:#87ceeb&#34;&gt;`bencode:&amp;#34;info&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Open 토렌트 파일을 파싱합니다&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;Open&lt;/span&gt;(r io.Reader) (*bencodeTorrent, &lt;span style=&#34;color:#ee82ee&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bto := bencodeTorrent{}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  err := bencode.&lt;span style=&#34;color:#ff0&#34;&gt;Unmarshal&lt;/span&gt;(r, &amp;amp;bto)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;, err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &amp;amp;bto, &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/torrentfile/torrentfile.go&#34;&gt;github.com/veggiedefender/torrent-client/torrentfile/torrentfile.go&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;저는 구조체를 상대적으로 평평하게 유지하는 것을 좋아하고
애플리케이션 구조체를 직렬화 구조체와 분리하는 것을 좋아하기 때문에
&lt;code&gt;TorrentFile&lt;/code&gt;이라는 다른 평탄한 구조체를 내보내고
두 구조체 사이에서 변환할 몇 가지 헬퍼 함수를 작성했습니다.&lt;/p&gt;
&lt;p&gt;특히 각각의 해시에 쉽게 접근할 수 있도록 &lt;code&gt;조각&lt;/code&gt;(이전의 문자열)을 해시 조각(각각 &lt;code&gt;[20]byte&lt;/code&gt;)으로 분할합니다.
또한 (이름, 크기, 조각 해시를 포함한) B인코딩된 &lt;code&gt;info&lt;/code&gt; 딕셔너리의 SHA-1 해시를 계산했습니다.
이것을 &lt;strong&gt;infohash&lt;/strong&gt;라고 하며 트래커 및 피어와 통신할 때 파일 식별자 역할을 합니다.
이에 대해서는 나중에 더 살펴보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/info-hash.png&#34; alt=&#34;info-hash&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;type&lt;/span&gt; TorrentFile &lt;span style=&#34;color:#f00&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Announce    &lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  InfoHash    [&lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PieceHashes [][&lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PieceLength &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Length      &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Name        &lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; (bto bencodeTorrent) &lt;span style=&#34;color:#ff0&#34;&gt;toTorrentFile&lt;/span&gt;() (TorrentFile, &lt;span style=&#34;color:#ee82ee&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;// …&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/torrentfile/torrentfile.go#L120-L138&#34;&gt;github.com/veggiedefender/torrent-client/torrentfile/torrentfile.go#L120-L138&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;트래커로부터-피어-찾기&#34;&gt;트래커로부터 피어 찾기&lt;/h2&gt;
&lt;p&gt;이제 파일과 트래커에 대해 알았으니 트래커와 통신하여 피어로서의 존재를 &lt;strong&gt;알리고&lt;/strong&gt; 다른 피어들의 목록을 검색해 보겠습니다.
.torrent 파일에 제공된 &amp;lsquo;announce&amp;rsquo; URL에 몇 가지 쿼리 파라미터와 함께 GET 요청을 하면 됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; (t *TorrentFile) &lt;span style=&#34;color:#ff0&#34;&gt;buildTrackerURL&lt;/span&gt;(peerID [&lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;, port &lt;span style=&#34;color:#ee82ee&#34;&gt;uint16&lt;/span&gt;) (&lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#ee82ee&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  base, err := url.&lt;span style=&#34;color:#ff0&#34;&gt;Parse&lt;/span&gt;(t.Announce)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  params := url.Values{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;info_hash&amp;#34;&lt;/span&gt;:  []&lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;{string(t.InfoHash[:])},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;peer_id&amp;#34;&lt;/span&gt;:    []&lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;{string(peerID[:])},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;:       []&lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;{strconv.&lt;span style=&#34;color:#ff0&#34;&gt;Itoa&lt;/span&gt;(int(Port))},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;uploaded&amp;#34;&lt;/span&gt;:   []&lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;downloaded&amp;#34;&lt;/span&gt;: []&lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;compact&amp;#34;&lt;/span&gt;:    []&lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;:       []&lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;{strconv.&lt;span style=&#34;color:#ff0&#34;&gt;Itoa&lt;/span&gt;(t.Length)},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  base.RawQuery = params.&lt;span style=&#34;color:#ff0&#34;&gt;Encode&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; base.&lt;span style=&#34;color:#ff0&#34;&gt;String&lt;/span&gt;(), &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/torrentfile/tracker.go#L19-L35&#34;&gt;github.com/veggiedefender/torrent-client/torrentfile/tracker.go#L19-L35&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여기서 중요한 것은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;info_hash&lt;/strong&gt;: 다운로드하려는 파일을 식별합니다. 이것은 우리가 B인코딩된 &lt;code&gt;info&lt;/code&gt; 딕셔너리에서 계산한 infohash입니다. 트래커는 이를 사용하여 어떤 피어를 보여줄지 결정합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peer_id&lt;/strong&gt;: 트래커와 피어들에게 &lt;code&gt;우리&lt;/code&gt;를 식별시키기 위한 20바이트 이름입니다. 이를 위해 20개의 랜덤 바이트를 생성합니다. 실제 비트토렌트 클라이언트는 클라이언트 소프트웨어와 버전을 식별하는 &lt;code&gt;-TR2940-k8hj0wgej6ch&lt;/code&gt;와 같은 ID를 가지고 있습니다. 여기서 TR2940은 전송 클라이언트 2.94를 의미합니다. &lt;a href=&#34;https://www.bittorrent.org/beps/bep_0020.html&#34;&gt;(Peer ID Conventions)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/info-hash-peer-id.png&#34; alt=&#34;info-hash-peer-id&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;트래커-응답-분석&#34;&gt;트래커 응답 분석&lt;/h2&gt;
&lt;p&gt;다음과 같이 B인코딩된 응답을 받았습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;:interval
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i900e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;:peers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f60&#34;&gt;252&lt;/span&gt;:(another &lt;span style=&#34;color:#ee82ee&#34;&gt;long&lt;/span&gt; binary blob)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Interval&lt;/code&gt;은 얼마나 자주 트래커에 다시 연결하여 피어 목록을 새로 고쳐야 하는지 알려줍니다.
900이라는 값은 15분(900초)마다 다시 연결해야 함을 의미합니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Peers&lt;/code&gt;는 각 피어의 IP 주소를 포함하는 또 다른 긴 바이너리 블롭입니다.
&lt;code&gt;6바이트의 그룹들&lt;/code&gt;로 이루어져 있습니다.
각 그룹의 처음 4바이트는 피어의 IP 주소를 나타냅니다. 각 1 바이트는 IP 숫자를 나타냅니다.
마지막 2바이트는 포트 번호를 빅-엔디안 &lt;code&gt;uint16&lt;/code&gt;으로 나타냅니다.
&lt;strong&gt;빅-엔디안&lt;/strong&gt; 또는 &lt;strong&gt;네트워크 바이트 순서&lt;/strong&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;는 바이트 그룹을 왼쪽부터 담아 정수로 해석하는 것을 말합니다.
예를 들어 &lt;code&gt;0x1A&lt;/code&gt;, &lt;code&gt;0xE1&lt;/code&gt; 바이트는 &lt;code&gt;0x1AE1&lt;/code&gt; 또는 십진수로 6881을 만듭니다.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/address.png&#34; alt=&#34;address&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Peer 피어의 연결 정보를 인코딩합니다&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;type&lt;/span&gt; Peer &lt;span style=&#34;color:#f00&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  IP   net.IP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Port &lt;span style=&#34;color:#ee82ee&#34;&gt;uint16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Unmarshal 버퍼에서 피어의 IP 주소와 포트 번호를 파싱합니다&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;Unmarshal&lt;/span&gt;(peersBin []&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;) ([]Peer, &lt;span style=&#34;color:#ee82ee&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; peerSize = &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#0f0&#34;&gt;// 4 for IP, 2 for port&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  numPeers := len(peersBin) / peerSize
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; len(peersBin)%peerSize != &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    err := fmt.&lt;span style=&#34;color:#ff0&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Received malformed peers&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;, err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  peers := make([]Peer, numPeers)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;; i &amp;lt; numPeers; i++ {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    offset := i * peerSize
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    peers[i].IP = net.&lt;span style=&#34;color:#ff0&#34;&gt;IP&lt;/span&gt;(peersBin[offset : offset+&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    peers[i].Port = binary.BigEndian.&lt;span style=&#34;color:#ff0&#34;&gt;Uint16&lt;/span&gt;(peersBin[offset+&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; : offset+&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; peers, &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/peers/peers.go&#34;&gt;github.com/veggiedefender/torrent-client/peers/peers.go&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;피어로부터-다운로드하기&#34;&gt;피어로부터 다운로드하기&lt;/h1&gt;
&lt;p&gt;이제 피어 목록이 있습니다.
피어와 연결하여 조각을 다운로드할 시간입니다!
우리는 이 과정을 몇 단계로 나눌 수 있습니다.
각 피어에 대해 다음을 수행하고자 합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;피어와 TCP 연결을 시작합니다. 이것은 전화를 거는 것과 같습니다.&lt;/li&gt;
&lt;li&gt;양방향 비트토렌트 &lt;strong&gt;핸드셰이크&lt;/strong&gt;를 완료합니다.. &lt;em&gt;&amp;ldquo;안녕?&amp;rdquo; &amp;ldquo;안녕.&amp;rdquo;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;조각&lt;/strong&gt;을 다운로드 하기 위해 &lt;strong&gt;메시지&lt;/strong&gt;를 교환합니다. &lt;em&gt;&amp;ldquo;231번 조각 주세요.&amp;rdquo;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tcp-연결&#34;&gt;TCP 연결&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conn, err := net.&lt;span style=&#34;color:#ff0&#34;&gt;DialTimeout&lt;/span&gt;(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;, peer.&lt;span style=&#34;color:#ff0&#34;&gt;String&lt;/span&gt;(), &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;*time.Second)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;, err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/client/client.go#L65-L69&#34;&gt;github.com/veggiedefender/torrent-client/client/client.go#L65-L69&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;연결할 수 없는 피어에 너무 많은 시간을 낭비하지 않도록 시간 제한을 설정했습니다.
대부분의 경우 표준 TCP 연결입니다.&lt;/p&gt;
&lt;h2 id=&#34;핸드셰이크-완료&#34;&gt;핸드셰이크 완료&lt;/h2&gt;
&lt;p&gt;피어와의 연결을 설정했지만 다음과 같은 가정을 검증하기 위해 핸드셰이크를 수행하려고 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;피어는 비트토렌트 프로토콜을 사용하여 통신할 수 있습니다.&lt;/li&gt;
&lt;li&gt;피어는 우리의 메시지를 이해하고 응답할 수 있습니다.&lt;/li&gt;
&lt;li&gt;피어는 우리가 원하는 파일을 가지고 있거나 적어도 우리가 무엇을 말하고 있는지 알고 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/handshake.png&#34; alt=&#34;handshake&#34;&gt;&lt;/p&gt;
&lt;p&gt;아버지는 제게 악수(handshake)를 잘 하는 비결은 손을 단단히 잡고 눈을 마주치는 것이라고 말씀하셨습니다.
좋은 비트토렌트 핸드셰이크의 비결은 다음과 같이 다섯 부분으로 구성됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;항상 19로 지정된 프로토콜 식별자의 길이. (16진수로는 0x13)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pstr&lt;/strong&gt;이라 불리는 프로토콜 식별자는 항상 &lt;code&gt;BitTorrent protocol&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;모두 0으로 지정된 &lt;strong&gt;8개의 예약된 바이트&lt;/strong&gt;. 그 중 일부를 1로 뒤집어서 특정 &lt;a href=&#34;http://www.bittorrent.org/beps/bep_0010.html&#34;&gt;확장 기능&lt;/a&gt;을 지원한다는 것을 나타냅니다. 하지만 지금은 그렇지 않으니 0으로 유지하겠습니다.&lt;/li&gt;
&lt;li&gt;우리가 원하는 파일을 식별할 앞서 계산한 &lt;strong&gt;infohash&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;우리 스스로를 식별하기 위해 만든 &lt;strong&gt;Peer ID&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;합치면 핸드셰이크 문자열은 다음과 같이 보일 수 있습니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;\x13BitTorrent protocol\x00\x00\x00\x00\x00\x00\x00\x00\x86\xd4\xc8\x00\x24\xa4\x69\xbe\x4c\x50\xbc\x5a\x10\x2c\xf7\x17\x80\x31\x00\x74-TR2940-k8hj0wgej6ch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;피어에게 핸드셰이크를 보낸 후 동일한 형식으로 핸드셰이크를 다시 받아야 합니다.
받은 infohash는 보낸 정보와 일치해야 동일한 파일에 대해 말하고 있다는 것을 알 수 있습니다.
모든 일이 계획대로 진행되면 다음 단계로 넘어갑니다.
그렇지 않다면 뭔가 잘못되었기 때문에 연결을 끊을 수 있습니다.
&lt;em&gt;&amp;ldquo;안녕?&amp;rdquo; &amp;ldquo;这是谁？ 你想要什么？&amp;rdquo; &amp;ldquo;알았어요, 와&amp;hellip;잘못 걸었어요..&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;코드에서 핸드셰이크를 나타내는 구조체를 만들고, 이것을 직렬화하고 읽는 몇 가지 메소드를 작성하겠습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Handshake 피어가 자신을 식별하는 데 사용하는 특별한 메시지입니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;type&lt;/span&gt; Handshake &lt;span style=&#34;color:#f00&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Pstr     &lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  InfoHash [&lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PeerID   [&lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Serialize 핸드셰이크를 버퍼에 직렬화합니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; (h *Handshake) &lt;span style=&#34;color:#ff0&#34;&gt;Serialize&lt;/span&gt;() []&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  buf := make([]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;, len(h.Pstr)+&lt;span style=&#34;color:#f60&#34;&gt;49&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  buf[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] = byte(len(h.Pstr))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  curr := &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  curr += copy(buf[curr:], h.Pstr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  curr += copy(buf[curr:], make([]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;)) &lt;span style=&#34;color:#0f0&#34;&gt;// 8 reserved bytes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  curr += copy(buf[curr:], h.InfoHash[:])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  curr += copy(buf[curr:], h.PeerID[:])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; buf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Read 스트림에서 핸드셰이크를 파싱합니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;Read&lt;/span&gt;(r io.Reader) (*Handshake, &lt;span style=&#34;color:#ee82ee&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;// 역직렬화 수행&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/a83013d250dd9b4268cceace28e4cd82b07f2cbd/handshake/handshake.go&#34;&gt;github.com/veggiedefender/torrent-client/handshake/handshake.go&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;메시지-주고-받기&#34;&gt;메시지 주고 받기&lt;/h2&gt;
&lt;p&gt;첫 핸드셰이크를 마치면 &lt;code&gt;메시지&lt;/code&gt;를 주고받을 수 있습니다.
하지만 나머지 피어들이 메시지를 받아들일 준비가 안 되어 있다면,
모두가 준비가 되었다고 말하기 전에는 보낼 수 없습니다.
이 상태에서는 나머지 피어들에게 &lt;code&gt;chocked&lt;/code&gt;를 당합니다.
그들은 우리가 데이터를 요청해도 된다는 것을 알리기 위해 &lt;code&gt;unchoke&lt;/code&gt; 메시지를 보낼 것입니다.
기본적으로 우리는 입증될 때까지 막힌다고 가정합니다.&lt;/p&gt;
&lt;p&gt;unchoke 메시지를 받으면 우리는 조각에 대한 &lt;code&gt;요청&lt;/code&gt;을 보낼 수 있고,
피어들은 조각이 담긴 메시지를 우리에게 보낼 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/choke.png&#34; alt=&#34;choke&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;메시지-해석&#34;&gt;메시지 해석&lt;/h3&gt;
&lt;p&gt;메시지는 길이, &lt;code&gt;ID&lt;/code&gt;, &lt;code&gt;페이로드(payload)&lt;/code&gt;를 가집니다. 이것은 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/message.png&#34; alt=&#34;message&#34;&gt;&lt;/p&gt;
&lt;p&gt;메시지는 메시지의 바이트 길이를 알려주는 길이 표시로 시작합니다.
32비트 정수이므로 빅-엔디안 순서의 4바이트로 압축할 수 있습니다.
다음 바이트인 &lt;strong&gt;ID&lt;/strong&gt;는 어떤 유형의 메시지를 수신하는지 알려줍니다.
예를 들어 &lt;code&gt;2&lt;/code&gt;바이트는 &amp;ldquo;관심있음(interested)&amp;ldquo;을 의미합니다.
마지막으로 선택값인 &lt;strong&gt;페이로드(payload)&lt;/strong&gt; 는 메시지의 남은 길이를 채웁니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;type&lt;/span&gt; messageID &lt;span style=&#34;color:#ee82ee&#34;&gt;uint8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MsgChoke         messageID = &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MsgUnchoke       messageID = &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MsgInterested    messageID = &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MsgNotInterested messageID = &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MsgHave          messageID = &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MsgBitfield      messageID = &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MsgRequest       messageID = &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MsgPiece         messageID = &lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MsgCancel        messageID = &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Message 메시지의 ID 및 페이로드를 저장합니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;type&lt;/span&gt; Message &lt;span style=&#34;color:#f00&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ID      messageID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Payload []&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Serialize 메시지를 다음과 같은 형식으로 버퍼에 직렬화합니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// &amp;lt;길이 접두사&amp;gt;&amp;lt;메시지 ID&amp;gt;&amp;lt;페이로드&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// `nil`은 keep-live 메시지로 해석합니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; (m *Message) &lt;span style=&#34;color:#ff0&#34;&gt;Serialize&lt;/span&gt;() []&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; m == &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; make([]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  length := uint32(len(m.Payload) + &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#0f0&#34;&gt;// +1 for id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  buf := make([]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;+length)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  binary.BigEndian.&lt;span style=&#34;color:#ff0&#34;&gt;PutUint32&lt;/span&gt;(buf[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;], length)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  buf[&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;] = byte(m.ID)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  copy(buf[&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;:], m.Payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; buf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/message/message.go#L90-L103&#34;&gt;github.com/veggiedefender/torrent-client/message/message.go#L90-L103&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;스트림에서 메시지를 읽으려면 해당 메시지 형식을 따릅니다.
우리는 4바이트를 읽고 메시지의 &lt;strong&gt;길이&lt;/strong&gt;를 얻기 위해 &lt;code&gt;uint32&lt;/code&gt;로 해석합니다.
그런 다음 &lt;strong&gt;ID&lt;/strong&gt;(처음 1바이트) 및 &lt;strong&gt;payload&lt;/strong&gt;(나머지 바이트)를 얻습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Read 스트림에서 메시지를 파싱합니다. keep-alive 메시지는 `nil`을 반환합니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;Read&lt;/span&gt;(r io.Reader) (*Message, &lt;span style=&#34;color:#ee82ee&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lengthBuf := make([]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  _, err := io.&lt;span style=&#34;color:#ff0&#34;&gt;ReadFull&lt;/span&gt;(r, lengthBuf)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;, err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  length := binary.BigEndian.&lt;span style=&#34;color:#ff0&#34;&gt;Uint32&lt;/span&gt;(lengthBuf)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;// keep-alive 메시지&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; length == &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  messageBuf := make([]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;, length)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  _, err = io.&lt;span style=&#34;color:#ff0&#34;&gt;ReadFull&lt;/span&gt;(r, messageBuf)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;, err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m := Message{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ID:      &lt;span style=&#34;color:#ff0&#34;&gt;messageID&lt;/span&gt;(messageBuf[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Payload: messageBuf[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &amp;amp;m, &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/message/message.go#L105-L131&#34;&gt;github.com/veggiedefender/torrent-client/message/message.go#L105-L131&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;비트-필드-bitfields&#34;&gt;비트 필드 (Bitfields)&lt;/h3&gt;
&lt;p&gt;가장 흥미로운 유형의 메시지 중 하나는 &lt;strong&gt;비트 필드(bitfield)&lt;/strong&gt; 입니다.
이 자료 구조는 피어들이 우리에게 보낼 수 있는 조각을 효율적으로 인코딩하는 데 사용됩니다.
비트필드는 바이트 배열처럼 생겼고, 어떤 조각을 가지고 있는지 확인하기 위해서는 단지 1로 설정된 &lt;em&gt;비트&lt;/em&gt;의 위치를 보면 됩니다.
이것을 커피숍 쿠폰에 비유할 수 있습니다.
비트가 전부 &lt;code&gt;0&lt;/code&gt;인 카드부터 시작해서 하나씩 &lt;code&gt;1&lt;/code&gt;로 바꿔서 &amp;ldquo;도장&amp;rdquo; 찍듯이 표시합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/bitfield.png&#34; alt=&#34;bitfield&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;바이트&lt;/em&gt; 대신 &lt;em&gt;비트&lt;/em&gt;로 작업해서 비트필드 자료 구조는 크기가 매우 작습니다.
한 바이트의 공간에 8개의 조각 정보(&lt;code&gt;bool&lt;/code&gt; 크기)를 채워 넣을 수 있습니다.
단점은 값에 접근하는 것이 좀 더 까다로워진다는 것입니다.
컴퓨터가 처리할 수 있는 가장 작은 메모리 단위는 바이트입니다.
따라서 비트에 접근하려면 몇 가지 비트 조작(bitwise manipulation)을 수행해야 합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Bitfield 피어가 가지고 있는 조각들을 나타냅니다&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;type&lt;/span&gt; Bitfield []&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// HasPiece 특정 인덱스를 가진 비트 필드가 설정되어 있는지 알려줍니다&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; (bf Bitfield) &lt;span style=&#34;color:#ff0&#34;&gt;HasPiece&lt;/span&gt;(index &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#ee82ee&#34;&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  byteIndex := index / &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  offset := index % &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; bf[byteIndex]&amp;gt;&amp;gt;(&lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;-offset)&amp;amp;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; != &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// SetPiece 비트 필드에 비트를 설정합니다&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; (bf Bitfield) &lt;span style=&#34;color:#ff0&#34;&gt;SetPiece&lt;/span&gt;(index &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  byteIndex := index / &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  offset := index % &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bf[byteIndex] |= &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (&lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt; - offset)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/bitfield/bitfield.go&#34;&gt;github.com/veggiedefender/torrent-client/bitfield/bitfield.go&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;모두-합치기&#34;&gt;모두 합치기&lt;/h2&gt;
&lt;p&gt;이제 토렌트를 다운로드하는 데 필요한 모든 도구를 확보했습니다.
트래커에서 얻은 피어 목록이 있으며, TCP로 연결하고 핸드셰이크를 하며,
메시지를 주고받음으로써 피어들과 통신할 수 있습니다.
마지막 큰 문제는 여러 피어와 동시에 통신하는 &lt;strong&gt;동시성(concurrency)&lt;/strong&gt; 을 처리하고
상호 작용하는 피어들의 &lt;strong&gt;상태&lt;/strong&gt;를 관리하는 것입니다.
둘 다 고전적으로 어려운 문제입니다.&lt;/p&gt;
&lt;h3 id=&#34;동시성-관리-채널channel을-큐queue로&#34;&gt;동시성 관리: 채널(channel)을 큐(queue)로&lt;/h3&gt;
&lt;p&gt;Go에서는 &lt;a href=&#34;https://blog.golang.org/share-memory-by-communicating&#34;&gt;통신을 통해 메모리를 공유&lt;/a&gt;하며
Go 채널을 비용이 적은 스레드-세이프 큐라고 생각할 수 있습니다.&lt;/p&gt;
&lt;p&gt;두 채널을 설정하여 동시적인 작업자들(concurrent workers)을 동기화합니다.
하나는 피어 간에 작업(다운로드할 조각)을 분배하기 위한 채널이고,
다른 하나는 다운로드한 조각들을 모으기 위한 채널입니다.
다운로드된 조각들이 결과 채널을 통해 들어올 때,
우리는 그것들을 버퍼에 복사해서 완전한 파일로 조립할 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// 작업자가 작업을 찾고 결과를 보낼 수 있도록 큐를 초기화합니다&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;workQueue := make(&lt;span style=&#34;color:#f00&#34;&gt;chan&lt;/span&gt; *pieceWork, len(t.PieceHashes))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;results := make(&lt;span style=&#34;color:#f00&#34;&gt;chan&lt;/span&gt; *pieceResult)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;for&lt;/span&gt; index, hash := &lt;span style=&#34;color:#f00&#34;&gt;range&lt;/span&gt; t.PieceHashes {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  length := t.&lt;span style=&#34;color:#ff0&#34;&gt;calculatePieceSize&lt;/span&gt;(index)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  workQueue &amp;lt;- &amp;amp;pieceWork{index, hash, length}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// 작업을 시작합니다&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;for&lt;/span&gt; _, peer := &lt;span style=&#34;color:#f00&#34;&gt;range&lt;/span&gt; t.Peers {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;go&lt;/span&gt; t.&lt;span style=&#34;color:#ff0&#34;&gt;startDownloadWorker&lt;/span&gt;(peer, workQueue, results)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// 결과가 가득 찰 때까지 버퍼로 결과를 수집합니다&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;buf := make([]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;, t.Length)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;donePieces := &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;for&lt;/span&gt; donePieces &amp;lt; len(t.PieceHashes) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  res := &amp;lt;-results
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  begin, end := t.&lt;span style=&#34;color:#ff0&#34;&gt;calculateBoundsForPiece&lt;/span&gt;(res.index)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  copy(buf[begin:end], res.buf)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  donePieces++
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;close(workQueue)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/p2p/p2p.go#L188-L214&#34;&gt;github.com/veggiedefender/torrent-client/p2p/p2p.go#L188-L214&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;트래커에서 받은 피어마다 작업자 고루틴을 생성합니다.
피어와 연결하고 핸드셰이크한 다음 &lt;code&gt;workQueue&lt;/code&gt;에서 작업을 검색하여 다운로드를 시도하고,
&lt;code&gt;results&lt;/code&gt; 채널을 통해 다운로드한 조각들을 다시 보냅니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/download.png&#34; alt=&#34;download&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; (t *Torrent) &lt;span style=&#34;color:#ff0&#34;&gt;startDownloadWorker&lt;/span&gt;(peer peers.Peer, workQueue &lt;span style=&#34;color:#f00&#34;&gt;chan&lt;/span&gt; *pieceWork, results &lt;span style=&#34;color:#f00&#34;&gt;chan&lt;/span&gt; *pieceResult) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  c, err := client.&lt;span style=&#34;color:#ff0&#34;&gt;New&lt;/span&gt;(peer, t.PeerID, t.InfoHash)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    log.&lt;span style=&#34;color:#ff0&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Could not handshake with %s. Disconnecting\n&amp;#34;&lt;/span&gt;, peer.IP)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;defer&lt;/span&gt; c.Conn.&lt;span style=&#34;color:#ff0&#34;&gt;Close&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  log.&lt;span style=&#34;color:#ff0&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Completed handshake with %s\n&amp;#34;&lt;/span&gt;, peer.IP)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  c.&lt;span style=&#34;color:#ff0&#34;&gt;SendUnchoke&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  c.&lt;span style=&#34;color:#ff0&#34;&gt;SendInterested&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;for&lt;/span&gt; pw := &lt;span style=&#34;color:#f00&#34;&gt;range&lt;/span&gt; workQueue {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; !c.Bitfield.&lt;span style=&#34;color:#ff0&#34;&gt;HasPiece&lt;/span&gt;(pw.index) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      workQueue &amp;lt;- pw &lt;span style=&#34;color:#0f0&#34;&gt;// 큐에 조각을 다시 넣습니다&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0f0&#34;&gt;// 조각 다운로드&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    buf, err := &lt;span style=&#34;color:#ff0&#34;&gt;attemptDownloadPiece&lt;/span&gt;(c, pw)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      log.&lt;span style=&#34;color:#ff0&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Exiting&amp;#34;&lt;/span&gt;, err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      workQueue &amp;lt;- pw &lt;span style=&#34;color:#0f0&#34;&gt;// 큐에 조각을 다시 넣습니다&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    err = &lt;span style=&#34;color:#ff0&#34;&gt;checkIntegrity&lt;/span&gt;(pw, buf)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      log.&lt;span style=&#34;color:#ff0&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Piece #%d failed integrity check\n&amp;#34;&lt;/span&gt;, pw.index)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      workQueue &amp;lt;- pw &lt;span style=&#34;color:#0f0&#34;&gt;// 큐에 조각을 다시 넣습니다&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c.&lt;span style=&#34;color:#ff0&#34;&gt;SendHave&lt;/span&gt;(pw.index)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    results &amp;lt;- &amp;amp;pieceResult{pw.index, buf}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/p2p/p2p.go#L133-L169&#34;&gt;github.com/veggiedefender/torrent-client/p2p/p2p.go#L133-L169&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;상태-관리&#34;&gt;상태 관리&lt;/h3&gt;
&lt;p&gt;구조체에 있는 각 피어들을 추적하고 메시지를 읽을 때 해당 구조체의 필드값을 수정합니다.
피어에서 다운로드한 용량, 요청한 용량, 중단(choked) 여부 등의 데이터가 포함됩니다.
만약 더 확장하기를 원한다면 이것을 유한 상태 기계(FSM)로 형식화할 수 있습니다.
하지만 지금은 구조체와 스위치만으로 충분합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;type&lt;/span&gt; pieceProgress &lt;span style=&#34;color:#f00&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  index      &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  client     *client.Client
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  buf        []&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  downloaded &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  requested  &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  backlog    &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; (state *pieceProgress) &lt;span style=&#34;color:#ff0&#34;&gt;readMessage&lt;/span&gt;() &lt;span style=&#34;color:#ee82ee&#34;&gt;error&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  msg, err := state.client.&lt;span style=&#34;color:#ff0&#34;&gt;Read&lt;/span&gt;() &lt;span style=&#34;color:#0f0&#34;&gt;// this call blocks&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;switch&lt;/span&gt; msg.ID {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;case&lt;/span&gt; message.MsgUnchoke:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    state.client.Choked = &lt;span style=&#34;color:#f00&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;case&lt;/span&gt; message.MsgChoke:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    state.client.Choked = &lt;span style=&#34;color:#f00&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;case&lt;/span&gt; message.MsgHave:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    index, err := message.&lt;span style=&#34;color:#ff0&#34;&gt;ParseHave&lt;/span&gt;(msg)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    state.client.Bitfield.&lt;span style=&#34;color:#ff0&#34;&gt;SetPiece&lt;/span&gt;(index)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;case&lt;/span&gt; message.MsgPiece:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    n, err := message.&lt;span style=&#34;color:#ff0&#34;&gt;ParsePiece&lt;/span&gt;(state.index, state.buf, msg)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    state.downloaded += n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    state.backlog--
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/p2p/p2p.go#L53-L83&#34;&gt;github.com/veggiedefender/torrent-client/p2p/p2p.go#L53-L83&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;요청을-보낼-시간입니다&#34;&gt;요청을 보낼 시간입니다!&lt;/h3&gt;
&lt;p&gt;파일, 조각 및 조각 해시는 전부가 아닙니다. 조각을 &lt;strong&gt;블록&lt;/strong&gt;으로 세분하여 더 발전시킬 수 있습니다.
블록은 조각의 일부입니다. 해당 블록이 속한 조각의 &lt;strong&gt;인덱스&lt;/strong&gt;,
조각에서 블록의 바이트 &lt;strong&gt;오프셋&lt;/strong&gt; 및 블록의 &lt;strong&gt;길이&lt;/strong&gt;를 통해 블록을 정의할 수 있습니다.
피어에서 데이터를 요청하면 실제로 블록을 요청합니다.
블록의 크기는 일반적으로 16KB이므로 256KB 조각 하나에 실제로 16개의 요청이 필요할 수 있습니다.&lt;/p&gt;
&lt;p&gt;피어가 16KB보다 큰 블록에 대한 요청을 수신하는 경우 연결을 끊어야 합니다.
제 경험상 요청을 128KB까지 처리하는 경우가 많았습니다.
하지만 규격보다 큰 크기의 블록을 요청할 때 전체 속도가 크게 향상되지는 않았으므로
규격을 준수하는 것이 더 나을 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;파이프라이닝&#34;&gt;파이프라이닝&lt;/h3&gt;
&lt;p&gt;네트워크 왕복 비용은 많이 들고, 각 블록을 하나씩 요청하면 다운로드 성능이 상당히 저하됩니다.
따라서 처리되지 않은 일부 요청들을 지속적으로 모으기 위해 &lt;strong&gt;파이프라인(pipeline)으로&lt;/strong&gt; 연결하는 것이 중요합니다.
이렇게 하면 연결 처리량을 상당히 증가시킬 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/pipelining.png&#34; alt=&#34;pipelining&#34;&gt;&lt;/p&gt;
&lt;p&gt;일반적으로 비트토렌트 클라이언트는 5개의 파이프라인 요청 큐를 유지했으며, 이것이 제가 사용할 값입니다.
파이프라인을 늘리면 다운로드 속도가 최대 두 배까지 빨라진다는 것을 알았습니다.&lt;/p&gt;
&lt;p&gt;최신 클라이언트는 &lt;a href=&#34;https://luminarys.com/posts/writing-a-bittorrent-client.html&#34;&gt;적응형(adaptive)&lt;/a&gt; 큐 크기를
사용하여 최신 네트워크 속도와 조건을 더 잘 수용합니다.
이는 분명히 조정할 만한 가치가 있는 매개 변수이며, 향후 성능 최적화를 위한 쉬운 방법(low-hanging fruit)입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// MaxBlockSize 요청할 수 있는 최대 바이트 수&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; MaxBlockSize = &lt;span style=&#34;color:#f60&#34;&gt;16384&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// MaxBacklog 클라이언트가 파이프라인에서 수행할 수 없는 요청 수입니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; MaxBacklog = &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;attemptDownloadPiece&lt;/span&gt;(c *client.Client, pw *pieceWork) ([]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#ee82ee&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  state := pieceProgress{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    index:  pw.index,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    client: c,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    buf:    make([]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;, pw.length),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;// 데드라인을 설정하면 응답하지 않는 피어를 떼어내는 데 도움이 됩니다&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;// 262KB 조각을 다운로드하려면 30초가 충분합니다&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  c.Conn.&lt;span style=&#34;color:#ff0&#34;&gt;SetDeadline&lt;/span&gt;(time.&lt;span style=&#34;color:#ff0&#34;&gt;Now&lt;/span&gt;().&lt;span style=&#34;color:#ff0&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;30&lt;/span&gt; * time.Second))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;defer&lt;/span&gt; c.Conn.&lt;span style=&#34;color:#ff0&#34;&gt;SetDeadline&lt;/span&gt;(time.Time{}) &lt;span style=&#34;color:#0f0&#34;&gt;// 데드라인 비활성화&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;for&lt;/span&gt; state.downloaded &amp;lt; pw.length {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0f0&#34;&gt;// unchocked일 경우 완료되지 않은 요청이 충분히 쌓일 때까지 요청을 보냅니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; !state.client.Choked {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00&#34;&gt;for&lt;/span&gt; state.backlog &amp;lt; MaxBacklog &amp;amp;&amp;amp; state.requested &amp;lt; pw.length {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        blockSize := MaxBlockSize
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0f0&#34;&gt;// 마지막 블록은 일반 블록보다 짧을 수 있습니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; pw.length-state.requested &amp;lt; blockSize {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          blockSize = pw.length - state.requested
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        err := c.&lt;span style=&#34;color:#ff0&#34;&gt;SendRequest&lt;/span&gt;(pw.index, state.requested, blockSize)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;, err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        state.backlog++
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        state.requested += blockSize
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    err := state.&lt;span style=&#34;color:#ff0&#34;&gt;readMessage&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;, err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; state.buf, &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/p2p/p2p.go#L85-L123&#34;&gt;github.com/veggiedefender/torrent-client/p2p/p2p.go#L85-L123&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;maingo&#34;&gt;main.go&lt;/h3&gt;
&lt;p&gt;아주 간단합니다. 거의 다 왔어요.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;package&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;github.com/veggiedefender/torrent-client/torrentfile&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inPath := os.Args[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  outPath := os.Args[&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tf, err := torrentfile.&lt;span style=&#34;color:#ff0&#34;&gt;Open&lt;/span&gt;(inPath)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      log.&lt;span style=&#34;color:#ff0&#34;&gt;Fatal&lt;/span&gt;(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  err = tf.&lt;span style=&#34;color:#ff0&#34;&gt;DownloadToFile&lt;/span&gt;(outPath)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      log.&lt;span style=&#34;color:#ff0&#34;&gt;Fatal&lt;/span&gt;(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/main.go&#34;&gt;github.com/veggiedefender/torrent-client/main.go&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/xqRSB0Jec8RN91Zt89rbb9PcL&#34;&gt;데모 영상&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;이것이-전부가-아닙니다&#34;&gt;이것이 전부가 아닙니다&lt;/h1&gt;
&lt;p&gt;간결함을 위해 몇 가지 중요한 부분 코드만 포함시켰습니다.
특히 글루 코드, 파싱, 유닛 테스트, 글자를 만드는 지루한 부분은 생략했습니다.
관심 있으시다면 &lt;a href=&#34;https://github.com/veggiedefender/torrent-client&#34;&gt;전체 소스 코드&lt;/a&gt;를 확인하세요.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;역자: 간단히 테스트 해보려면 아래의 명령어를 실행하세요.&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Go는 설치되어 있다고 가정합니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/veggiedefender/torrent-client.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd torrent-client
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# linux, darwin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -L http://bttracker.debian.org:6969/file/debian-10.0.0-amd64-netinst.iso.torrent?info_hash=7f9161c88883c639bcde80d7f0a6045ab9cf16bb -o debian.torrent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# windows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget http://bttracker.debian.org:6969/file/debian-10.0.0-amd64-netinst.iso.torrent?info_hash=7f9161c88883c639bcde80d7f0a6045ab9cf16bb -o debian.torrent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go run main.go debian.torrent debian.iso
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;일부 트래커는 대역폭을 절약하기 위해 &lt;a href=&#34;http://bittorrent.org/beps/bep_0015.html&#34;&gt;[UDP]&lt;/a&gt; 바이너리 프로토콜을 사용합니다&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;역주: network byte order -&amp;gt; big-endian / host byte order -&amp;gt; little-endian&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;동일한 바이트를 &lt;strong&gt;little-endian&lt;/strong&gt; 순서로 해석하면 0xE11A = 57626이 됩니다.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
- https://markruler.github.io/posts/go/building-bittorrent-client/ - Im Changsu | Since 2020</description>
        </item>
    
    
    
        <item>
        <title>VIM 에디터 명령어 정리</title>
        <link>https://markruler.github.io/posts/shell/vim-editor-shortcuts/</link>
        <pubDate>Mon, 07 Dec 2020 00:44:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/shell/vim-editor-shortcuts/</guid>
        <description>임창수 https://markruler.github.io/posts/shell/vim-editor-shortcuts/ -&lt;blockquote&gt;
&lt;p&gt;서버에서 파일을 편집하기 위해 VIM 에디터를 사용할 일이 많은데,
제가 사용하는 설정 파일과 자주 쓰는 명령어를 정리합니다.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;설정-vimrc&#34;&gt;설정 (.vimrc)&lt;/h1&gt;
&lt;p&gt;제가 사용하는 설정 파일(&lt;code&gt;~/.vimrc&lt;/code&gt;)입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&amp;#34;이것은 주석&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;syntax&lt;/span&gt; on                                                                       
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; showcmd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; statusline+=%F::%l,%c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; showmatch
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; ignorecase
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; smartcase
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; incsearch
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; autowrite
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; ruler
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; autoindent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; cindent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; shiftwidth=&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; tabstop=&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; expandtab
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; laststatus=&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; backspace=indent,eol,start
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; showmode
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; hls
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; colorcolumn=&lt;span style=&#34;color:#f60&#34;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; ff=unix
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; fileencodings=utf8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; viminfo=&amp;#39;&lt;span style=&#34;color:#f60&#34;&gt;50&lt;/span&gt;,&amp;lt;&lt;span style=&#34;color:#f60&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&amp;#34;set history=1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;au FileType make setlocal noexpandtab
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;highlight&lt;/span&gt; TailingWhitespace ctermbg=red guibg=red
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; cul
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; background=dark
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; nowrapscan
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; visualbell
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;set&lt;/span&gt; tenc=utf&lt;span style=&#34;color:#f60&#34;&gt;-8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;syntax on&lt;/code&gt; 구문강조 사용&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set showcmd&lt;/code&gt; 명령어 입력시 상태표시줄에 보여줌&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set statusline+=%F::%l,%c&lt;/code&gt; 상태표시줄에 파일명, 줄, 컬럼 표시&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set showmatch&lt;/code&gt; 괄호 매칭 보여줌&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set ignorecase&lt;/code&gt; 검색시 대소문자 무시&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set smartcase&lt;/code&gt; 검색어에 대문자가 포함되어 있으면 대소문자 구분&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set incsearch&lt;/code&gt; 검색어 입력시 점진적 검색&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set autowrite&lt;/code&gt; 저장하지 않은 파일을 끝내기 전에 자동으로 저장&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set ruler&lt;/code&gt; 화면 우측 하단에 현재 커서의 위치(줄,칸) 표시&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set autoindent&lt;/code&gt; 자동 들여쓰기&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set cindent&lt;/code&gt; C언어 자동 들여쓰기&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set shiftwidth=2&lt;/code&gt; 들여쓰기 2칸&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set tabstop=2&lt;/code&gt; 탭을 2칸으로&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set expandtab&lt;/code&gt; 탭을 스페이스로 대체&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set laststatus=2&lt;/code&gt; 상태표시줄 항상 표시&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set backspace=indent,eol,start&lt;/code&gt; 백스페이스로 들여쓰기, 줄 끝, 줄 시작 삭제&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set showmode&lt;/code&gt; 현재 모드 표시&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set hls&lt;/code&gt; 검색어 하이라이팅&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set colorcolumn=80&lt;/code&gt; 80칸에 세로줄 표시&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set ff=unix&lt;/code&gt; 파일 포맷을 유닉스로&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set fileencodings=utf8&lt;/code&gt; 파일 인코딩&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set viminfo=&#39;50,&amp;lt;1000&lt;/code&gt; 최근 50개의 명령어 기억&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set history=1000&lt;/code&gt; vi 편집기록 기억갯수 &lt;code&gt;.viminfo&lt;/code&gt;에 기록&lt;/li&gt;
&lt;li&gt;&lt;code&gt;au FileType make setlocal noexpandtab&lt;/code&gt; makefile에서 탭을 스페이스로 대체하지 않음&lt;/li&gt;
&lt;li&gt;&lt;code&gt;highlight TailingWhitespace ctermbg=red guibg=red&lt;/code&gt; 끝에 공백이 있는 경우 빨간색으로 표시&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set cul&lt;/code&gt; 현재 커서가 있는 줄 강조&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set nowrapscan&lt;/code&gt; 검색시 문서 끝에서 처음으로 이동하지 않음&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set visualbell&lt;/code&gt; 경고음 대신 화면 깜빡임&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set tenc=utf-8&lt;/code&gt; 터미널 인코딩을 UTF-8로&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/vim.png&#34; alt=&#34;vim&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;입력-모드-insert-mode&#34;&gt;입력 모드 (Insert Mode)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; 현재 커서에서 편집
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shift + i&lt;/code&gt; 현재 줄의 처음으로 커서를 옮긴 후 편집&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; 현재 커서 한 글자 삭제 후 바로 입력 모드
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shift + s&lt;/code&gt; 현재 줄 삭제 후 바로 입력 모드&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; 다음 칸으로 커서를 옮긴 후 편집
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shift + a&lt;/code&gt; 현재 줄의 끝으로 커서를 옮긴 후 편집&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;o&lt;/code&gt; 다음 줄로 커서를 옮긴 후 편집
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shift + o&lt;/code&gt; 이전 줄로 커서를 옮긴 후 편집&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;마지막-행-모드-last-line-mode&#34;&gt;마지막 행 모드 (Last Line Mode)&lt;/h1&gt;
&lt;h2 id=&#34;last-line-command-&#34;&gt;Last Line Command (:)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:q&lt;/code&gt; 종료&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:q!&lt;/code&gt; 강제 종료&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:w&lt;/code&gt; 저장&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:%s/old/new/gi&lt;/code&gt; 문자열 교체 (old -&amp;gt; new)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;g&lt;/code&gt; 옵션을 빼면 해당 줄의 첫 번째 문자열만 교체&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:!&lt;/code&gt; 명령어 실행
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:!ls&lt;/code&gt; 현재 디렉토리 파일 목록 출력&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:!pwd&lt;/code&gt; 현재 디렉토리 경로 출력&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:!date&lt;/code&gt; 현재 시간 출력&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:tabnew [file]&lt;/code&gt; 새로운 탭 열기 (file이 없으면 빈 탭)
&lt;ul&gt;
&lt;li&gt;실제로는 에디터 밖에서도 사용할 수 있는 tmux나 terminal 자체 기능을 활용하는 편입니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gt&lt;/code&gt; 다음 탭으로 이동하기&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gT&lt;/code&gt; 이전 탭으로 이동하기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;search-mode--&#34;&gt;Search mode (/, ?)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/regex-pattern&lt;/code&gt; (&lt;code&gt;?regex-pattern&lt;/code&gt;) 검색
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; 다음 단어 (?는 반대)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N&lt;/code&gt; 이전 단어 (?는 반대)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;명령-모드-command-mode&#34;&gt;명령 모드 (Command Mode)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;u&lt;/code&gt; - undo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;control + r&lt;/code&gt; - redo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; - 이전 명령 다시 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;이동&#34;&gt;이동&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hjkl&lt;/code&gt; 좌하상우 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Control + b&lt;/code&gt; 이전 페이지로 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Control + f&lt;/code&gt; 다음 페이지로 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Control + u&lt;/code&gt; 이전 half page로 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Control + d&lt;/code&gt; 다음 half page로 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gg&lt;/code&gt; 문서 맨 앞으로 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;G&lt;/code&gt; 문서 맨 뒤로 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt; 현재 줄 앞으로 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; 현재 줄 끝으로 이동&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;간단한-편집&#34;&gt;간단한 편집&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; 복사 (yank)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; 붙여넣기&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; 들여쓰기&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; 내어쓰기&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shift + j&lt;/code&gt; 현재 줄의 끝과 다음 줄의 앞부분을 합칩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;삭제&#34;&gt;삭제&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; 현재 커서 한 글자 교체(replace)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; 현재 커서 한 글자 삭제 (delete)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shift + x&lt;/code&gt; 현재 커서 앞에 한 글자 삭제 (backspace)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:1,.d&lt;/code&gt; 첫 번째 줄부터 현재 커서까지 삭제 (LLM)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:5,10d&lt;/code&gt; 5번 줄부터 10번 줄까지 삭제 (LLM)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dd&lt;/code&gt; 현재 줄 삭제 (이후 p를 통해 삭제한 줄을 붙여넣을 수 있습니다)
&lt;ul&gt;
&lt;li&gt;이동키와 조합해 삭제할 수도 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5dd&lt;/code&gt; 현재 줄 포함 아래로 5줄 삭제&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dgg&lt;/code&gt; 현재 커서에서 첫 줄까지 삭제&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dG&lt;/code&gt; 현재 커서에서 마지막 줄까지 삭제&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d$&lt;/code&gt; 현재 커서에서 현재 줄 마지막 단어까지 삭제&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d^&lt;/code&gt; 현재 커서에서 현재 줄 첫 단어까지 삭제&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dw&lt;/code&gt; 현재 커서에서 현재 단어까지 삭제&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;비주얼-모드visual-mode&#34;&gt;비주얼 모드(visual mode)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt; 비주얼 모드&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shift + v&lt;/code&gt; 비주얼 라인&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + v&lt;/code&gt; 비주얼 블록
&lt;ul&gt;
&lt;li&gt;비주얼 블록 모드에서 &lt;code&gt;Shift + i&lt;/code&gt;를 누르면 블록의 첫 줄에 커서가 위치하고, 입력 모드로 전환됩니다.&lt;/li&gt;
&lt;li&gt;입력을 마치고 &lt;code&gt;ESC&lt;/code&gt;를 누르면 블록의 모든 줄에 입력한 내용이 삽입됩니다. (여러 줄을 주석 처리할 때 유용)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;화면-분할&#34;&gt;화면 분할&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;탭 기능과 동일하게 터미널 자체 기능을 선호하는 편입니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Control + w&lt;/code&gt; + &lt;code&gt;s&lt;/code&gt; horizontal split
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt; horizontal split한 후 새로운 창 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Control + w&lt;/code&gt; + &lt;code&gt;v&lt;/code&gt; vertical split
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vs&lt;/code&gt; vertical split한 후 현재 창 복제&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Control + w&lt;/code&gt; + &lt;code&gt;방향키&lt;/code&gt; 분할된 창 간 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Control + w&lt;/code&gt; + &lt;code&gt;&amp;gt;&lt;/code&gt; 창 폭 늘리기&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Control + w&lt;/code&gt; + &lt;code&gt;&amp;lt;&lt;/code&gt; 창 폭 줄이기&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Control + w&lt;/code&gt; + &lt;code&gt;+&lt;/code&gt; 창 높이 늘리기&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Control + w&lt;/code&gt; + &lt;code&gt;-&lt;/code&gt; 창 높이 줄이기&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Control + w&lt;/code&gt; + &lt;code&gt;=&lt;/code&gt; 창 폭, 높이 원래 상태로&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Control + w&lt;/code&gt; + &lt;code&gt;o&lt;/code&gt; only one window&lt;/li&gt;
&lt;/ul&gt;
- https://markruler.github.io/posts/shell/vim-editor-shortcuts/ - Im Changsu | Since 2020</description>
        </item>
    
    
    
        <item>
        <title>NFV 도커 컨테이너 초심자 가이드</title>
        <link>https://markruler.github.io/posts/nfv/beginners-guide-docker-container-nfv/</link>
        <pubDate>Mon, 16 Nov 2020 22:40:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/nfv/beginners-guide-docker-container-nfv/</guid>
        <description>임창수 https://markruler.github.io/posts/nfv/beginners-guide-docker-container-nfv/ -&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://telcocloudbridge.com/blog/beginners-guide-docker-container-nfv/&#34;&gt;Faisal Khan의 A Beginner&amp;rsquo;s Guide to Docker Container in NFV&lt;/a&gt;를 번역한 글입니다.&lt;/li&gt;
&lt;li&gt;저자의 허락을 받고 번역했습니다.&lt;/li&gt;
&lt;li&gt;2016년 3월 3일에 쓰여진 글입니다.&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;떠오르는 도커(Docker) 컨테이너는 NFV를 혁신할 잠재력을 가지고 있습니다.
무엇보다 도커 컨테이너는 가상 머신에 비해 가볍고, 적은 오버헤드와 리소스만을 요구하며, 동일한 운영체제에서 실행되는 애플리케이션을 격리시킬 수 있습니다.
즉, NFV에서 VNF(가상 네트워크 기능)이 도커 컨테이너에서 완전히 격리된 상태로 실행될 수 있다면, 가상 머신이 필요 없을 지도 모릅니다.
하지만 그게 그렇게 쉬울까요?&lt;/p&gt;
&lt;p&gt;그렇다면 가상 머신의 미래는 어떻게 될까요?
사실 도커 컨테이너는 아직 성장하는 단계에 있기 때문에 가상 머신의 미래에 대해 뭐라고 말하기에는 너무 이릅니다(NFV도 마찬가지입니다 😊).
하지만 여러분이 이 글을 끝까지 읽는다면, 왜 모두가 도커 컨테이너에 대해 이야기하는지, 도커 컨테이너를 특별하게 만드는 것이 무엇인지 알 수 있을 것입니다.&lt;/p&gt;
&lt;p&gt;본 가이드의 주요 목적은 도커 컨테이너의 아키텍처를 이해하는 데 있어 단계별로 이해할 수 있도록 돕는 것입니다.
이 과정에서 하이퍼바이저와 가상 머신의 기초에 대해서도 이해하게 될 것입니다.
이 개념들은 하이퍼바이저와 가상 머신에 대한 사전 지식이 전혀 없다고 가정하고 설명됩니다.&lt;/p&gt;
&lt;h1 id=&#34;컨테이너란-무엇인가요&#34;&gt;컨테이너란 무엇인가요?&lt;/h1&gt;
&lt;p&gt;애초에 컨테이너는 애플리케이션을 더 유연하고 기민하게 실행하는 방법으로 등장했습니다.
리눅스 컨테이너는 리눅스 운영체제 내에서 경량 애플리케이션을 직접 실행할 수 있도록 해주었습니다.
하이퍼바이저와 가상 머신이 필요하지 않기 때문에 애플리케이션은 동일한 운영체제 내에서 격리된 상태로 실행될 수 있습니다.&lt;/p&gt;
&lt;h1 id=&#34;도커-컨테이너란-무엇인가요&#34;&gt;도커 컨테이너란 무엇인가요?&lt;/h1&gt;
&lt;p&gt;구글(Google)은 2006년부터 자사 데이터 센터에서 리눅스(Linux) 컨테이너를 사용해왔습니다.
하지만 2013년 도커 컨테이너의 등장과 함께 컨테이너는 더 널리 알려지게 되었습니다.
도커는 이전 버전의 컨테이너에 비해 더 간단하고 표준화된 방식으로 컨테이너를 실행할 수 있게 해줍니다.&lt;/p&gt;
&lt;p&gt;도커 컨테이너 역시 리눅스에서 실행됩니다.
하지만 도커만이 컨테이너를 실행하는 유일한 방법은 아닙니다.
LXC도 컨테이너를 실행하는 또 다른 방식입니다.
LXC와 도커 모두 리눅스에 뿌리를 두고 있습니다.&lt;/p&gt;
&lt;p&gt;도커 컨테이너가 LXC와 같은 경쟁 컨테이너보다 더 인기를 끈 이유 중 하나는
호스트 운영체제에서 &amp;ldquo;이미지&amp;quot;로 간단하고 빠르게 불러올 수 있기 때문입니다.
도커는 클라우드에 이미지 형태로 저장되며, 사용자가 필요할 때 간단하게 호출하여 실행할 수 있습니다.&lt;/p&gt;
&lt;p&gt;앞으로는 &amp;ldquo;컨테이너&amp;quot;와 &amp;ldquo;도커 컨테이너&amp;quot;라는 단어를 동일한 의미처럼 사용하겠습니다.&lt;/p&gt;
&lt;h1 id=&#34;nfv에서-도커-컨테이너를-이해하기-위한-단계별-가이드&#34;&gt;NFV에서 도커 컨테이너를 이해하기 위한 단계별 가이드&lt;/h1&gt;
&lt;p&gt;가상 머신은 유용하지만 몇 가지 문제점이 있습니다.&lt;/p&gt;
&lt;p&gt;전용 운영체제가 필요합니다.
또한 가상화를 달성하기 위해 가상 머신을 분리할 하이퍼바이저가 필요합니다.&lt;/p&gt;
&lt;p&gt;애플리케이션이 많아질수록 소프트웨어 오버헤드가 증가하고 비용이 더 많이 들며, 지속적으로 업데이트를 유지해야 합니다.
그럼에도 불구하고 NFV 아키텍처에는 가상 머신이 필요합니다.&lt;/p&gt;
&lt;p&gt;이제 NFV 아키텍처를 살펴보겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;1단계-nfv-아키텍처에서-하이퍼바이저-살펴보기&#34;&gt;1단계: NFV 아키텍처에서 하이퍼바이저 살펴보기&lt;/h2&gt;
&lt;p&gt;아래 다이어그램은 여러분이 여러 번 봤을 법한 NFV 아키텍처를 보여줍니다.
(모르시는 분은 &lt;a href=&#34;../cheat-sheet-understanding-nfv-architecture/&#34;&gt;여기를 확인해주세요&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/nfv/hypervisor-in-nfv.png&#34; alt=&#34;hypervisor-in-nfv&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;그림 1&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;이 논의를 위해 NFVI (NFV Infrastructure) 부분만 확대해서 살펴보겠습니다.
NFVI는 세 가지 주요 구성 요소로 나뉩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하이퍼바이저 도메인&lt;/li&gt;
&lt;li&gt;컴퓨팅 도메인&lt;/li&gt;
&lt;li&gt;네트워크 인프라스트럭처 도메인&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;가상화 계층(Virtualization Layer)은 실제로 하이퍼바이저를 의미하며, 이는 컴퓨트 도메인(물리적/x86 서버)의 하드웨어 리소스를 추상화하는 역할을 담당합니다.
예를 들어 단일 물리적 서버(물리적 메모리와 물리적 컴퓨트)가 있다고 가정해 봅시다.
하이퍼바이저는 이를 여러 개의 가상 메모리와 가상 컴퓨트로 분할할 수 있으며, 각 엔티티는 독립적으로 작동하게 됩니다.&lt;/p&gt;
&lt;p&gt;이 가상화 계층(하이퍼바이저)과 가상 리소스를 함께 묶어서 &amp;ldquo;하이퍼바이저 도메인&amp;quot;이라고 부릅니다.&lt;/p&gt;
&lt;h2 id=&#34;2단계-가상-머신-자세히-살펴보기&#34;&gt;2단계: 가상 머신 자세히 살펴보기&lt;/h2&gt;
&lt;p&gt;가상 머신을 이해하기 위해 이번에는 하이퍼바이저 도메인을 확장하여 이 도메인 내부를 보여드리겠습니다.&lt;/p&gt;
&lt;p&gt;아래 &lt;em&gt;그림 2&lt;/em&gt;를 확인해 주세요.&lt;/p&gt;
&lt;p&gt;왼쪽에는 앞서 그림 1에서 보았던 하이퍼바이저 도메인이 동일하게 표시되어 있습니다.
하지만 오른쪽 그림에서는 하이퍼바이저 도메인을 확장하여 가상 머신을 보여줍니다.
즉, 하이퍼바이저 도메인의 가상 리소스가 이제 가상 머신으로 표시된 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/nfv/hypervisor-domain-with-vm.png&#34; alt=&#34;hypervisor-domain-with-vm&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;그림 2&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;간단히 설명하기 위해 왼쪽의 가상 네트워크/네트워크 블록은 제거했습니다.
이 논의에서는 중요하지 않기 때문입니다.
여기서 가상화 계층은 리소스/네트워크 관리자가 되었고,
가상 컴퓨트/메모리는 가상 머신(VM)이 되었습니다.&lt;/p&gt;
&lt;p&gt;그렇다면 가상 머신이란 무엇일까요?&lt;/p&gt;
&lt;p&gt;가상 머신은 VNF(가상 네트워크 기능)이 실행되는 환경을 제공합니다.
다이어그램을 보면 각 가상 머신이 하나의 VNF와 연결되어 있는 것을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;명확하게 하기 위해 예를 들어 설명하겠습니다.
VNF1이 Virtual CPE라고 하고, VNF2가 Virtual Firewall이라고 가정해 봅시다.
위의 예시에서 각각은 자신의 가상 머신에서 실행됩니다.
그리고 이들은 하이퍼바이저 도메인 내부에서 서로 체이닝되어 연결될 수 있습니다.&lt;/p&gt;
&lt;p&gt;또한 가상 머신은 논리적으로 서로 분리되어 있다는 점을 주목하세요.
이를 통해 각 가상 머신에서 독립적인 운영체제를 실행할 수 있습니다.
예를 들어, 게스트 운영체제 OS1은 리눅스이고, 게스트 OS2는 솔라리스일 수 있습니다.&lt;/p&gt;
&lt;p&gt;게스트 운영체제 외에도 호스트 운영체제가 필요하다는 점에 주목하세요.
호스트 운영체제는 하이퍼바이저가 실행되는 환경입니다.
이 중요한 점을 기억해 두세요.
다음 단락에서 컨테이너에 대해 이야기할 때 다시 언급될 것입니다.&lt;/p&gt;
&lt;p&gt;이제 가상 머신을 제거하고 다음 단계로 나아가 봅시다.&lt;/p&gt;
&lt;h2 id=&#34;3단계-가상-머신을-제거하고-컨테이너를-도입하기&#34;&gt;3단계: 가상 머신을 제거하고 컨테이너를 도입하기!&lt;/h2&gt;
&lt;p&gt;이제 가상 머신 대신 완전히 새로운 구성 요소인 컨테이너를 도입하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/nfv/vm-replaced-with-container.png&#34; alt=&#34;vm-replaced-with-container&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;그림 3&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;이제 VNF1은 컨테이너 1에서 실행되고, VNF2는 컨테이너 2에서 실행되어 가상 머신과 동일한 기능을 제공합니다.
우리가 달성한 것은 가상 머신과 동일한 기능이지만, 동일한 운영체제 내에서 실행된다는 점입니다.
여기서 운영체제는 리눅스입니다.
눈치채셨나요? 이제 게스트 운영체제가 필요하지 않습니다!
더 간단한 아키텍처입니다.
그렇죠?&lt;/p&gt;
&lt;h1 id=&#34;컨테이너로-무엇을-달성했나요&#34;&gt;컨테이너로 무엇을 달성했나요?&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;컨테이너 환경에서는 게스트 운영체제(OS)가 필요하지 않습니다.
보시다시피 호스트 OS는 리눅스입니다.
따라서 가상 머신에 비해 더 경량이며 오버헤드가 적습니다.&lt;/li&gt;
&lt;li&gt;아키텍처가 간소화되었습니다.
하이퍼바이저를 제거하고 컨테이너가 동일한 호스트 OS 내에서 OS 수준의 충분한 격리를 유지할 수 있기 때문입니다.&lt;/li&gt;
&lt;li&gt;가상 머신은 하드웨어 수준의 가상화를 제공합니다.
즉, 전통적인 가상 머신은 하이퍼바이저 소프트웨어를 통해 호스트를 분할합니다.
이 말은 가상 머신이 호스트 머신의 OS와 격리된다는 것을 의미합니다.
예를 들어, 리눅스 운영체제 위에서 윈도우 호스트를 실행할 수 있습니다.
반면, 컨테이너는 OS 수준의 가상화를 제공합니다.
즉, 동일한 OS 내에서 애플리케이션이 서로 격리된 상태를 유지할 수 있습니다.
이것은 가상 머신에 비해 오버헤드가 훨씬 적은 방식입니다.
왜냐하면 전체 OS를 중복해서 실행할 필요가 없기 때문입니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;컨테이너에 대한 설명은 여기까지입니다.&lt;/p&gt;
&lt;h1 id=&#34;nfv를-위한-컨테이너의-미래&#34;&gt;NFV를 위한 컨테이너의 미래&lt;/h1&gt;
&lt;p&gt;솔직히 말해서, 현재 NFV 아키텍처와 표준은 가상 머신을 기반으로 하고 있습니다.&lt;/p&gt;
&lt;p&gt;컨테이너는 아직 NFV에서 새로운 개념입니다.
특히 보안 관점에서 여전히 많은 개발이 진행되고 있습니다.
보시다시피 호스트 OS는 모든 컨테이너에 노출되어 있기 때문에 멀티 테넌시 환경에서 잠재적인 보안 문제가 발생할 수 있습니다.&lt;/p&gt;
&lt;p&gt;그럼에도 불구하고 컨테이너는 이러한 환경에서 VNF를 실행하는 데 있어 간단하고 효율적인 방식을 제공하기 때문에 유망한 미래를 약속합니다.
또한, 가상 머신 위에서 전체 VNF를 실행하는 대신, 마이크로서비스를 실행할 수 있습니다.&lt;/p&gt;
&lt;p&gt;예를 들어 가상 CPE(vCPE, Virtual Customer Premises Equipment)의 경우 많은 구성요소를 작은 컨테이너로 분해하고 서로 연결(체이닝)할 수 있습니다.
기능을 분해하면 소프트웨어 벤더들이 VNF의 작은 기능을 더 쉽게 개발할 수 있고 오버헤드도 줄일 수 있는 기회를 제공합니다.&lt;/p&gt;
- https://markruler.github.io/posts/nfv/beginners-guide-docker-container-nfv/ - Im Changsu | Since 2020</description>
        </item>
    
    
    
        <item>
        <title>쿠버네티스 컴포넌트를 로컬에서 직접 빌드 및 디버깅하기</title>
        <link>https://markruler.github.io/posts/kubernetes/local-build-kube/</link>
        <pubDate>Sun, 11 Oct 2020 14:48:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/kubernetes/local-build-kube/</guid>
        <description>임창수 https://markruler.github.io/posts/kubernetes/local-build-kube/ -&lt;blockquote&gt;
&lt;p&gt;직접 빌드해서 사용한다면 쿠버네티스 기능을 확장해서 사용할 수 있다.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/release-1.19/build/README.md&#34;&gt;kubernetes/build/README.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;사용할-명령어&#34;&gt;사용할 명령어&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# master 브랜치&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone --depth &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; https://github.com/kubernetes/kubernetes.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 특정 브랜치&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone --depth &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; --single-branch --branch release-1.19 https://github.com/kubernetes/kubernetes.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# cmd 디렉터리에 있는 다른 컴포넌트도 같은 방식으로 빌드할 수 있다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# cmd/kubeadm, kubectl, kubelet, kube-apiserver, kube-proxy, kube-controller-manager, kube-scheduler, ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make all &lt;span style=&#34;color:#eedd82&#34;&gt;WHAT&lt;/span&gt;=cmd/kubectl &lt;span style=&#34;color:#eedd82&#34;&gt;GOFLAGS&lt;/span&gt;=-v
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 그냥 간단히 go build 명령도 가능하다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go build -o k cmd/kubectl
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;빌드-실행-따라가기&#34;&gt;빌드 실행 따라가기&lt;/h2&gt;
&lt;h3 id=&#34;makefile&#34;&gt;Makefile&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;make 명령을 내릴 루트 디렉터리 Makefile을 보면 아래와 같이 다른 Makefile을 가리킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;build/root/Makefile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;실제로-빌드되는-makefile&#34;&gt;실제로 빌드되는 Makefile&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/release-1.19/build/root/Makefile&#34;&gt;build/root/Makefile&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;all 타겟은 WHAT 전달인자와 함께 build.sh 쉘 스크립트 파일을 실행시킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Build code.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Args:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#   WHAT: Directory names to build.  If any of these directories has a &amp;#39;main&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#     package, the build will produce executable files under $(OUT_DIR)/bin.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#     If not specified, &amp;#34;everything&amp;#34; will be built.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#   GOFLAGS: Extra flags to pass to &amp;#39;go&amp;#39; when building.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#   GOLDFLAGS: Extra linking flags passed to &amp;#39;go&amp;#39; when building.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#   GOGCFLAGS: Additional go compile flags passed to &amp;#39;go&amp;#39; when building.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Example:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#   make
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#   make all
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#   make all WHAT=cmd/kubelet GOFLAGS=-v
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#   make all GOLDFLAGS=&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#     Note: Specify GOLDFLAGS as an empty string for building unstripped binaries, which allows
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#           you to use code debugging tools like delve. When GOLDFLAGS is unspecified, it defaults
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#           to &amp;#34;-s -w&amp;#34; which strips debug information. Other flags that can be used for GOLDFLAGS 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#           are documented at https://golang.org/cmd/link/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;endef
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff0&#34;&gt;.PHONY&lt;/span&gt;: all
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ifeq (&lt;span style=&#34;color:#f00&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;PRINT_HELP&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;)&lt;/span&gt;,y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff0&#34;&gt;all&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	@echo &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$$&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;ALL_HELP_INFO&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;else
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff0&#34;&gt;all&lt;/span&gt;: generated_files
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	hack/make-rules/build.sh &lt;span style=&#34;color:#f00&#34;&gt;$(&lt;/span&gt;WHAT&lt;span style=&#34;color:#f00&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endif
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;all-generated_files&#34;&gt;all: generated_files&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/release-1.19/hack/make-rules/build.sh&#34;&gt;hack/make-rules/build.sh&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# This script sets up a go workspace locally and builds all go components.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set -o errexit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set -o nounset
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set -o pipefail
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;KUBE_ROOT&lt;/span&gt;=&lt;span style=&#34;color:#f00&#34;&gt;$(&lt;/span&gt;dirname &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;BASH_SOURCE&lt;/span&gt;[0]&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;)&lt;/span&gt;/../..
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;KUBE_VERBOSE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;KUBE_VERBOSE&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;KUBE_ROOT&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;/hack/lib/init.sh&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 👉 hack/lib/golang.sh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube::golang::build_binaries &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$@&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube::golang::place_bins
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;kubegolang&#34;&gt;kube::golang::&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/release-1.19/hack/lib/golang.sh&#34;&gt;hack/lib/golang.sh&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;참고로 쉘 스크립트의 function 키워드는 생략할 수 있으며, double colon(::)은 쿠버네티스의 Naming Convection으로 보인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Build binaries targets specified&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Input:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#   $@ - targets and go flags.  If no targets are set then all binaries targets&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#     are built.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#   KUBE_BUILD_PLATFORMS - Incoming variable of targets to build for.  If unset&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#     then just the host architecture is built.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube::golang::build_binaries() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# This will take binaries from $GOPATH/bin and copy them to the appropriate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# place in ${KUBE_OUTPUT_BINDIR}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Ideally this wouldn&amp;#39;t be necessary and we could just set GOBIN to&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# KUBE_OUTPUT_BINDIR but that won&amp;#39;t work in the face of cross compilation.  &amp;#39;go&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# install&amp;#39; will place binaries that match the host platform directly in $GOBIN&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# while placing cross compiled binaries into `platform_arch` subdirs.  This&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# complicates pretty much everything else we do around packaging and such.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kube::golang::place_bins() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;# V=2 kube::log::status ${KUBE_OUTPUT_BINPATH}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;# 위 로그 함수를 추가해서 빌드하면 어디에 빌드되었는지 확인할 수 있다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;# &amp;gt; [%m%d %H:%M:%S] /home/kubernetes/kubernetes/_output/local/bin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;로그-레벨&#34;&gt;로그 레벨&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/master/hack/lib/logging.sh&#34;&gt;hack/lib/logging.sh&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# This controls the verbosity of the build. Higher numbers mean more output.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;KUBE_VERBOSE&lt;/span&gt; ?= &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 찾아보면 V=4까지 있는 것 같아서 4로 지정했다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 👉 hack/lib/logging.sh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff0&#34;&gt;kube&lt;/span&gt;::log::status() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local &lt;span style=&#34;color:#eedd82&#34;&gt;V&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; [[ &lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;KUBE_VERBOSE&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt; ]]; &lt;span style=&#34;color:#f00&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eedd82&#34;&gt;timestamp&lt;/span&gt;=&lt;span style=&#34;color:#f00&#34;&gt;$(&lt;/span&gt;date +&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;[%m%d %H:%M:%S]&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  echo &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;+++ &lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  shift
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;for&lt;/span&gt; message; &lt;span style=&#34;color:#f00&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    echo &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;    &lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cmdkubectl&#34;&gt;cmd/kubectl&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/release-1.19/cmd/kubectl/kubectl.go&#34;&gt;kubectl.go&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;package&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	goflag &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;math/rand&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;github.com/spf13/pflag&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	cliflag &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;k8s.io/component-base/cli/flag&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;k8s.io/kubectl/pkg/util/logs&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;k8s.io/kubernetes/pkg/kubectl/cmd&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#0f0&#34;&gt;// Import to initialize client auth plugins.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	_ &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;k8s.io/client-go/plugin/pkg/client/auth&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	rand.&lt;span style=&#34;color:#ff0&#34;&gt;Seed&lt;/span&gt;(time.&lt;span style=&#34;color:#ff0&#34;&gt;Now&lt;/span&gt;().&lt;span style=&#34;color:#ff0&#34;&gt;UnixNano&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	command := cmd.&lt;span style=&#34;color:#ff0&#34;&gt;NewDefaultKubectlCommand&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#0f0&#34;&gt;// TODO: once we switch everything over to Cobra commands, we can go back to calling&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#0f0&#34;&gt;// cliflag.InitFlags() (by removing its pflag.Parse() call). For now, we have to set the&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#0f0&#34;&gt;// normalize func and add the go flag set by hand.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	pflag.CommandLine.&lt;span style=&#34;color:#ff0&#34;&gt;SetNormalizeFunc&lt;/span&gt;(cliflag.WordSepNormalizeFunc)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	pflag.CommandLine.&lt;span style=&#34;color:#ff0&#34;&gt;AddGoFlagSet&lt;/span&gt;(goflag.CommandLine)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#0f0&#34;&gt;// cliflag.InitFlags()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	logs.&lt;span style=&#34;color:#ff0&#34;&gt;InitLogs&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f00&#34;&gt;defer&lt;/span&gt; logs.&lt;span style=&#34;color:#ff0&#34;&gt;FlushLogs&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err := command.&lt;span style=&#34;color:#ff0&#34;&gt;Execute&lt;/span&gt;(); err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		os.&lt;span style=&#34;color:#ff0&#34;&gt;Exit&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pkgkubectlcmd&#34;&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/release-1.19/pkg/kubectl/cmd/cmd.go&#34;&gt;pkg/kubectl/cmd&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;디버깅&#34;&gt;디버깅&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;환경은 VS Code에 github.com/go-delve/delve/cmd/dlv 를 설치한다.&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/editor/debugging&#34;&gt;launch.json&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;version&amp;#34;: &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;0.2.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;configurations&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;#34;type&amp;#34;: &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;go&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;#34;request&amp;#34;: &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;launch&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;#34;name&amp;#34;: &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;kubectl&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;#34;program&amp;#34;: &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;${workspaceFolder}/cmd/kubectl/kubectl.go&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;#34;args&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;view&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/kubernetes/vscode-debugging-golang.png&#34; alt=&#34;vscode-debugging-golang&#34;&gt;&lt;/p&gt;
- https://markruler.github.io/posts/kubernetes/local-build-kube/ - Im Changsu | Since 2020</description>
        </item>
    
    
  </channel>
</rss> 