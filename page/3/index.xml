<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>임창수</title>
    <link>https://markruler.github.io/</link>
    <description>Recent content on 임창수</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <managingEditor>imcxsu@gmail.com (Im Changsu)</managingEditor>
    <webMaster>imcxsu@gmail.com (Im Changsu)</webMaster>
    <copyright>Im Changsu 2020 - 2024</copyright>
    <lastBuildDate>Fri, 06 Dec 2024 13:26:00 +0900</lastBuildDate>
    
        <atom:link href="https://markruler.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>모니터링과 타임아웃의 중요성</title>
        <link>https://markruler.github.io/posts/java/java-timeout-monitoring/</link>
        <pubDate>Wed, 11 May 2022 02:19:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/java/java-timeout-monitoring/</guid>
        <description>임창수 https://markruler.github.io/posts/java/java-timeout-monitoring/ -&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://markruler.github.io/posts/cloud/monitor-trace-log-metric/&#34;&gt;Observability 용어 정리&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;상황&#34;&gt;상황&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;현재팀에서 만들고 있는 애플리케이션은 Spring Framework로 작성하고 있다.&lt;/li&gt;
&lt;li&gt;계속 특정 애플리케이션과 함께 여러 애플리케이션에서 후속 장애가 발생했다.&lt;/li&gt;
&lt;li&gt;장애가 발생할 때마다 특정 API의 커넥션이 끊기지 않고 오랜 시간 유지되고 있었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/datadog/transaction-deadlock.png&#34; alt=&#34;transaction-deadlock&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;code&gt;RedisSystemException&lt;/code&gt;은 해당 서버를 죽이면서 Redis와 커넥션이 끊어졌기 때문에 발생한 예외다.
만약 서버를 죽이지 않았다면 끝까지 물고 있었을 것이다.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;분석&#34;&gt;분석&lt;/h2&gt;
&lt;p&gt;시간만 보고도 Timeout이 설정되어 있지 않다는 것을 확인할 수 있다.
설정하지 않으면 &lt;strong&gt;default 값은 -1&lt;/strong&gt; 로 타임아웃이 발생하지 않는다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// org.springframework.transaction.support.AbstractPlatformTransactionManager&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TransactionDefinition.TIMEOUT_DEFAULT = -1;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;하지만 트랜잭션이 왜 저렇게 오래 유지되는지 알 수 없었다.
그래도 서버 장애가 발생하는 이유는 알 수 있었다.
TImeout이 발생하지 않다보니 해당 트랜잭션들 사이에 데드락(Deadlock)이 발생했고
하나의 서비스 뿐만 아니라 해당 테이블을 사용하는 모든 서비스에 장애가 발생했다.&lt;/p&gt;
&lt;h2 id=&#34;해결&#34;&gt;해결&lt;/h2&gt;
&lt;h3 id=&#34;sql-튜닝&#34;&gt;SQL 튜닝&lt;/h3&gt;
&lt;p&gt;가장 먼저 시도한 건 SQL 튜닝이었다.
해당 트랜잭션이 왜 끊기지 않았는지 파악할 수 없었지만 해당 SQL을 실행시켰을 때 무려 8초 가량이 소요되었다.
튜닝을 통해 개선한 SQL은 약 1.1초 가량 소요되었다. (이후 1초 이내로 튜닝해보자..!)&lt;/p&gt;
&lt;h3 id=&#34;timeout-설정&#34;&gt;Timeout 설정&lt;/h3&gt;
&lt;p&gt;Transaction Timeout은 &lt;code&gt;TransactionManager&lt;/code&gt; 에 설정해야 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;bean id=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;transactionManager&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;class&lt;/span&gt;=&amp;#34;org.springframework.jdbc.datasource.DataSourceTransactionManager&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;    &amp;lt;constructor-arg ref=&amp;#34;&lt;/span&gt;dataSource&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;    &amp;lt;property name=&amp;#34;&lt;/span&gt;defaultTimeout&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34; value=&amp;#34;&lt;/span&gt;30&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;lt;/bean&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;만약 특정 메서드에만 다른 타임아웃 값을 설정하고 싶다면 메서드 레벨에 &lt;code&gt;@Transactional&lt;/code&gt; 을 설정한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// timeout은 seconds 단위&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Transactional(readOnly = &lt;span style=&#34;color:#f00&#34;&gt;true&lt;/span&gt;, timeout = 10)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;public&lt;/span&gt; Result &lt;span style=&#34;color:#ff0&#34;&gt;list&lt;/span&gt;(Param param) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; repository.list(param);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;추가적인-문제&#34;&gt;추가적인 문제&lt;/h1&gt;
&lt;p&gt;우리 팀은 모니터링 도구로 Datadog을 사용하고 있다.
그런데 알람 임계점(Alert threshold)이 낮게 설정되어 있어서 불필요한 알람이 아주 많이 발생했다.
개발팀은 이 알람들을 무시하고 있었고, 실제로 장애가 발생했을 때 백이면 백 개발팀보다 다른 팀에서 먼저 감지했다.&lt;/p&gt;
&lt;h2 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h2&gt;
&lt;p&gt;그래서 임계점을 높게 설정했다.
이미 Datadog 도입 시점부터 알람이 자주 발생했는데도 고치지 않았던 것으로 보인다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/datadog/alert-threshold.png&#34; alt=&#34;alert-threshold&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;10 minutes Average Latency&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;위 Average Latency 그래프에서 스파이크(spike) 부분이 서버 장애가 발생했던 시점이다.
그런데 이전부터 거의 구분할 수 없을 정도로 Alert가 발생하던 것을 확인할 수 있다.
임계점을 높인 이후에는 정상적인 애플리케이션에서는 &lt;code&gt;OK&lt;/code&gt;가 표시된다.&lt;/p&gt;
&lt;p&gt;임계점에 대한 기준은 과거 이력을 보고 설정했다.
장애가 발생하던 시점에 전조가 보이기 시작한 값을 경고 임계점(Warning threshold)으로 설정하고,
증상이 나타났을 때 값을 알람 임계점으로 설정했다.
— 정확한 기준이라고는 할 수 없다. 앞으로도 알람이 발생할 때마다 조정할 예정이다.&lt;/p&gt;
&lt;h2 id=&#34;log-tracing--error-tracking&#34;&gt;Log Tracing &amp;amp; Error Tracking&lt;/h2&gt;
&lt;p&gt;Datadog의 APM(Application Performance Management) 서비스는
애플리케이션의 성능을 실시간으로 분석할 수 있게 도와주고
에러가 발생했을 때 트레이싱 할 수 있도록 도와준다.
하지만 제대로 트레이싱하기 위해서는 이해할 수 있는 로그가 남아야 한다.&lt;/p&gt;
&lt;p&gt;우리 팀에서 작성한 애플리케이션은 Logback을 Logging Framework로 사용하고 있었는데
이를 사용하지 않고 표준 출력(&lt;code&gt;System.out&lt;/code&gt;)을 사용하는 부분이 군데군데 보였다.
게다가 공통 로깅을 AOP로 분리하지 않고 각각의 메서드에서 처리하고 있었다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;System.out&lt;/code&gt; 을 사용하면 로그 레벨이나 목적별로 분리해서 설정할 수 없을 뿐더러
애플리케이션 로그 파일에 로그가 남지 않고 Tomcat의 &lt;code&gt;catalina.out&lt;/code&gt; 에 남는다.
그럼 특정 기능에서 에러가 발생하는데도 로그를 확인하기 어렵다.
Checkstyle을 도입해서 모든 &lt;code&gt;System.out&lt;/code&gt;, &lt;code&gt;System.err&lt;/code&gt;(&lt;code&gt;printStackTrace&lt;/code&gt; 포함)을 Logger로 대체했다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&amp;lt;!-- checkstyle.xml --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;module name=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;RegexpSinglelineJava&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;property name=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; value=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;SystemOutput&amp;#34;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;property name=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;format&amp;#34;&lt;/span&gt; value=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;^.*System\.(out|err).*$&amp;#34;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;property name=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;ignoreComments&amp;#34;&lt;/span&gt; value=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;property name=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              value=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Don&amp;#39;t use System.out/err, use Logger instead.&amp;#34;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/module&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;module name=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;RegexpSinglelineJava&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;property name=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt; value=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;printStackTrace&amp;#34;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;property name=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;format&amp;#34;&lt;/span&gt; value=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;printStackTrace&amp;#34;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;property name=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;ignoreComments&amp;#34;&lt;/span&gt; value=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;property name=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              value=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Don&amp;#39;t use printStackTrace, use Logger instead.&amp;#34;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/module&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;특히 선임 중 한 분이 &lt;a href=&#34;https://twitter.com/rpbaltazar/status/1458979690790539266&#34;&gt;“200 OK, But”&lt;/a&gt; 방식을 선호했다.
이 방식은 오류가 발생해도 잡아서(catch) &lt;code&gt;200 OK&lt;/code&gt; 응답을 보낸다.
&lt;strong&gt;에러가 발생하는데도 모니터링 도구에서는 마치 애플리케이션이 정상적인 것처럼 보인다.&lt;/strong&gt;
이런 방식은 HTTP가 네트워크 프로토콜이라는 것을 고려해보면
서버와 클라이언트 간 커뮤니케이션을 더 힘들게 만든다는 것을 알 수 있다.
그래서 그 분이 퇴사하시자마자 HTTP 상태 코드를 분리했다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/200-ok-but.webp&#34; alt=&#34;200-ok-but&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;200 OK, but&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;spring-aop&#34;&gt;Spring AOP&lt;/h2&gt;
&lt;p&gt;마지막으로 AOP를 이용해서 공통 로깅을 분리했다.
예를 들어 트랜잭션 타임아웃이 발생하면 &lt;code&gt;TransactionTimedOutException&lt;/code&gt; 예외가 발생한다.
그래서 해당 예외를 위한 핸들러를 추가했다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// org.springframework.transaction.TransactionTimedOutException&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;org.springframework.transaction.TransactionTimedOutException: Transaction timed out: deadline was Wed May 04 16:42:38 KST 2022
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.springframework.transaction.support.ResourceHolderSupport.checkTransactionTimeout(ResourceHolderSupport.java:141)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.springframework.transaction.support.ResourceHolderSupport.getTimeToLiveInMillis(ResourceHolderSupport.java:130)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.springframework.transaction.support.ResourceHolderSupport.getTimeToLiveInSeconds(ResourceHolderSupport.java:114)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.mybatis.spring.transaction.SpringManagedTransaction.getTimeout(SpringManagedTransaction.java:139)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:87)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:89)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:151)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:145)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at sun.reflect.GeneratedMethodAccessor113.invoke(Unknown Source)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at java.lang.reflect.Method.invoke(Method.java:498)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:434)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at com.sun.proxy.$Proxy36.selectOne(Unknown Source)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:167)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:145)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@ControllerAdvice
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;class&lt;/span&gt; ServerErrorAdvice {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @ResponseBody
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @ExceptionHandler(TransactionTimedOutException.class)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;public&lt;/span&gt; ErrorResponse &lt;span style=&#34;color:#ff0&#34;&gt;handleTransactionTimedOutException&lt;/span&gt;(TransactionTimedOutException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;new&lt;/span&gt; ErrorResponse(e.toString());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이때까지만 해도 해결된 것으로 보였다.&lt;/p&gt;
&lt;h1 id=&#34;상황-2&#34;&gt;상황 2&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/datadog/transaction-timeout.png&#34; alt=&#34;transaction-timeout&#34;&gt;&lt;/p&gt;
&lt;p&gt;주말이 지나고 월요일 아침, 갑자기 레이턴시가 높아지고 &lt;code&gt;TransactionTimedOutException&lt;/code&gt; 예외가 발생했다.&lt;/p&gt;
&lt;h2 id=&#34;분석-2&#34;&gt;분석 2&lt;/h2&gt;
&lt;p&gt;예외가 발생한 코드는 다음과 같은 구조를 가졌다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Service
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Transactional
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;class&lt;/span&gt; ServiceImpl &lt;span style=&#34;color:#f00&#34;&gt;implements&lt;/span&gt; Service {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;public&lt;/span&gt; List&amp;lt;Result&amp;gt; &lt;span style=&#34;color:#ff0&#34;&gt;list&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Response response = callHttpClientWithoutTimeout(); &lt;span style=&#34;color:#0f0&#34;&gt;// (2) TransactionTimedOutException 발생&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; accessDb(response);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Override
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;public&lt;/span&gt; Response &lt;span style=&#34;color:#ff0&#34;&gt;callHttpClientWithoutTimeout&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        CloseableHttpClient httpClient = HttpClients.createDefault();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        HttpGet request = &lt;span style=&#34;color:#f00&#34;&gt;new&lt;/span&gt; HttpGet(url);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        CloseableHttpResponse response = httpClient.execute(request); &lt;span style=&#34;color:#0f0&#34;&gt;// (1) HttpHostConnectException 발생&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; response;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;먼저 로그를 확인해보았다.
해당 시간대에 IPInfoDB API 서버로 요청하는 부분에서
일시적으로 Connection Timeout이 발생했던 것을 확인할 수 있었다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[2022-05-09 06:32:57:8502224037446002723 2136207119638956779] ERROR org.apache.http.conn.HttpHostConnectException: Connect to api.ipinfodb.com:80 [api.ipinfodb.com/45.32.138.106] failed: 연결 시간 &lt;span style=&#34;color:#ff0&#34;&gt;초과&lt;/span&gt; (Connection timed out)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;org.apache.http.conn.HttpHostConnectException: Connect to api.ipinfodb.com:80 [api.ipinfodb.com/45.32.138.106] failed: 연결 시간 &lt;span style=&#34;color:#ff0&#34;&gt;초과&lt;/span&gt; (Connection timed out)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:159)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:373)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:394)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:237)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:185)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:89)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:110)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:185)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:108)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:798)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:808)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1498)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at java.lang.Thread.run(Thread.java:748)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Caused by: java.net.ConnectException: 연결 시간 &lt;span style=&#34;color:#ff0&#34;&gt;초과&lt;/span&gt; (Connection timed out)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at java.net.PlainSocketImpl.socketConnect(Native Method)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at java.net.Socket.connect(Socket.java:589)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.http.conn.socket.PlainConnectionSocketFactory.connectSocket(PlainConnectionSocketFactory.java:75)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:142)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ... 134 common frames omitted
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;로그에서 보듯이 HTTP 요청에 사용한 라이브러리는 &lt;code&gt;org.apache.httpcomponents.httpclient&lt;/code&gt; 이며 Timeout 기본값이 &lt;code&gt;-1&lt;/code&gt; 이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// org.apache.http.client.config.RequestConfig&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;connectionRequestTimeout = -1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;connectTimeout = -1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;socketTimeout = -1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;해당 값들은 Connection Manager에서 &lt;code&gt;0&lt;/code&gt;으로 설정된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// org.apache.http.impl.execchain.MainClientExec&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;this&lt;/span&gt;.connManager.connect(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        managedConn,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        route,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        timeout &amp;gt; 0 ? timeout : 0,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        context);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;0&lt;/code&gt;으로 설정된 커넥션 타임아웃은 발생하지 않기 때문에 끊기지 않고 계속 대기한다.
그러다가 트랜잭션 타임아웃이 발생하면서 커넥션이 끊긴 것이다.
데드락과 달리 연쇄 서버 장애는 아닌 셈이다.&lt;/p&gt;
&lt;h2 id=&#34;해결-2&#34;&gt;해결 2&lt;/h2&gt;
&lt;p&gt;네트워크 연결이 필요할 경우 반드시 Timeout 값을 설정해야 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt; timeout = 5;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RequestConfig config = RequestConfig.custom()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .setConnectTimeout(timeout * 1000)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .setConnectionRequestTimeout(timeout * 1000)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .setSocketTimeout(timeout * 1000)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .build();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HttpClient httpClient = 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    HttpClientBuilder.create().setDefaultRequestConfig(config).build();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;결론&#34;&gt;결론&lt;/h1&gt;
&lt;p&gt;Timeout을 설정하지 않으면 데드락부터 연쇄 서버 장애까지 많은 것을 겪을 수 있다.
부디 Timeout 설정을 잊지 말고 이것을 관찰할 수 있도록 유의미한 로깅과 모니터링을 하자! 🧑‍💻&lt;/p&gt;
&lt;h1 id=&#34;더-읽을-거리&#34;&gt;더 읽을 거리&lt;/h1&gt;
&lt;h2 id=&#34;logging&#34;&gt;Logging&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slipp.net/questions/350&#34;&gt;Exception 처리 권고사안&lt;/a&gt; - benelog&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gmlwjd9405.github.io/2019/01/04/logging-with-slf4j.html&#34;&gt;SLF4J를 이용한 Logging&lt;/a&gt; - heejeong Kwon&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://xlffm3.github.io/spring%20&amp;amp;%20spring%20boot/async-logger-performance/&#34;&gt;Log4j2 및 Logback의 Async Logging 성능 테스트 비교&lt;/a&gt; - Jinhong&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;monitoring-1&#34;&gt;Monitoring&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.44bits.io/ko/keyword/datadog&#34;&gt;데이터독(Datadog)이란?&lt;/a&gt; - 44bits&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.datadoghq.com/blog/alerting-101-metric-checks/&#34;&gt;Alerting 101: Timeseries metric checks&lt;/a&gt; - Datadog&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.datadoghq.com/blog/introducing-recovery-thresholds/&#34;&gt;Introducing recovery thresholds for metric alerts&lt;/a&gt; - Datadog&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.datadoghq.com/tracing/guide/week_over_week_p50_comparison/&#34;&gt;Compare a Service’s latency to the previous week&lt;/a&gt; - Datadog&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.linecorp.com/ko/blog/line-failure-reporting-and-follow-up-process-culture/&#34;&gt;LINE의 장애 보고와 후속 절차 문화&lt;/a&gt; - LINE Engineering&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;transaction&#34;&gt;Transaction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/5.3.2/reference/html/data-access.html#transaction&#34;&gt;Data Access - Transaction Management&lt;/a&gt; - Spring Docs
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://godekdls.github.io/Spring%20Data%20Access/transactionmanagement/&#34;&gt;번역&lt;/a&gt; - 토리맘의 한글라이즈 프로젝트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://techblog.woowahan.com/2606/&#34;&gt;응? 이게 왜 롤백되는거지?&lt;/a&gt; - 우아한형제들 기술 블로그&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://techblog.woowahan.com/2664/&#34;&gt;HikariCP Dead lock에서 벗어나기 (이론편)&lt;/a&gt; - 우아한형제들 기술 블로그&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://techblog.woowahan.com/2663/&#34;&gt;HikariCP Dead lock에서 벗어나기 (실전편)&lt;/a&gt; - 우아한형제들 기술 블로그&lt;/li&gt;
&lt;/ul&gt;
- https://markruler.github.io/posts/java/java-timeout-monitoring/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>깃(Git) CLI 환경에서 소스 코드 관리하기</title>
        <link>https://markruler.github.io/posts/shell/git-commands/</link>
        <pubDate>Wed, 01 Dec 2021 23:28:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/shell/git-commands/</guid>
        <description>임창수 https://markruler.github.io/posts/shell/git-commands/ -&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#git-internal&#34;&gt;Git Internal&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%EC%B0%A8%EC%9D%B4%EA%B0%80-%EC%95%84%EB%8B%88%EB%9D%BC-%EC%8A%A4%EB%83%85%EC%83%B7&#34;&gt;차이가 아니라 스냅샷&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EB%AC%B4%EA%B2%B0%EC%84%B1&#34;&gt;데이터의 무결성&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#git-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%9D%98-%EC%84%B8-%EA%B0%80%EC%A7%80-%EB%8B%A8%EA%B3%84&#34;&gt;Git 프로젝트의 세 가지 단계&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#git-directory&#34;&gt;Git directory&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#head&#34;&gt;HEAD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#refs&#34;&gt;refs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#info&#34;&gt;info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#objects&#34;&gt;objects&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tree&#34;&gt;tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#blob-binary-large-object&#34;&gt;blob (binary large object)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#commit&#34;&gt;commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tag&#34;&gt;tag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#index&#34;&gt;index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hash-function&#34;&gt;Hash Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#config&#34;&gt;config&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scm-source-code-management&#34;&gt;SCM: Source Code Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%ED%8F%AC%EC%85%80%EB%A6%B0porcelain-%EB%AA%85%EB%A0%B9%EC%96%B4&#34;&gt;포셀린(Porcelain) 명령어&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#init&#34;&gt;init&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#clone&#34;&gt;clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#submodule&#34;&gt;submodule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#subtree&#34;&gt;subtree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#branch&#34;&gt;branch&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#xargs&#34;&gt;xargs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tag-1&#34;&gt;tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#switch&#34;&gt;switch&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#upstream&#34;&gt;upstream&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#status&#34;&gt;status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#add&#34;&gt;add&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fetch&#34;&gt;fetch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#commit-1&#34;&gt;commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#merge&#34;&gt;merge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pull&#34;&gt;pull&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rebase&#34;&gt;rebase&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#squash%EC%99%80-fixup&#34;&gt;squash와 fixup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cherry-pick&#34;&gt;cherry-pick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stash&#34;&gt;stash&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#how-git-stash-works&#34;&gt;How git stash works&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reset&#34;&gt;reset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#restore&#34;&gt;restore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#revert&#34;&gt;revert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#git%EC%9C%BC%EB%A1%9C-%EB%B2%84%EA%B7%B8-%EC%B0%BE%EA%B8%B0&#34;&gt;Git으로 버그 찾기&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#blame&#34;&gt;blame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bisect&#34;&gt;bisect&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#show&#34;&gt;show&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#log&#34;&gt;log&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#triple-dot&#34;&gt;Triple Dot(&amp;hellip;)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reflog-reference-logs&#34;&gt;reflog: Reference logs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#diff&#34;&gt;diff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#push&#34;&gt;push&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%ED%94%8C%EB%9F%AC%EB%B0%8Dplumbing-%EB%AA%85%EB%A0%B9%EC%96%B4&#34;&gt;플러밍(Plumbing) 명령어&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#rev-parse&#34;&gt;rev-parse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hash-object&#34;&gt;hash-object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ls-tree&#34;&gt;ls-tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ls-files&#34;&gt;ls-files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cat-file&#34;&gt;cat-file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#write-tree&#34;&gt;write-tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#commit-tree&#34;&gt;commit-tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#read-tree&#34;&gt;read-tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#update-index&#34;&gt;update-index&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#advanced&#34;&gt;Advanced&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#git-hooks&#34;&gt;Git Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#garbage-collection&#34;&gt;Garbage Collection&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#packfiles&#34;&gt;Packfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gc&#34;&gt;gc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#prune&#34;&gt;prune&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#git-server&#34;&gt;Git Server&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#fork&#34;&gt;Fork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#branch-protection-rules&#34;&gt;Branch protection rules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%EC%B0%B8%EA%B3%A0&#34;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Git의 모든 기능을 지원하는 것은 CLI 뿐이다.
GUI 프로그램의 대부분은 Git 기능 중 일부만 구현하기 때문에 비교적 단순하다.
CLI를 사용할 줄 알면 GUI도 사용할 수 있지만 반대는 성립하지 않는다. -
&amp;lt;&lt;a href=&#34;https://git-scm.com/book/en/v2&#34;&gt;Pro Git&lt;/a&gt;&amp;gt; Scott Chacon, Ben Straub&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;git-internal&#34;&gt;Git Internal&lt;/h1&gt;
&lt;h2 id=&#34;차이가-아니라-스냅샷&#34;&gt;차이가 아니라 스냅샷&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.blog/2020-12-17-commits-are-snapshots-not-diffs/&#34;&gt;Commits are snapshots, not diffs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CVS, Subversion, Perforce, Bazaar 등의 시스템은 각 파일의 변화를 시간순으로 관리하면서 파일들의 집합을 관리한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/git/storing-data-as-changes.png&#34; alt=&#34;Storing data as changes to a base version of each file&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F&#34;&gt;Storing data as changes to a base version of each file&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Git은 데이터를 스냅샷의 스트림처럼 취급한다. 파일이 달라지지 않았으면 이전 상태의 파일에 대한 링크만 저장한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/git/storing-data-as-snapshots.png&#34; alt=&#34;Storing data as snapshots of the project over time&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F&#34;&gt;Storing data as snapshots of the project over time&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;데이터의-무결성&#34;&gt;데이터의 무결성&lt;/h2&gt;
&lt;p&gt;Git에서 데이터를 저장하기 전에 가장 먼저 하는 작업은 Hash function을 사용해서 체크섬을 계산하는 것이다.
그리고 이 체크섬으로 데이터를 관리한다.&lt;/p&gt;
&lt;p&gt;왜 데이터의 무결성을 검사해야 할까?
&lt;a href=&#34;https://www.youtube.com/watch?v=4XpnKHJAok8&amp;amp;t=56m25s&#34;&gt;데이터를 신뢰하기 위해서다&lt;/a&gt;.
예를 들어 내가 오늘 작성한 파일이 내일 혹은 10년 뒤에도 같다고 믿을 수 있게 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ echo &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt; &amp;gt; test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git hash-object test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;9daeafb9864cf43055ae93beb0afd6c7d144bfa4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 파일명을 변경하더라도 체크섬은 바뀌지 않는다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mv test.txt test2.md
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git hash-object test2.md
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;9daeafb9864cf43055ae93beb0afd6c7d144bfa4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 내용을 변경하면 체크섬은 바뀐다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ echo &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; test2.md
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git hash-object test2.md
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d698e83c7a0b75a29e815371e584973062b4cab9
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Git은 SHA-1 알고리즘을 사용하여 체크섬을 구한다.
만든 체크섬은 40자 길이의 16진수 문자열이다.
파일의 내용이나 디렉터리 구조를 이용하여 체크섬을 구한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-%EB%A6%AC%EB%B9%84%EC%A0%84-%EC%A1%B0%ED%9A%8C%ED%95%98%EA%B8%B0&#34;&gt;Git을 쓰는 사람들은 언젠가 SHA-1 값이 중복될까 봐 걱정한다.
정말 그렇게 되면 어떤 일이 벌어질까?&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이미 있는 SHA-1 값이 Git 데이터베이스에 커밋되면 새로운 객체라고 해도 이미 커밋된 것으로 생각하고 이전의 커밋을 재사용한다.
그래서 해당 SHA-1 값의 커밋을 Checkout 하면 항상 처음 저장한 커밋만 Checkout 된다.&lt;/p&gt;
&lt;p&gt;그러나 해시 값이 중복되는 일은 일어나기 어렵다.
SHA-1 값의 크기는 20 Bytes(160 Bits)다.
해시 값이 중복될 확률이 50%가 되는 데 필요한 객체의 수는 2^80이다.&lt;/p&gt;
&lt;p&gt;(&lt;a href=&#34;https://lore.kernel.org/git/20180609224913.GC38834@genre.crustytoothpaste.net/&#34;&gt;2018년부터 SHA-256으로 전환하고 있고&lt;/a&gt;, Git 2.29부터 지원하고 있다)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 해시 값 앞부분이 중복되지 않으면 checksum은 앞 4자만 있어도 된다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git ls-tree ee85
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 앞부분이 중복된다면 아래와 같은 에러가 발생한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ferror: short object ID ee85 is ambiguous
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hint: The candidates are:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hint:   ee8597496 commit 2022-01-12 - 제가 작성한 커밋 메시지입니다
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hint:   ee85c50d6 tree
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hint:   ee8574581 blob
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fatal: Not a valid object name ee85
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 몇 글자를 더 입력해주면 정상적으로 동작한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git ls-tree ee859
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;git-프로젝트의-세-가지-단계&#34;&gt;Git 프로젝트의 세 가지 단계&lt;/h2&gt;
&lt;p&gt;Git은 파일을 세 가지 상태로 관리한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/git/lifecycle-file-status.png&#34; alt=&#34;The lifecycle of the status of your files&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository&#34;&gt;The lifecycle of the status of your files&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modified - 수정한 파일을 아직 로컬 데이터베이스에 커밋하지 않은 상태다.&lt;/li&gt;
&lt;li&gt;Staged - 현재 수정한 파일을 곧 커밋할 것이라고 표시한 상태다.
파일을 Stage하면 Git 저장소에 파일을 Blob으로 저장하고 Staging Area에 해당 파일의 체크섬을 저장한다.
&lt;ul&gt;
&lt;li&gt;Tracked - 관리 대상에 있는 파일이다. 이미 스냅샷에 포함되어 있던 파일이다.&lt;/li&gt;
&lt;li&gt;Untracked - Unmodified, Modified, Staged 상태가 아닌 나머지 파일은 모두 Untracked 파일이다.
다시 말해서 Staging Area(index)에도 포함되지 않았고 스냅샷으로 저장되어 있지 않은 파일이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Committed - 데이터가 로컬 데이터베이스에 안전하게 저장된 상태다.
루트 디렉토리와 각 하위 디렉토리의 트리 객체(Object)를 체크섬과 함께 저장소에 저장한다.
그 후 커밋 객체를 만들고 메타데이터와 루트 디렉터리 트리 객체를 가리키는 포인터 정보를 커밋 객체에 넣어 저장한다.
그래서 필요하면 언제든지 스냅샷을 다시 만들 수 있다.&lt;/li&gt;
&lt;li&gt;아래는 커밋의 객체들을 나타낸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/git/commit-and-its-tree.png&#34; alt=&#34;A commit and its tree&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell&#34;&gt;A commit and its tree&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;아래는 커밋과 이전 커밋들을 나타낸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/git/commit-and-its-parent.png&#34; alt=&#34;Commits and their parents&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell&#34;&gt;Commits and their parents&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;파일의 세 가지 상태는 Git 프로젝트의 세 가지 단계와 연결된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/git/git-three-step.png&#34; alt=&#34;Working tree, staging area, and Git directory&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F#_the_three_states&#34;&gt;Working tree, staging area, and Git directory&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Working Tree - 프로젝트의 특정 버전을 Checkout 한 것이다.
Git Directory 안에 압축된 DB에서 파일을 가져와 워킹 트리를 만든다.&lt;/li&gt;
&lt;li&gt;Staging Area - 곧 커밋할 파일에 대한 정보를 담고 있으며 Git Directory 안(&lt;code&gt;.git/index&lt;/code&gt;)에 저장된다.
Index라고도 불리지만 Staging Area가 거의 표준이다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stage&lt;/code&gt;라는 용어는 두루 쓰이기 때문에 한번 생각해 볼 만하다.
stage는 &amp;ldquo;과정이나 발전, 성장 등의 단계&amp;quot;라는 뜻을 가지고 있다.
그래서 &amp;ldquo;목표로 하는 것의 직전 단계&amp;quot;라고 생각하면 쉽다.
Git에서의 staging area는 저장소에 커밋되기 직전 단계이고,
배포 환경에서의 staging 서버는 production 서버에 배포하기 직전 단계에 있는 서버다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Git으로 하는 일은 기본적으로 아래와 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Working Tree에서 파일을 수정한다.&lt;/li&gt;
&lt;li&gt;Staging Area에 파일을 Stage 해서 커밋할 스냅샷을 만든다.&lt;/li&gt;
&lt;li&gt;Staging Area에 있는 파일들을 커밋해서 Git Direcoty에 영구적인 스냅샷으로 저장한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;git-directory&#34;&gt;Git directory&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;.git/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Git이 프로젝트의 메타데이터와 객체 데이터베이스를 저장하는 곳이다.
description 파일은 기본적으로 GitWeb 프로그램에서만 사용하기 때문에 이 파일은 신경쓰지 않아도 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tree -L &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; .git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── branches
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── COMMIT_EDITMSG
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── config
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── description
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── FETCH_HEAD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── HEAD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── hooks
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── commit-msg.sample
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── prepare-commit-msg.sample
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── pre-push.sample
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── index
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── info
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── exclude
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── logs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── HEAD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── refs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── objects
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── &lt;span style=&#34;color:#f60&#34;&gt;00&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── &lt;span style=&#34;color:#f60&#34;&gt;01&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── &lt;span style=&#34;color:#f60&#34;&gt;02&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── &lt;span style=&#34;color:#f60&#34;&gt;03&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── &lt;span style=&#34;color:#f60&#34;&gt;04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── &lt;span style=&#34;color:#f60&#34;&gt;05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── info
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── pack
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── ORIG_HEAD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── packed-refs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── refs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ├── heads
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ├── remotes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ├── stash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    └── tags
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;head&#34;&gt;HEAD&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat HEAD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ref: refs/heads/main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat refs/heads/main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4436e4b582c7a8c942f11746d54cf4338325442c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;이름&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
          &lt;th&gt;파일 내용&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;HEAD&lt;/td&gt;
          &lt;td&gt;지금 작업하고 있는 로컬 브랜치를 가리키는 포인터. 로컬 브랜치는 해당 브랜치의 마지막 커밋을 가리킨다.&lt;/td&gt;
          &lt;td&gt;ref: refs/heads/main&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ORIG_HEAD&lt;/td&gt;
          &lt;td&gt;HEAD의 이전 커밋을 백업&lt;/td&gt;
          &lt;td&gt;ec2a7f1e03bca5485627b8af6b76129aa3f49b8a&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;FETCH_HEAD&lt;/td&gt;
          &lt;td&gt;가장 최근에 fetch한 브랜치와 그 브랜치의 HEAD&lt;/td&gt;
          &lt;td&gt;2a6464fe3e243a15ceeef19c32e930374481e87f not-for-merge branch &amp;lsquo;main&amp;rsquo; of github.com:markruler/markruler.github.io&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;MERGE_HEAD, CHERRY_PICK_HEAD, REVERT_HEAD, BISECT_HEAD, &amp;hellip;&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;refs&#34;&gt;refs&lt;/h2&gt;
&lt;p&gt;commit 객체의 포인터를 저장한다.&lt;/p&gt;
&lt;h2 id=&#34;info&#34;&gt;info&lt;/h2&gt;
&lt;p&gt;저장소에 관한 추가 정보들은 이 디렉터리 안에 저장된다.
&lt;code&gt;.gitignore&lt;/code&gt; 파일처럼 무시할 파일의 패턴을 적어둘 수 있다.
다만 &lt;code&gt;.git/info/exclude&lt;/code&gt;은 &lt;code&gt;.git&lt;/code&gt; 디렉토리 안에 있기 때문에 동료와 공유할 수 없다.&lt;/p&gt;
&lt;h2 id=&#34;objects&#34;&gt;objects&lt;/h2&gt;
&lt;p&gt;다른 VCS의 저장소처럼 Git의 저장소는 파일에 대한 유지, 복제, 수정 등의 이력을 관리하는데 필요한 모든 데이터를 포함하는 데이터베이스다.
하지만 Git의 이런 작업들을 처리하는 방식은 다른 VCS들과 차별화되어 있다.&lt;/p&gt;
&lt;p&gt;Git은 유입되는 모든 것을 Object로 간주한다.
주요 Object 유형으로 blob, tree, commit, tag가 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/git/simple-git-data-model.png&#34; alt=&#34;Simple version of the Git data model&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Internals-Git-Objects&#34;&gt;Simple version of the Git data model&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;tree&#34;&gt;tree&lt;/h3&gt;
&lt;p&gt;Git은 유닉스 파일 시스템과 비슷한 방법으로 저장하지만 좀 더 단순하다.
모든 것을 tree와 blob 객체로 저장한다.
tree는 유닉스의 디렉토리에 대응되고 blob은 inode나 일반 파일에 대응된다.
tree 객체 하나는 항목을 여러 개 가질 수 있다.
그리고 그 항목에는 blob 객체나 하위 tree 객체를 가리키는 SHA-1 포인터, 파일 모드, 객체 타입, 파일 이름이 들어 있다. &lt;code&gt;write-tree&lt;/code&gt; 명령으로 생성한다.&lt;/p&gt;
&lt;h3 id=&#34;blob-binary-large-object&#34;&gt;blob (binary large object)&lt;/h3&gt;
&lt;p&gt;blob은 데이터 구조에 상관없이 모든 종류의 파일을 저장한다.
파일의 위치나 이름과 같은 파일의 메타 데이터가 아닌 파일 내용 자체를 저장한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git cat-file -p d8329fc1cc938780ffdd9f94e0d364e0ea74f579
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;100644&lt;/span&gt; blob 83baae61804e65cc73a7201a7252750c76066a30      test.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기서 blob의 파일 모드는 보통의 파일을 나타내는 &lt;code&gt;100644&lt;/code&gt;,
실행파일을 나타내는 &lt;code&gt;100755&lt;/code&gt;,
심볼릭 링크를 나타내는 &lt;code&gt;120000&lt;/code&gt; 세 가지만 사용한다.&lt;/p&gt;
&lt;h3 id=&#34;commit&#34;&gt;commit&lt;/h3&gt;
&lt;p&gt;스냅샷에 관한 모든 메타 데이터를 보유하는 객체다.
메타 데이터는 스냅샷을 누가, 언제, 왜 저장했는지에 대한 정보를 포함한다.
&lt;code&gt;commit-tree&lt;/code&gt; 명령으로 생성한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/git/reachable-objects.png&#34; alt=&#34;All the reachable objects in your Git directory&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Internals-Git-Objects&#34;&gt;All the reachable objects in your Git directory&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;tag&#34;&gt;tag&lt;/h3&gt;
&lt;p&gt;커밋 객체를 쉽게 참조할 수 있도록 도와주는 labeling 객체다.&lt;/p&gt;
&lt;h2 id=&#34;index&#34;&gt;index&lt;/h2&gt;
&lt;p&gt;Staging Area에 관한 정보가 저장되어 있다.
즉, 저장소에 커밋할 파일을 보관하는 장소다.&lt;/p&gt;
&lt;h2 id=&#34;hash-function&#34;&gt;Hash Function&lt;/h2&gt;
&lt;p&gt;체크섬을 계산한다.&lt;/p&gt;
&lt;h2 id=&#34;config&#34;&gt;config&lt;/h2&gt;
&lt;p&gt;git 설정을 저장한다.
설정 데이터는 우선순위가 있는데 범위가 좁은 Local이 가장 우선 적용된다.
Local (&lt;code&gt;.git/config&lt;/code&gt;) &amp;gt; Global (&lt;code&gt;$HOME/.gitconfig&lt;/code&gt;) &amp;gt; System (&lt;code&gt;/etc/gitconfig&lt;/code&gt;) 순서다.
config 파일은 INI file(&lt;code&gt;.ini&lt;/code&gt;) 형식이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macOS에서는 Local 설정보다 Keychain이 우선하나? TODO&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# $HOME/.gitconfig&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;[user]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  email = &lt;span style=&#34;color:#87ceeb&#34;&gt;imcxsu@gmail.com
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;  name = Changsu Im&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;[core]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  editor = &lt;span style=&#34;color:#87ceeb&#34;&gt;vim&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;[diff]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tool = &lt;span style=&#34;color:#87ceeb&#34;&gt;vimdiff&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;[difftool]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  prompt = &lt;span style=&#34;color:#87ceeb&#34;&gt;false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;  # Be able to abort all diffs with `:cq` or `:qa!`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;  # `:cq` to quit without saving and make Vim return non-zero error (i.e. exit with error)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;  # `:qa` to quit all (short for :quitall)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;  trustExitCode = true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;[alias]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fix = &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;!git commit --fixup $(git log -n 20 --pretty=format:&amp;#39;%Cred%h - %s&amp;#39; --graph --abbrev-commit | fzf --reverse | awk &amp;#39;{print $2}&amp;#39;)&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;  lg = log --graph --format=format:&amp;#39;%C(bold blue)%h%C(reset) - %C(bold cyan)%aD %C(bold green)(%ar)%C(bold yellow)    +++ %d%C(reset)%n&amp;#39;L&amp;#39;          %C(white)%s %C(dim white)- %an&amp;#39; --all&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# .git/config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;[core]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  repositoryformatversion = &lt;span style=&#34;color:#87ceeb&#34;&gt;0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;  filemode = true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;  bare = false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;  logallrefupdates = true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;[remote &amp;#34;origin&amp;#34;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  url = &lt;span style=&#34;color:#87ceeb&#34;&gt;git@github.com:okbut/corporate-library-api.git
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;  fetch = +refs/heads/*:refs/remotes/origin/*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;[branch &amp;#34;main&amp;#34;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  remote = &lt;span style=&#34;color:#87ceeb&#34;&gt;origin
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;  merge = refs/heads/main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git config --global user.name Changsu Im
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git config --global user.email imcxsu@gmail.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# config 목록 출력&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git config --list
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git config --list --global
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;scm-source-code-management&#34;&gt;SCM: Source Code Management&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/source-code-management&#34;&gt;Source code management&lt;/a&gt; - Atlassian&lt;/li&gt;
&lt;li&gt;What? 코드 변경 사항을 추적하고 관리하는 방법이다. &amp;lsquo;Version Control System&amp;rsquo;으로도 불린다.&lt;/li&gt;
&lt;li&gt;Why? 팀의 커뮤니케이션 오버헤드를 줄이고 릴리스 속도를 높일 수 있다.&lt;/li&gt;
&lt;li&gt;How? Git Commands
&lt;ul&gt;
&lt;li&gt;포셀린(Porcelain) 명령어는 사용자에게 이해하기 쉬운 명령어다.&lt;/li&gt;
&lt;li&gt;플러밍(Plumbing) 명령어는 저수준 명령어다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;포셀린porcelain-명령어&#34;&gt;포셀린(Porcelain) 명령어&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://markruler.github.io/posts/shell/cs-visualized-useful-git-commands/&#34;&gt;&amp;lsquo;CS Visualized: 유용한 깃(Git) 명령어&amp;rsquo;&lt;/a&gt;를 함께 읽는다.&lt;/p&gt;
&lt;h2 id=&#34;init&#34;&gt;init&lt;/h2&gt;
&lt;p&gt;현재 디렉토리에 &lt;code&gt;.git&lt;/code&gt; 디렉터리를 생성하고 Git 프로젝트로 초기화한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Initialized empty Git repository in /home/markruler/toy/.git/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;clone&#34;&gt;clone&lt;/h2&gt;
&lt;p&gt;remote 리포지토리의 설정 정보를 제외한 모든 데이터를 로컬 머신에 복제한다. 그 과정은 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;대상 디렉토리가 존재하지 않는다면 생성하고, 대상 디렉토리를 GIt 디렉토리로 초기화한다.&lt;/li&gt;
&lt;li&gt;대상 디렉토리 안에 소스 저장소의 브랜치와 동일한 추적 브랜치들을 설정한다. (git remote)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.git&lt;/code&gt; 디렉토리 내부에 objects와 references를 연결한다.&lt;/li&gt;
&lt;li&gt;최신 버전을 checkout한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone &lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;origin&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Cloning into &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;my-origin-repo&amp;#39;&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote: Enumerating objects: 22940, &lt;span style=&#34;color:#f00&#34;&gt;done&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote: Counting objects: 100% (1929/1929), &lt;span style=&#34;color:#f00&#34;&gt;done&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote: Compressing objects: 100% (780/780), &lt;span style=&#34;color:#f00&#34;&gt;done&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote: Total &lt;span style=&#34;color:#f60&#34;&gt;22940&lt;/span&gt; (delta 1277), reused &lt;span style=&#34;color:#f60&#34;&gt;1675&lt;/span&gt; (delta 1131), pack-reused &lt;span style=&#34;color:#f60&#34;&gt;21011&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Receiving objects: 100% (22940/22940), 41.19 MiB | 9.49 MiB/s, &lt;span style=&#34;color:#f00&#34;&gt;done&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Resolving deltas: 100% (16109/16109), &lt;span style=&#34;color:#f00&#34;&gt;done&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;submodule&#34;&gt;submodule&lt;/h2&gt;
&lt;p&gt;submodule을 사용하면 다른 리포지터리의 특정 스냅샷을 참조할 수 있다.
submodule을 추가하면 &lt;code&gt;.gitmodules&lt;/code&gt; 파일이 생성된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# submodule을 새로 추가하는 경우&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git submodule add https://github.com/markruler/repository
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 의존하는 submodule 리포지터리를 clone한다&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git submodule update --init --recursive
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;subtree&#34;&gt;subtree&lt;/h2&gt;
&lt;p&gt;submodule은 하위 프로젝트의 체크섬만 참조하는 반면 subtree는 &lt;code&gt;.gitmodule&lt;/code&gt;과 같은 메타 데이터없이 데이터를 그대로 복제한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;왜 submodule 대신 subtree를 사용해야 할까?
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/git-subtree&#34;&gt;Git subtree: the alternative to Git submodule&lt;/a&gt; - Atlassian&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codingkilledthecat.wordpress.com/2012/04/28/why-your-company-shouldnt-use-git-submodules/&#34;&gt;Why your company shouldn&amp;rsquo;t use Git submodules&lt;/a&gt; - Amber&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/git/tree-subtree-concept.png&#34; alt=&#34;tree-subtree-concept&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://opensource.com/article/20/5/git-submodules-subtrees&#34;&gt;일반적인 Tree 개념&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;branch&#34;&gt;branch&lt;/h2&gt;
&lt;p&gt;브랜치(branch)는 나뭇가지나 지점, 분기를 뜻한다. Git의 브랜치는 커밋 사이를 가볍게 이동할 수 있는 포인터 같은 것이다. 흔히 말하는 master, main 브랜치는 트렁크(trunk, 줄기) 브랜치라고 불리는데 소스 코드 통합의 중심이 되는 브랜치이기 때문이다.&lt;/p&gt;
&lt;p&gt;branch 명령을 실행하면 다음의 단계를 수행한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;.git/refs/heads/&lt;/code&gt;에서 모든 브랜치명을 수집한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.git/HEAD&lt;/code&gt;에 위치한 HEAD를 참조해 현재 작업 중인 브랜치를 찾는다.&lt;/li&gt;
&lt;li&gt;모든 브랜치를 오름차순으로 정렬하고, 현재 작업 중인 브랜치에 별표(*)를 표시한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git branch
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* feature
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;xargs&#34;&gt;xargs&lt;/h3&gt;
&lt;p&gt;eXtended ARGuments, Git 명령어는 아니지만 함께 사용하면 유용하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.baeldung.com/linux/xargs&#34;&gt;When to Use xargs&lt;/a&gt; - Baeldung&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ echo {0..9} | xargs -n &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;branch 명령과 xargs 명령을 파이프(&lt;code&gt;|&lt;/code&gt;)로 연결해서 사용하지 않는 작업 브랜치를 한꺼번에 정리할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# master, stable, main, 현재 브랜치 외 모든 브랜치 삭제&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git branch | grep -v &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;master\|stable\|main\|\*&amp;#34;&lt;/span&gt; | xargs git branch -D
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 현재 브랜치 제외하고 삭제&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git branch | grep -v &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;\*&amp;#34;&lt;/span&gt; | xargs git branch -D
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 모두 삭제&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git branch | grep -v &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;^*&amp;#39;&lt;/span&gt; | xargs git branch -D
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 정규표현식으로 특정 브랜치 삭제&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git branch | grep -Eo &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;feature/.*&amp;#39;&lt;/span&gt; | xargs git branch -D
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tag-1&#34;&gt;tag&lt;/h2&gt;
&lt;p&gt;커밋을 참조하기 쉽도록 꼬리표(tag)를 붙인다. Lightweight 태그와 Annotated 태그 두 종류가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lightweight 태그는 단순히 특정 커밋에 대한 포인터일 뿐이다.&lt;/li&gt;
&lt;li&gt;Annotated 태그는 Git 데이터베이스에 태그를 만든 사람의 이름, 이메일과 태그를 만든 날짜, 그리고 태그 메시지도 저장한다.
GPG(GNU Privacy Guard)로 서명할 수도 있다.
일반적으로 Annotated 태그를 만들어 이 모든 정보를 사용할 수 있도록 하는 것이 좋다.
하지만 임시로 생성하는 태그거나 이러한 정보를 유지할 필요가 없는 경우에는 Lightweight 태그를 사용할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Annotated tag&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git tag -a 1.0.0 -m &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;test tag&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# tag 목록&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git tag
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1.0.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# tag 내용 확인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git show 1.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tag 1.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Tagger: Changsu Im &amp;lt;imcxsu@gmail.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Date:   Sat Jan &lt;span style=&#34;color:#f60&#34;&gt;15&lt;/span&gt; 20:38:46 &lt;span style=&#34;color:#f60&#34;&gt;2022&lt;/span&gt; +0900
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test tag
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;commit 49ef168385a2fe63f6e47055c1da79a0465039dc (HEAD -&amp;gt; master, tag: 1.0.0)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git show-ref --tags
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;02618f768d91cc1d21f5998c8d10ad62aacf278b refs/tags/1.0.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;tag 명령어를 실행하면 다음과 같은 단계를 수행한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;커밋이 참조하고 있는 체크섬을 가져온다.&lt;/li&gt;
&lt;li&gt;존재하는 태그명들 중 주어진 태그명을 검증한다.&lt;/li&gt;
&lt;li&gt;새로운 태그명이라면 naming convention을 검증한다.&lt;/li&gt;
&lt;li&gt;태그 객체가 생성된다. (&lt;code&gt;.git/refs/tags/&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;switch&#34;&gt;switch&lt;/h2&gt;
&lt;p&gt;브랜치를 변경한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/git/git/blob/v2.23.0/Documentation/RelNotes/2.23.0.txt#L61&#34;&gt;git@v2.23.0&lt;/a&gt; 부터 &lt;code&gt;checkout&lt;/code&gt; 명령어는 &lt;code&gt;git-switch&lt;/code&gt;와 &lt;code&gt;git-restore&lt;/code&gt;로 분리되었다.
이유는 checkout이 하는 기능이 많기 때문이다.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.blog/2019-08-16-highlights-from-git-2-23/&#34;&gt;Highlights from Git 2.23&lt;/a&gt; - GitHub Blog&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/news/2019/08/git-2-23-switch-restore/&#34;&gt;Git 2.23 Adds Switch and Restore Commands&lt;/a&gt; - Sergio De Simone&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 1. 원격 리포지터리에서 해결하려는 Issue에 맞는 브랜치를 생성한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 2. 로컬 환경에서 원격 리포지터리의 업데이트 사항을 가져온다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git fetch --all
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 3. 해당 브랜치를 tracking하는 로컬 브랜치를 생성한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# git switch -c &amp;lt;branch&amp;gt; -t[--track] &amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git switch -c feature/local-test -t origin/feature/remote-test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Branch &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;feature/local-test&amp;#39;&lt;/span&gt; set up to track remote branch &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;feature/remote-test&amp;#39;&lt;/span&gt; from &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;origin&amp;#39;&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Switched to a new branch &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;feature/local-test&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 브랜치를 Local에서 먼저 생성하는 경우도 있다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 1. 브랜치를 생성한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git switch -c test-rebase
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 2. upstream을 지정한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git branch --set-upstream-to=origin/test-rebase test-rebase
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Branch &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;test-rebase&amp;#39;&lt;/span&gt; set up to track remote branch &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;test-rebase&amp;#39;&lt;/span&gt; from &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;origin&amp;#39;&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 3. rebase&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git rebase
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;First, rewinding head to replay your work on top of it...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Fast-forwarded add-github-action to refs/remotes/origin/test-rebase.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;upstream&#34;&gt;upstream&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/git/triangular-workflow.png&#34; alt=&#34;Triangular Workflow&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.blog/2015-07-29-git-2-5-including-multiple-worktrees-and-triangular-workflows/&#34;&gt;Triangular Workflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;upstream이라는 용어는 헷갈릴 수 있다.
협업 프로젝트에서 보통 위와 같은 원본 저장소를 &lt;code&gt;upstream&lt;/code&gt;이라고 부르고
그것을 &lt;a href=&#34;#fork&#34;&gt;fork&lt;/a&gt;한 저장소를 &lt;code&gt;origin&lt;/code&gt;,
upstream에서 fetch한 나의 로컬 환경을 &lt;code&gt;local&lt;/code&gt;이라고 부른다.
아래 명령어는 지정한 &lt;code&gt;upstream&lt;/code&gt; 브랜치로 push하도록 한다.&lt;/p&gt;
&lt;p&gt;잠깐. fork한 &lt;code&gt;origin&lt;/code&gt; 저장소가 아니라 &lt;code&gt;upstream&lt;/code&gt;으로 push한다?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push --set-upstream origin feature/test-upstream
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# push 후&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Branch &amp;#39;feature/test-upstream&amp;#39; set up to track remote branch &amp;#39;feature/test-upstream&amp;#39; from &amp;#39;origin&amp;#39;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;사실 upstream이라는 용어는 Git에서만 쓰이는 건 아니다.
흔히 downstream과 대비해서 네트워크에서도 쓰이는 용어다.
예를 들어 로컬에서 원격으로, 클라이언트에서 서버로 데이터를 전송하는 것을 upstream이라고 말하고, downstream은 그 반대다.
즉, upload/download의 방향을 말하며 Git에서 upstream은 push하려는 방향을 말한다.&lt;/p&gt;
&lt;p&gt;여기서 중요한 점은 Git에서 절대적인 upstream/downstream이 없다는 것이다.
Git은 DVCS(Distributed Version Control System)다.
다시 말해서 origin이 upstream일 수 있고, upstream은 또 다른 저장소의 downstream일 수 있다.
Triangular Workflow는 하나의 효과적인 방식일 뿐이다.&lt;/p&gt;
&lt;h2 id=&#34;status&#34;&gt;status&lt;/h2&gt;
&lt;p&gt;index 파일과 HEAD 커밋, index 파일과 working tree를 비교해서 차이나는 부분을 표시한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git status -sb
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;## feature...master [ahead 2, behind 1]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;D  README.md
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;D  a.c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;D  c.c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;?? README.md
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;?? a-1.c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;?? test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;add&#34;&gt;add&lt;/h2&gt;
&lt;p&gt;Working Directory의 변경 사항들을 Staging Area에 포함시킨다.
index를 갱신하고 다음 커밋에 대한 컨텐츠를 준비한다. 그 과정은 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;컨텐츠에 대한 SHA-1 체크섬을 계산한다.&lt;/li&gt;
&lt;li&gt;기존의 blob 객체에 새로운 컨텐츠나 링크를 만들지 여부를 결정한다.&lt;/li&gt;
&lt;li&gt;실제로 생성하거나 blob에 연결한다.&lt;/li&gt;
&lt;li&gt;컨텐츠에 위치를 추적할 tree 객체를 생성한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 모든 변경 사항을 staging area에 추가&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git add -A
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 현재 디렉토리의 변경 사항을 staging area에 추가&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 특정 변경 사항만 추가&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git add &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;*Detail.java&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git add src/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;fetch&#34;&gt;fetch&lt;/h2&gt;
&lt;p&gt;커밋, 파일 및 참조를 원격 저장소에서 로컬 저장소로 다운로드한다.
다른 사람들이 작업한 것을 보고 싶을 때 사용할 수 있다.
다음과 같은 단계를 수행한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;URL이나 원격 저장소 이름을 검증하고, 지정된 저장소에 대한 유효성을 확인한다.&lt;/li&gt;
&lt;li&gt;정의된 것이 없다면 설정 파일을 읽어서 기본 설정된 원격 저장소를 찾는다.&lt;/li&gt;
&lt;li&gt;찾았다면 원격 저장소로부터 이름이 지정된 참조(heads와 tags)와 관련된 객체들까지 가져온다.&lt;/li&gt;
&lt;li&gt;복구 가능한 참조들은 나중에 병합이 가능하도록 &lt;code&gt;.git/FETCH_HEAD&lt;/code&gt;에 저장한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git fetch &amp;lt;branch&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git fetch --all &lt;span style=&#34;color:#0f0&#34;&gt;# Fetch all remotes.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Fetching origin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git merge &amp;lt;origin/branch&amp;gt; &amp;lt;commit&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git merge FETCH_HEAD
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;commit-1&#34;&gt;commit&lt;/h2&gt;
&lt;p&gt;관리 대상(Tracked)에 있는 변경 사항들을 HEAD에 반영한다.
즉, staging area(index)에 있는 변경 사항들을 local repository에 반영한다.
그렇다고 working tree나 staging area의 내용들을 지우지 않는다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;commit message&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 마지막 커밋의 author를 변경할 수 있다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 특정 커밋의 author를 변경하고 싶다면 rebase를 사용한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit --amend --author=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Changsu Im &amp;lt;imcxsu@gmail.com&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;merge&#34;&gt;merge&lt;/h2&gt;
&lt;p&gt;소스 코드를 병합한다.
다음과 같은 단계를 수행한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;지정된 파라미터를 기반으로 &lt;code&gt;.git/refs/heads&lt;/code&gt; 디렉토리로부터 병합 후보들을 식별한다.&lt;/li&gt;
&lt;li&gt;모든 heads의 공통된 조상을 찾아 메모리에 있는 모든 대상 객체들을 로드한다.&lt;/li&gt;
&lt;li&gt;공통 조상과 HEAD 사이의 차이를 판별한다.&lt;/li&gt;
&lt;li&gt;두 head를 비교한다.&lt;/li&gt;
&lt;li&gt;head 사이의 공통된 영역에서 변경 사항이 있다면 마커를 통해 충돌을 표시하고 사용자에게 안내한다.&lt;/li&gt;
&lt;li&gt;충돌한 곳이 없다면, 콘텐츠를 병합하고, 병합을 기술한 메타데이터를 커밋한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# feature 브랜치에서 main 브랜치`를` 병합한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git switch feature
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git merge main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 위 명령어들은 한 줄로 실행할 수 있다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git merge feature main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# merge 과정에서 충돌이 발생했다면 --abort 옵션으로 취소할 수 있다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git merge --abort
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/git/merging-main-into-the-feature-branch.png&#34; alt=&#34;Merging main into the feature branch&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/merging-vs-rebasing&#34;&gt;Merging main into the feature branch&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;병합은 두 가지 방식이 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# fast-forward&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git merge --ff
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;먼저 Fast Forward 방식이다.
현재 브랜치의 커밋(2nd commit)이 병합하려는 커밋(1st commit)을 조상(ancestor)으로 두고 있다면
별도의 Merge 과정 없이 그저 최신 커밋(1st commit ← 2nd commit)으로 이동한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# no-fast-forward&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git merge --no-ff
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;두 번째는 &lt;a href=&#34;https://en.wikipedia.org/wiki/Merge_(version_control)#Three-way_merge&#34;&gt;3-way-merge&lt;/a&gt; 방식을 사용한 No Fast Forward 방식이다.
현재 브랜치의 커밋(2nd commit)이 병합하려는 커밋(1st commit)을 조상으로 두지 않는다면 공통 조상 하나를 사용하여 병합한다.
단순히 브랜치 포인터를 최신 커밋으로 옮기는 게 아니라 3-way-merge의 결과를
별도의 &lt;strong&gt;Merge 커밋&lt;/strong&gt;으로 만들고 나서 해당 브랜치의 HEAD가 그 커밋들을 가리키도록 이동시킨다.
이 Merge 커밋은 부모 커밋을 2개 가진다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*   commit aec54781c060c26eeb5a6475ea3fede4a47dc178
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|&lt;span style=&#34;color:#87ceeb&#34;&gt;\ &lt;/span&gt; Merge: be1dacb bf50160 &lt;span style=&#34;color:#0f0&#34;&gt;# 부모 커밋이 2개&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| | Author: Changsu &amp;lt;imcxsu@gmail.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| | Date:   Wed Dec &lt;span style=&#34;color:#f60&#34;&gt;15&lt;/span&gt; 05:46:44 &lt;span style=&#34;color:#f60&#34;&gt;2021&lt;/span&gt; +0900
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| |     Merge pull request &lt;span style=&#34;color:#0f0&#34;&gt;#16 from markruler/test-merge-branch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| |     Testing merge commit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| * commit bf50160af864cab37ba8eca54c97c6e448886b62 (test-merge-branch)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;만약 병합하는 두 브랜치에서 같은 파일의 같은 부분을 동시에 수정하고 병합하면 GIt은 해당 부분을 병합하지 못한다.
3-way-merge가 실패하고 충돌(Conflict)이 발생한다.
&lt;code&gt;git mergetool&lt;/code&gt;을 활용하면 간편하게 충돌을 해결할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git mergetool
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This message is displayed because &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;merge.tool&amp;#39;&lt;/span&gt; is not configured.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;See &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;git mergetool --tool-help&amp;#39;&lt;/span&gt; or &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;git help config&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;for&lt;/span&gt; more details.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;git mergetool&amp;#39;&lt;/span&gt; will now attempt to use one of the following tools:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc codecompare smerge emerge vimdiff nvimdiff
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;No files need merging
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git mergetool --tool-help
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;git mergetool --tool=&amp;lt;tool&amp;gt;&amp;#39;&lt;/span&gt; may be set to one of the following:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vimdiff
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vimdiff2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vimdiff3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The following tools are valid, but not currently available:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    araxis
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bc3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    codecompare
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    deltawalker
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    diffmerge
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    diffuse
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ecmerge
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    emerge
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    examdiff
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    guiffy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gvimdiff
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gvimdiff2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gvimdiff3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    kdiff3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    meld
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    opendiff
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p4merge
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    smerge
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tkdiff
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tortoisemerge
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    winmerge
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    xxdiff
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Some of the tools listed above only work in a windowed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;environment. If run in a terminal-only session, they will fail.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pull&#34;&gt;pull&lt;/h2&gt;
&lt;p&gt;해당 명령은 내부적으로 다음의 과정을 수행한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;주어진 파라미터를 가지고 &lt;code&gt;git fetch&lt;/code&gt;를 수행한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge&lt;/code&gt;를 호출해 현재 브랜치의 HEAD와 지정한 브랜치의 HEAD를 병합한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Git 서버의 Pull Request는 협업 과정에서 &amp;ldquo;제가 이런 작업들을 origin 저장소에 병합하니까 pull 부탁드려요~&amp;ldquo;라고 하는 것과 같다.&lt;/p&gt;
&lt;h2 id=&#34;rebase&#34;&gt;rebase&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/photo?fbid=4291246567585200&#34;&gt;rebase는 Git의 꽃이다.&lt;/a&gt; - 이규원&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;merge는 병합하려는 commit 객체를 그대로 가져오는 non-destructive 명령이다.
반면 rebase는 내용은 같지만 새로운 commit 객체를 생성해서 HEAD에 배치한다.
그래서 만약 rebase를 이용해 소스를 병합한다면 이미 병합한 작업 브랜치는 더 이상 사용할 수 없다.&lt;/p&gt;
&lt;p&gt;rebase를 하든지, merge를 하든지 최종 결과물은 같지만 커밋 히스토리가 다르다.
보통 원격 브랜치에 커밋 히스토리를 깔끔하게 적용하고 싶을 때 사용한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# oldBase 브랜치에서 newBase 브랜치로 rebase한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git rebase &amp;lt;newBase&amp;gt; &amp;lt;oldBase&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# feature 브랜치에서 main 브랜치`로` 재배치(rebase)한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git switch feature
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       A---B---C feature
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      /
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; D---E---F---G main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git rebase main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git rebase main feature
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               A&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;--B&amp;#39;&lt;/span&gt;--C&amp;#39; feature
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              /
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; D---E---F---G main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/git/rebasing-the-feature-branch-onto-main.png&#34; alt=&#34;Rebasing the feature branch onto main&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/merging-vs-rebasing&#34;&gt;Rebasing the feature branch onto main&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;o---o---o---o---o  main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#87ceeb&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;         o---o---o---o---o  featureA
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#87ceeb&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;               o---o---o  featureB
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git rebase --onto main featureA featureB
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      o---o---o  featureB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     /
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    o---o---o---o---o  main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#87ceeb&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;      o---o---o---o---o  featureA
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;interactive 모드를 사용하면 커밋 목록을 나열한 후 todo 목록을 작성해서 rebase 작업을 진행할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 돌아가고 싶은 커밋의 직전 커밋까지&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# -i 옵션은 --interactive의 short option&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git rebase -i &amp;lt;commit&amp;gt;^
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# root 커밋부터&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git rebase -i --root
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;아래와 같은 하위 명령어들이 있다.
나열된 커밋의 순서를 바꾸는 것만으로도 실제 커밋 순서가 변경된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# p, pick &amp;lt;commit&amp;gt; = use commit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# r, reword &amp;lt;commit&amp;gt; = use commit, but edit the commit message&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# e, edit &amp;lt;commit&amp;gt; = use commit, but stop for amending&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# s, squash &amp;lt;commit&amp;gt; = use commit, but meld into previous commit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# f, fixup &amp;lt;commit&amp;gt; = like &amp;#34;squash&amp;#34;, but discard this commit&amp;#39;s log message&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# x, exec &amp;lt;command&amp;gt; = run command (the rest of the line) using shell&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# b, break = stop here (continue rebase later with &amp;#39;git rebase --continue&amp;#39;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# d, drop &amp;lt;commit&amp;gt; = remove commit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# l, label &amp;lt;label&amp;gt; = label current HEAD with a name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# t, reset &amp;lt;label&amp;gt; = reset HEAD to a label&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# m, merge [-C &amp;lt;commit&amp;gt; | -c &amp;lt;commit&amp;gt;] &amp;lt;label&amp;gt; [# &amp;lt;oneline&amp;gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# .       create a merge commit using the original merge commit&amp;#39;s&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# .       message (or the oneline, if no original merge commit was&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# .       specified). Use -c &amp;lt;commit&amp;gt; to reword the commit message.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;squash와-fixup&#34;&gt;squash와 fixup&lt;/h3&gt;
&lt;p&gt;squash는 &lt;strong&gt;커밋 메시지를 확인하고 편집한 후&lt;/strong&gt; squash and merge한다.
대상 커밋 뿐만 아니라 이후의 커밋들도 다시 저장해야 하기 때문에 체크섬이 변경된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git --no-pager log --oneline
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;399e2ef (HEAD -&amp;gt; squash) &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ea37b52 &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;7f1a625 (main) &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 지금 staged 파일들을 squash 커밋으로 만든다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git commit --squash ea37b52
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# squash 커밋은 대상 커밋 메시지 앞에 &amp;#34;squash!&amp;#34;이 붙는다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git --no-pager log --oneline
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d927a64 (HEAD -&amp;gt; squash) squash! &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;399e2ef &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ea37b52 &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;7f1a625 (main) &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# squash 커밋들은 커밋 메시지를 확인 후 squash and merge한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git rebase -i --autosquash main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pick ea37b52 &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;squash d927a64 squash! &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pick 399e2ef &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[detached HEAD 6f530b5] &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Date: Mon Jan &lt;span style=&#34;color:#f60&#34;&gt;17&lt;/span&gt; 02:05:58 &lt;span style=&#34;color:#f60&#34;&gt;2022&lt;/span&gt; +0900
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; files changed, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; insertions(+), &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; deletions(-)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; create mode &lt;span style=&#34;color:#f60&#34;&gt;100644&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; create mode &lt;span style=&#34;color:#f60&#34;&gt;100644&lt;/span&gt; d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Successfully rebased and updated refs/heads/squash.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git --no-pager log --oneline
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ea3b05e (HEAD -&amp;gt; squash) &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#0f0&#34;&gt;# 이후의 커밋들도 다시 저장한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;6f530b5 &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;7f1a625 (main) &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;fixup은 squash와 결과가 동일하지만,
original 커밋 메시지만 남기고 fixup 커밋의 메시지들은 &lt;strong&gt;자동으로 버린다&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git --no-pager log --oneline
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ffdc929 (HEAD -&amp;gt; fixup) &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ea53497 &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;7f1a625 (main) &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 지금 staged 파일들을 fixup 커밋으로 만든다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git commit --fixup ea53497
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# fixup 커밋은 대상 커밋 메시지 앞에 &amp;#34;fixup!&amp;#34;이 붙는다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git --no-pager log --oneline
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;202953c (HEAD -&amp;gt; fixup) fixup! &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ffdc929 &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ea53497 &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;7f1a625 (main) &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# fixup 커밋들은 자동으로 squash and merge가 된다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git rebase -i --autosquash main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pick ea53497 &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fixup 202953c fixup! &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pick ffdc929 &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# fixup 커밋의 메시지들은 자동으로 버린다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Successfully rebased and updated refs/heads/fixup.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git --no-pager log --oneline
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;449ed00 (HEAD -&amp;gt; fixup) &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000a709 &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;7f1a625 (main) &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cherry-pick&#34;&gt;cherry-pick&lt;/h2&gt;
&lt;p&gt;어느 브랜치든지 커밋의 체크섬을 알고 있다면 해당 커밋의 변경 사항들을 현재 HEAD에 반영한다.
&lt;strong&gt;커밋 체크섬은 달라진다&lt;/strong&gt;는 것에 유의한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git cherry-pick &amp;lt;commit&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# --no-commit 옵션은 커밋의 변경 내용만 가져오고 커밋하지 않는다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git cherry-pick &amp;lt;commit&amp;gt; --no-commit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;stash&#34;&gt;stash&lt;/h2&gt;
&lt;p&gt;stash는 숨겨둔다는 뜻으로 현재 로컬 브랜치에서 수정한 데이터를 Stack에 임시로 저장해둘 수 있다.
stash에 저장한 데이터는 브랜치 별로 관리되기 때문에 작업 중에 브랜치를 자유롭게 변경할 수 있도록 해준다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 변경 사항을 Stack에 저장한다. 아무런 하위 명령어를 입력하지 않으면 default.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git stash push
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Stack이기 때문에 stash@{0}부터 작업 데이터를 꺼낸 후 drop한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git stash pop
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# pop처럼 작업 데이터를 Stack에서 꺼내지만 Stack에서 drop하지 않는다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git stash apply
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# stash@{0}을 제거한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git stash drop
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 모든 stash 데이터를 제거한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git stash clear
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# stash 목록을 보여준다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git stash list
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# stash@{0}과 HEAD의 diff를 보여준다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git stash show
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# stash@{2}와 HEAD의 diff를 보여준다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git stash show -p[--patch] &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 현재 상태를 저장한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git stash save &amp;lt;message&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git stash save &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;haha&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Saved working directory and index state On master: haha
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git stash list
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stash@{0}: On master: haha
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;기본적으로 untracked 파일이나 ignored 파일은 stash하지 않지만 옵션을 주면 stash 할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/git/git-stash-options.png&#34; alt=&#34;git stash options&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/saving-changes/git-stash&#34;&gt;git stash options&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;how-git-stash-works&#34;&gt;How git stash works&lt;/h3&gt;
&lt;p&gt;stash된 상태는 실제로 로컬 저장소에 커밋 객체처럼 인코딩되어 저장됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git log --oneline --graph stash@{0}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*   3bd5af8 (refs/stash) On master: haha
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|&lt;span style=&#34;color:#87ceeb&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;| * 09162cd index on master: 49ef168 test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* 49ef168 (HEAD -&amp;gt; master) test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat .git/refs/stash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3bd5af85bcbfaf7b031972dc41b016c4eb463028
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reset&#34;&gt;reset&lt;/h2&gt;
&lt;p&gt;HEAD를 특정 상태로 되돌린다.
다양한 mode 옵션이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--soft&lt;/code&gt; - 스테이징된 스냅샷과 워킹 디렉토리는 건드리지 않고 커밋만 업데이트한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--mixed&lt;/code&gt; - default 옵션이다. 스테이징된 스냅샷이 지정한 커밋과 일치하도록 업데이트(Tracked → Untracked)되지만, 워킹 디렉터리는 영향을 받지 않는다. (Undo &lt;code&gt;add&lt;/code&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git reset HEAD^
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git reset --mixed HEAD^
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Unstaged changes after reset:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;M package-lock.json
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;M package.json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--hard&lt;/code&gt; - 스테이징된 스냅샷과 워킹 디렉토리가 지정된 커밋과 일치하도록 업데이트한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git reset --hard HEAD^
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HEAD is now at 955b01b7 chore: renew mac certificates (&lt;span style=&#34;color:#0f0&#34;&gt;#12)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--merge&lt;/code&gt; — 워킹 트리에서 merge를 undo 할 수 있다. (Undo &lt;code&gt;merge&lt;/code&gt;/&lt;code&gt;pull&lt;/code&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git pull
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Auto-merging nitfol
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Merge made by recursive.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  nitfol                |   &lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt; +++++----
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git reset --merge ORIG_HEAD
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;restore&#34;&gt;restore&lt;/h2&gt;
&lt;p&gt;워킹 트리를 복구한다. &lt;code&gt;--staged&lt;/code&gt; 옵션을 지정하면 스테이징된 스냅샷도 되돌릴 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/git/git/blob/v2.23.0/Documentation/RelNotes/2.23.0.txt#L61&#34;&gt;git@v2.23.0&lt;/a&gt; 부터 &lt;code&gt;checkout&lt;/code&gt; 명령어에서 분리되었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# git checkout -- ${file_name}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# git restore --staged ${file_name}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git restore --staged * &lt;span style=&#34;color:#0f0&#34;&gt;# git reset --mixed HEAD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;revert&#34;&gt;revert&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;reset&lt;/code&gt;처럼 커밋을 되돌리지만 이력을 지우지 않고 변경 사항을 되돌리는 커밋을 생성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git revert &amp;lt;commit&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Revert &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;4ea42dbe의 커밋 메시지&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This reverts commit 4ea42dbe6580e4f064091cd50b3c7cb2ab8b0e9b.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;git으로-버그-찾기&#34;&gt;Git으로 버그 찾기&lt;/h2&gt;
&lt;h3 id=&#34;blame&#34;&gt;blame&lt;/h3&gt;
&lt;p&gt;파일의 라인마다 마지막 수정 정보를 확인할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git blame README.md
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0f6d7dc1 (Changsu Im 2021-12-01 23:47:58 +0900 32) &lt;span style=&#34;color:#0f0&#34;&gt;### Bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dd2a98b2 (cxsu       2020-12-28 14:27:42 +0900 33) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dd2a98b2 (cxsu       2020-12-28 14:27:42 +0900 34) &lt;span style=&#34;color:#87ceeb&#34;&gt;```&lt;/span&gt;bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git blame -L 69,82 README.md
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git blame -L &lt;span style=&#34;color:#f60&#34;&gt;69&lt;/span&gt; README.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;bisect&#34;&gt;bisect&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.metaltoad.com/blog/beginners-guide-git-bisect-process-elimination&#34;&gt;A beginner&amp;rsquo;s guide to GIT BISECT&lt;/a&gt; - Tony Rost&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이진 탐색을 이용해 버그가 발생한 커밋을 찾는다.
운영 서버에 버그가 발생했는데 어디서부터 잘못된 건지 찾기 힘들 때가 있다.
이 때 bisect는 스냅샷 더미를 헤집고 다닐 수 있게 도와준다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 테스트 프로젝트 생성&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir git-bisect-tests
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd git-bisect-tests
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo row &amp;gt; test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add -A &amp;amp;&amp;amp; git commit -m &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Adding first row&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo row &amp;gt;&amp;gt; test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add -A &amp;amp;&amp;amp; git commit -m &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Adding second row&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo row &amp;gt;&amp;gt; test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add -A &amp;amp;&amp;amp; git commit -m &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Adding third row&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo your &amp;gt;&amp;gt; test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add -A &amp;amp;&amp;amp; git commit -m &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Adding the word &amp;#39;your&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo boat &amp;gt;&amp;gt; test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add -A &amp;amp;&amp;amp; git commit -m &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Adding the word &amp;#39;boat&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo gently &amp;gt;&amp;gt; test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add -A &amp;amp;&amp;amp; git commit -m &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Adding the word &amp;#39;gently&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed -i -e &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;s/boat/bug/g&amp;#39;&lt;/span&gt; test.txt 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add -A &amp;amp;&amp;amp; git commit -m &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Changing the word &amp;#39;boat&amp;#39; to &amp;#39;bug&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo down &amp;gt;&amp;gt; test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add -A &amp;amp;&amp;amp; git commit -m &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Adding the word &amp;#39;down&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo the &amp;gt;&amp;gt; test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add -A &amp;amp;&amp;amp; git commit -m &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Adding the word &amp;#39;the&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo stream &amp;gt;&amp;gt; test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add -A &amp;amp;&amp;amp; git commit -m &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Adding the word &amp;#39;stream&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;row
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;row
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;row
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;your
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bug &lt;span style=&#34;color:#0f0&#34;&gt;# bug를 찾을 것이다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gently
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;down
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stream
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;bisect를 시작한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git bisect start
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;버그가 있는 현재 커밋을 기록한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git bisect bad
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;버그 없이 멀쩡했던 커밋을 기록한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git log --oneline
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d4a701f (HEAD -&amp;gt; master, refs/bisect/bad) Adding the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;stream&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eedf347 Adding the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;the&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;9a12012 Adding the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;down&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f937601 Changing the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;boat&amp;#39;&lt;/span&gt; to &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;bug&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;759ea63 Adding the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;gently&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;850323e Adding the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;boat&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;222f64a Adding the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;your&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c608f80 Adding third row
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;60532d0 Adding second row
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;106eb10 Adding first row
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git bisect good c608f80
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Bisecting: &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt; revisions left to test after this (roughly &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; steps)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[759ea6356258b687ad8b12178b2934ab5ad830bf] Adding the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;gently&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/git/git-bisect.png&#34; alt=&#34;git-bisect&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.datree.io/resources/git-bisect-debugging-with-git&#34;&gt;Git bisect - debugging with git, Noaa Barki&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;이제부터 버그를 찾아나선다.
Git은 bad 커밋과 good 커밋의 중간 커밋(이진 탐색)을 자동으로 Checkout 해준다.
현재 커밋에서 테스트해보고 만약 버그가 계속 발생한다면 &lt;code&gt;bad&lt;/code&gt;로 기록하고 &lt;code&gt;good&lt;/code&gt; 커밋 방향으로 범위를 좁힌다.
버그가 없으면 &lt;code&gt;good&lt;/code&gt;으로 기록하고 &lt;code&gt;bad&lt;/code&gt; 커밋 방향으로 범위를 좁힌다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 히스토리 확인&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git log --oneline
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;759ea63 (HEAD) Adding the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;gently&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;850323e Adding the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;boat&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;222f64a Adding the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;your&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c608f80 (refs/bisect/good-c608f8011e4bfa3d1f1e9f537cc148769f158669) Adding third row
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 버그가 없다면 good 기록&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;row
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;row
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;row
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;your
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;boat
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gently
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git bisect good
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Bisecting: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; revision left to test after this (roughly &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; step)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[9a120127fabd58d0f54786cf015528f77d9a9f17] Adding the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;down&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;good&lt;/code&gt;으로 기록하면 &lt;code&gt;bad&lt;/code&gt; 커밋 방향으로 이진탐색한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git log --oneline
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;9a12012 (HEAD) Adding the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;down&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f937601 Changing the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;boat&amp;#39;&lt;/span&gt; to &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;bug&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;759ea63 (refs/bisect/good-759ea6356258b687ad8b12178b2934ab5ad830bf) Adding the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;gently&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;850323e Adding the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;boat&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;222f64a Adding the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;your&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c608f80 (refs/bisect/good-c608f8011e4bfa3d1f1e9f537cc148769f158669) Adding third row
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 버그를 발견했다면 bad 기록&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;row
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;row
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;row
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;your
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bug &lt;span style=&#34;color:#0f0&#34;&gt;# 버그다!!!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gently
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;down
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git bisect bad
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Bisecting: &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; revisions left to test after this (roughly &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; steps)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[f9376015d4721390c942c0cd0064467b51495094] Changing the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;boat&amp;#39;&lt;/span&gt; to &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;bug&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;bad&lt;/code&gt;로 기록하면 &lt;code&gt;good&lt;/code&gt; 커밋 방향으로 이진탐색한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git log --oneline
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f937601 (HEAD) Changing the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;boat&amp;#39;&lt;/span&gt; to &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;bug&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;759ea63 (refs/bisect/good-759ea6356258b687ad8b12178b2934ab5ad830bf) Adding the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;gently&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;850323e Adding the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;boat&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;222f64a Adding the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;your&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c608f80 (refs/bisect/good-c608f8011e4bfa3d1f1e9f537cc148769f158669) Adding third row
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그 다음 커밋도 &lt;code&gt;bad&lt;/code&gt;로 기록하고
&lt;code&gt;good&lt;/code&gt; 커밋(refs/bisect/good-759ea63) 사이에 더 이상 커밋이 남아있지 않다면
해당 &lt;code&gt;bad&lt;/code&gt; 커밋이 버그가 발생한 커밋이라고 판단하고 탐색을 종료한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git bisect bad
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f9376015d4721390c942c0cd0064467b51495094 is the first bad commit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;commit f9376015d4721390c942c0cd0064467b51495094
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Author: Changsu Im &amp;lt;imcxsu@gmail.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Date:   Thu Feb &lt;span style=&#34;color:#f60&#34;&gt;17&lt;/span&gt; 03:21:28 &lt;span style=&#34;color:#f60&#34;&gt;2022&lt;/span&gt; +0900
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Changing the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;boat&amp;#39;&lt;/span&gt; to &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;bug&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; test.txt | &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; +-
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; file changed, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; insertion(+), &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; deletion(-)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이진탐색하는 동안 &lt;code&gt;.git&lt;/code&gt; 디렉토리에 bisect를 위한 파일들이 생성된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat .git/BISECT_ANCESTORS_OK
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat .git/BISECT_EXPECTED_REV
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f9376015d4721390c942c0cd0064467b51495094
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat .git/BISECT_LOG
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git bisect start
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# bad: [d4a701f370a2489c8976eb0ce9f7ccbc358e640d] Adding the word &amp;#39;stream&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git bisect bad d4a701f370a2489c8976eb0ce9f7ccbc358e640d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# good: [c608f8011e4bfa3d1f1e9f537cc148769f158669] Adding third row&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git bisect good c608f8011e4bfa3d1f1e9f537cc148769f158669
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# good: [759ea6356258b687ad8b12178b2934ab5ad830bf] Adding the word &amp;#39;gently&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git bisect good 759ea6356258b687ad8b12178b2934ab5ad830bf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# bad: [9a120127fabd58d0f54786cf015528f77d9a9f17] Adding the word &amp;#39;down&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git bisect bad 9a120127fabd58d0f54786cf015528f77d9a9f17
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# bad: [f9376015d4721390c942c0cd0064467b51495094] Changing the word &amp;#39;boat&amp;#39; to &amp;#39;bug&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git bisect bad f9376015d4721390c942c0cd0064467b51495094
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# first bad commit: [f9376015d4721390c942c0cd0064467b51495094] Changing the word &amp;#39;boat&amp;#39; to &amp;#39;bug&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat .git/BISECT_NAMES
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat .git/BISECT_START
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;master
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat .git/BISECT_TERMS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bad
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;good
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;bisect를 끝낼 때는 &lt;code&gt;.git/BISECT_START&lt;/code&gt;로 다시 checkout 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git bisect reset
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Previous HEAD position was f937601 Changing the word &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;boat&amp;#39;&lt;/span&gt; to &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;bug&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Switched to branch &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;master&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;show&#34;&gt;show&lt;/h2&gt;
&lt;p&gt;Git Object를 확인한다. (blob, tree, tag, commit)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# git show ${object}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# tag&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git show v1.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# tree&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git show v1.0.0^{tree}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git show v1.0.0^{tree}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# commit, blob, tree 등의 체크섬&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git show 077b8fa429b57e299eb2db54ccf66ed6f1f993eb --oneline
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 어떤 커밋이 브랜치의 가장 최신 커밋이라면 간단히 브랜치 이름으로 커밋을 가리킬 수 있다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git show master:README.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;log&#34;&gt;log&lt;/h2&gt;
&lt;p&gt;커밋 이력을 조회한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/git-log#_pretty_formats&#34;&gt;pretty formats&lt;/a&gt;을 사용해서 출력 형식을 정할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--abbrev-commit&lt;/code&gt; — 짧고 중복되지 않는 해시 값을 보여준다. 앞 7자를 보여주고 해시 값이 중복되는 경우 더 긴 해시 값을 보여준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git log --oneline --graph
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 날짜 출력&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git log --graph --pretty=format:&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;%C(auto)%h%d (%cr) %cn &amp;lt;%ce&amp;gt; %s&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 모든 브랜치 로그 출력&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git log --graph --format=format:&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;%C(bold blue)%h%C(reset) - %C(bold cyan)%aD %C(bold green)(%ar)%C(bold yellow)%d%C(reset)%n&amp;#39;&lt;/span&gt;L&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;          %C(white)%s %C(dim white)- %an&amp;#39;&lt;/span&gt; --all
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# alias 지정&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git config --global alias.lg &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;log --graph --format=format:&amp;#39;%C(bold blue)%h%C(reset) - %C(bold cyan)%aD %C(bold green)(%ar)%C(bold yellow)%d%C(reset)%n&amp;#39;L&amp;#39;          %C(white)%s %C(dim white)- %an&amp;#39; --all&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git lg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;triple-dot&#34;&gt;Triple Dot(&amp;hellip;)&lt;/h3&gt;
&lt;p&gt;Triple Dot은 양쪽에 있는 두 refs 사이에서 공통으로 가지는 것을 제외하고 서로 다른 커밋만 보여준다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git log master...feature --oneline --left-right
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; 2fe25f7 (HEAD -&amp;gt; feature) q
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; a611f28 feature commit message
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt; 106047f (master) first
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reflog-reference-logs&#34;&gt;reflog: Reference logs&lt;/h2&gt;
&lt;p&gt;Git은 자동으로 브랜치와 HEAD가 지난 몇 달 동안에 가리켰었던 커밋을 모두 기록하는데 이 로그를 &lt;code&gt;reflog&lt;/code&gt;라고 부른다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# git reflog show HEAD@{0}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# git reflog show HEAD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git reflog
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;734713b HEAD@{0}: commit: fixed refs handling, added gc auto, updated
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d921970 HEAD@{1}: merge phedders/rdocs: Merge made by the &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;recursive&amp;#39;&lt;/span&gt; strategy.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1c002dd HEAD@{2}: commit: added some blame and merge stuff
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1c36188 HEAD@{3}: rebase -i (squash): updating HEAD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;95df984 HEAD@{4}: commit: &lt;span style=&#34;color:#0f0&#34;&gt;# This is a combination of two commits.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1c36188 HEAD@{5}: rebase -i (squash): updating HEAD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;7e05da5 HEAD@{6}: rebase -i (pick): updating HEAD
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;특정 브랜치의 reflog만 확인할 수도 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# git reflog show main@{0}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# git reflog show main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git reflog main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Git은 브랜치가 가리키는 것이 달라질 때마다 그 정보를 임시 영역에 저장한다.
그래서 예전에 가리키던 것이 무엇인지 확인해 볼 수 있다.
&lt;code&gt;@{n}&lt;/code&gt; 규칙을 사용하면 아래와 같이 HEAD가 5번 전에 가리켰던 것을 알 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git show HEAD@{5}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;commit a66e752aa1fccaefe115460dc761c0411d578ed5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Author: Changsu Im &amp;lt;imcxsu@gmail.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Date:   Wed Dec &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; 23:51:01 &lt;span style=&#34;color:#f60&#34;&gt;2021&lt;/span&gt; +0900
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;순서뿐 아니라 시간도 사용할 수 있다. 어제 날짜의 &lt;code&gt;master&lt;/code&gt; 브랜치를 보고 싶으면 아래와 같이 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git show main@{1.minute.ago}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git show main@{1.hour.ago}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git show main@{1.day.ago}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git show main@{yesterday}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git show main@{1.week.ago}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git show main@{1.month.ago}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git show main@{1.year.ago}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git show main@{2021-12-02.23:00:00}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;commit c23bcca5542f7eefa939dc47e3f843bb3b5b70f6 (HEAD -&amp;gt; main, origin/main, origin/HEAD)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Author: Changsu Im &amp;lt;imcxsu@gmail.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Date:   Thu Dec &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; 21:27:17 &lt;span style=&#34;color:#f60&#34;&gt;2021&lt;/span&gt; +0900
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 명령은 특정 시간에 &lt;code&gt;main&lt;/code&gt; 브랜치가 가리키고 있던 것이 무엇인지 보여준다.
reflog에 남아있을 때만 조회할 수 있기 때문에 너무 오래된 커밋은 조회할 수 없다.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;tilde&lt;/th&gt;
          &lt;th&gt;caret&lt;/th&gt;
          &lt;th&gt;at-sign (reflog)&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;HEAD&lt;/td&gt;
          &lt;td&gt;HEAD~0&lt;/td&gt;
          &lt;td&gt;HEAD@{0}&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;HEAD^&lt;/td&gt;
          &lt;td&gt;HEAD~1&lt;/td&gt;
          &lt;td&gt;HEAD@{1}&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;HEAD^^&lt;/td&gt;
          &lt;td&gt;HEAD~2&lt;/td&gt;
          &lt;td&gt;HEAD@{4}&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;diff&#34;&gt;diff&lt;/h2&gt;
&lt;p&gt;변경 사항을 비교한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git diff &amp;lt;before&amp;gt; &amp;lt;after&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 마지막 커밋과 그 전 커밋을 비교한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git diff HEAD~1 HEAD~0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 현재 수정된 파일 내용(local)을 마지막 커밋 내용과 비교한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git diff HEAD^
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 직전 커밋과 비교해서 변경 사항을 확인한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git diff &amp;lt;commit&amp;gt;~ &amp;lt;commit&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;push&#34;&gt;push&lt;/h2&gt;
&lt;p&gt;local 저장소의 내용을 remote 저장소에 반영한다.
히스토리가 일치하지 않으면 push할 수 없다.
rebase 등의 동작으로 히스토리가 변경되었다면 강제 푸시(force push)를 시도해 볼 수 있다.
다만 동료와 같이 작업 중인 브랜치라면 강제 푸시는 주의해서 사용해야 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# origin 저장소의 main 브랜치로 push&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git push origin main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 현재 HEAD와 같은 브랜치로 push&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git push origin HEAD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 현재 브랜치의 upstream 브랜치 지정 및 push&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git push --set-upstream origin feature/test-upstream
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;push 명령을 실행하면 다음 과정을 수행한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;현재 브랜치를 확인한다.&lt;/li&gt;
&lt;li&gt;설정 파일에 기본 원격 저장소가 존재하는지 탐색한다.&lt;/li&gt;
&lt;li&gt;알고 있는 원격 저장소 URL과 추적 중인 heads(브랜치)를 가져온다.&lt;/li&gt;
&lt;li&gt;원격지의 변화가 생긴 마지막 시간 이후에 변경된 내용이 있는지 확인한다.
&lt;ol&gt;
&lt;li&gt;원격 저장소로부터 reference 목록을 가져온다(&lt;code&gt;git ls-remote&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;로컬 저장소와 원격 저장소의 커밋 이력(history)을 확인한다. 만약 다르다면 fetch 혹은 pull을 수행한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;remote 저장소에 동명의 브랜치가 없다면 아래와 같은 문구를 볼 수 있는데 저장소 이름과 브랜치 이름을 명시적으로 입력하면 push할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git push
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fatal: The upstream branch of your current branch does not match
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;the name of your current branch.  To push to the upstream branch
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on the remote, use
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    git push origin HEAD:main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;To push to the branch of the same name on the remote, use
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    git push origin HEAD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;To choose either option permanently, see push.default in &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;git help config&amp;#39;&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git push origin branch-name
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;플러밍plumbing-명령어&#34;&gt;플러밍(Plumbing) 명령어&lt;/h1&gt;
&lt;h2 id=&#34;rev-parse&#34;&gt;rev-parse&lt;/h2&gt;
&lt;p&gt;Git 데이터베이스에 있는 Object의 체크섬을 조회한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git log --oneline -n &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2fe25f7 (HEAD -&amp;gt; feature) commit-msg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git rev-parse feature
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2fe25f72fca431a3b1aabb863b3ca6e04ddccb77
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;hash-object&#34;&gt;hash-object&lt;/h2&gt;
&lt;p&gt;데이터를 &lt;code&gt;.git&lt;/code&gt; 디렉토리에 저장하고 체크섬을 계산한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git hash-object -w READM.me
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;76e579ae4c9106f3b62fb9203ec5b49d8014d87c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ls-tree&#34;&gt;ls-tree&lt;/h2&gt;
&lt;p&gt;tree 객체의 내용들을 보여준다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# commit hash: ee85974962b9645d757bc71dd773effb67d3594f&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git ls-tree ee85
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;100644&lt;/span&gt; blob 396865b39e3f04c5ca6369999fd886dbae7441d0  .gitignore
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;040000&lt;/span&gt; tree 03ad58223967ba0494385bf1a1f9dc45783b860d  WebContent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;040000&lt;/span&gt; tree 4aefa5dd5e1e60eb883c4ba84d2a68a577692eb0  __test__
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;100644&lt;/span&gt; blob a823b374191cec985963bb821803a78a13ff89f2  jest.config.json
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;100644&lt;/span&gt; blob f496d9afc494b5312dd6efd73f43b5b5e40e5e63  pom.xml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;040000&lt;/span&gt; tree 59885985da5d1acf846d516fd9722daa1b2a4dd6  src
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ls-files&#34;&gt;ls-files&lt;/h2&gt;
&lt;p&gt;index(스테이징된 파일)의 내용들을 체크섬과 함께 보여준다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git ls-files -s                                                                                           ✭ ✱
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;100644&lt;/span&gt; 396865b39e3f04c5ca6369999fd886dbae7441d0 &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; .gitignore
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;100644&lt;/span&gt; dcdb07b5dfb81d995509aecad3bf202ee3a1d690 &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; __test__/price.test.js
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;100644&lt;/span&gt; a823b374191cec985963bb821803a78a13ff89f2 &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; jest.config.json
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;100644&lt;/span&gt; f496d9afc494b5312dd6efd73f43b5b5e40e5e63 &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; pom.xml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;100644&lt;/span&gt; e148a4810619ea951091909d82ef0955fe3e0e8f &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; src/main/resources-dev/logback.xml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 모든 파일 출력&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cat-file&#34;&gt;cat-file&lt;/h2&gt;
&lt;p&gt;저장소에 저장된 객체의 내용, 타입, 사이즈 정보를 확인할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 해당 체크섬을 가진 객체의 타입을 알려준다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git cat-file -t &amp;lt;checksum&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;blob
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 해당 체크섬을 가진 객체의 사이즈를 알려준다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git cat-file -s &amp;lt;checksum&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#0f0&#34;&gt;# bytes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 객체의 타입을 알고 있다면 파일의 내용을 표시해준다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git cat-file &amp;lt;type&amp;gt; &amp;lt;checksum&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;이것은 내용입니다.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;write-tree&#34;&gt;write-tree&lt;/h2&gt;
&lt;p&gt;현재 index 내용으로 tree 객체를 생성하고 체크섬을 반환한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git write-tree
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;174592b10bb329e6f4664cbc03fd2c4869d12cdc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git ls-tree &lt;span style=&#34;color:#f60&#34;&gt;17459&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f60&#34;&gt;100644&lt;/span&gt; blob d474e1b4d626dbf09a9776c778e9f8691bc8b406  a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;commit-tree&#34;&gt;commit-tree&lt;/h2&gt;
&lt;p&gt;특정 tree 객체로 새로운 커밋을 만든다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git commit-tree HEAD^{tree} -p main -m &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;test commit&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d5fc19ea68a8556383d46a79177395b563a8a483
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git show d5fc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;commit d5fc19ea68a8556383d46a79177395b563a8a483
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Author: Changsu Im &amp;lt;imcxsu@gmail.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Date:   Sat Jan &lt;span style=&#34;color:#f60&#34;&gt;15&lt;/span&gt; 22:59:25 &lt;span style=&#34;color:#f60&#34;&gt;2022&lt;/span&gt; +0900
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git merge --ff-only d5fc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Updating 5fe0db6..d5fc19e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Fast-forward
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;read-tree&#34;&gt;read-tree&lt;/h2&gt;
&lt;p&gt;특정 tree 객체를 index에 포함시킨다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git read-tree HEAD^
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git status
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Changes to be committed:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git read-tree HEAD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git status
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nothing to commit, working tree clean
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;update-index&#34;&gt;update-index&lt;/h2&gt;
&lt;p&gt;woirking tree에서 기존 BLOB 또는 파일을 가져와 index를 업데이트합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;update-ref&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master 브랜치를 지정한 커밋 객체로 업데이트한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git update-ref refs/heads/master &lt;span style=&#34;color:#f60&#34;&gt;992379&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;symbolic-ref&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;또 다른 reference를 가리키도록 reference(일반적으로 HEAD)를 업데이트한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ls-remote&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;원격 저장소의 references를 나열한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git ls-remote
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;From .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2fe25f72fca431a3b1aabb863b3ca6e04ddccb77  HEAD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2fe25f72fca431a3b1aabb863b3ca6e04ddccb77  refs/heads/feature
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;106047f0f0c057c28417e790a4ac22aef2b8bcf2  refs/heads/master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;advanced&#34;&gt;Advanced&lt;/h1&gt;
&lt;h2 id=&#34;git-hooks&#34;&gt;Git Hooks&lt;/h2&gt;
&lt;p&gt;Git 저장소에서 특정 이벤트가 발생할 때마다 자동으로 실행되는 스크립트다.
스크립트들은 기본적으로 &lt;code&gt;.git/hooks/*&lt;/code&gt; 에 위치한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/git/hook-symlink-script.png&#34; alt=&#34;Maintaining a hook using a symlink to version-controlled script&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/git-hooks&#34;&gt;Maintaining a hook using a symlink to version-controlled script&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;예를 들어, 아래와 같은 &lt;code&gt;pre-push&lt;/code&gt; hook은 &lt;code&gt;git push&lt;/code&gt; 명령어를 실행시켰을 때 &lt;code&gt;push&lt;/code&gt; 가 실행되기 전 &lt;code&gt;gradle test&lt;/code&gt; 명령어가 먼저 실행된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 해당 스크립트의 실행 권한을 부여한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# chmod +x .githooks/pre-push&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# hooks 경로를 .githooks로 변경한다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# git config core.hookspath .githooks&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# `pre-push` hook은 `git push` 전 항상 실행되는 스크립트다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gradle test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;garbage-collection&#34;&gt;Garbage Collection&lt;/h2&gt;
&lt;h3 id=&#34;packfiles&#34;&gt;Packfiles&lt;/h3&gt;
&lt;p&gt;Git이 처음 객체를 저장하는 형식은 loose objects라고 부른다.
여러 개의 loose objects를 Packfile(&lt;code&gt;./git/objects/pack/*&lt;/code&gt;)이라 불리는 단일 바이너리 내에 압축(pack)한다.
&lt;code&gt;git gc&lt;/code&gt; 명령을 실행하면 &lt;code&gt;git repack&lt;/code&gt;을 실행하고 &lt;code&gt;git pack-objects&lt;/code&gt; 명령을 실행한다.
&lt;a href=&#34;https://git-scm.com/docs/git-pack-objects&#34;&gt;pack-objects 명령&lt;/a&gt;은 default로
zlib을 사용해서 packfile(&lt;code&gt;.pack&lt;/code&gt;)과 pack의 index 파일(&lt;code&gt;.idx&lt;/code&gt;)을 생성한다.
packfile은 객체들을 효율적으로 주고받고, 빠르게 읽기 위해 사용한다.
packfile은 다른 객체들과 다르게 clone, fetch, push, pull만 지원한다.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;구현 측면&lt;/th&gt;
          &lt;th&gt;프로세스 호출&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Server&lt;/td&gt;
          &lt;td&gt;Upload-pack&lt;/td&gt;
          &lt;td&gt;git fetch-pack에 의해 호출되며, 다른 측면에 없는 객체를 확인해 압축한 후 전송한다.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Client&lt;/td&gt;
          &lt;td&gt;Fetch-pack&lt;/td&gt;
          &lt;td&gt;다른 저장소로부터 소실된 패키지를 능동적으로 받는다. 이 명령은 일반적으로 최종 사용자에 의해 호출되지 않고 이 명령을 상위 수준으로 감싼 git fetch가 실행된다.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Server&lt;/td&gt;
          &lt;td&gt;Receive-pack&lt;/td&gt;
          &lt;td&gt;git send-pack에 의해 호출되며, 저장소 안에 push된 것들을 받는다.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Client&lt;/td&gt;
          &lt;td&gt;Send-pack&lt;/td&gt;
          &lt;td&gt;다른 저장소에 대해 git 프로토콜을 이용해 객체들을 push한다. 이 명령은 일반적으로 최종 사용자에 의해 직접 호출되지 않고, 이 명령을 상위 수준으로 감싼 git push가 대신 실행된다.&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Packfile을 열어 압축한 내용을 확인해볼 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git verify-pack -v .git/objects/pack/pack-3c3fc80c28fbf38af5ca843ae8b714d22c06bdab.idx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.git/objects/pack/pack-3c3fc80c28fbf38af5ca843ae8b714d22c06bdab.pack: ok
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gc&#34;&gt;gc&lt;/h3&gt;
&lt;p&gt;Garbage Collection을 실행한다.
Git에서 말하는 garbage는 접근할 수 없는 객체(orphan)다.
예를 들어 orphan 브랜치, 어떤 커밋에도 추가되지 않은 dangling 객체, 어떤 커밋도 가리키지 않고 압축되지 않은 blob 객체 등이다.
&lt;code&gt;git prune&lt;/code&gt;, &lt;code&gt;git repack&lt;/code&gt;, &lt;code&gt;git pack&lt;/code&gt;, &lt;code&gt;git rerere&lt;/code&gt; 등 다른 내부 하위 명령어를 같이 실행한다.
&lt;code&gt;git gc&lt;/code&gt; 명령으로도 실행할 수 있지만 push, pull, merge, rebase, commit 명령에서 자동으로 실행된다.&lt;/p&gt;
&lt;p&gt;Garbage Collection을 실행하기 전에는 reset한 객체들을 복구할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# touch test and git add&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git commit -m &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[master (root-commit) fd5e183] test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# touch test2 and git add&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git commit -m &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;test2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[master (root-commit) 291b5c6] test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git log --oneline
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;291b5c6 (HEAD -&amp;gt; master) test2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fd5e183 test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git reset --hard HEAD^
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HEAD is now at fd5e183 test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git gc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git fsck --lost-found
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Checking object directories: 100% (256/256), &lt;span style=&#34;color:#f00&#34;&gt;done&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dangling commit 291b5c685acc9647ecf4330ec261d945078ac4d4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git merge 291b5c6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Updating fd5e183..291b5c6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Fast-forward
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; test2 | &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; file changed, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; insertions(+), &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; deletions(-)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; create mode &lt;span style=&#34;color:#f60&#34;&gt;100644&lt;/span&gt; test2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git log --oneline
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;291b5c6 (HEAD -&amp;gt; master) test2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fd5e183 test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;orphan 브랜치를 직접 만들어보자&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ touch test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git commit -m &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[master (root-commit) c2864f0] test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git switch --orphan empty
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Switched to a new branch &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;empty&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git log
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fatal: your current branch &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;empty&amp;#39;&lt;/span&gt; does not have any commits yet
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git log --oneline --all
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c2864f0 (master) test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# git rm --cached -r .&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# git clean -f&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git commit --allow-empty -m &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;empty commit&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[empty (root-commit) 02116ce] empty commit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;prune&#34;&gt;prune&lt;/h2&gt;
&lt;p&gt;연결할 수 없는 orphan 객체를 제거한다.
일반적으로 직접 실행되지 않고 &lt;code&gt;gc&lt;/code&gt;의 하위 명령으로 gc의 기준에 따라 사용된다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fsck&lt;/code&gt; 명령으로 dangling 객체를 확인할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git fsck
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Checking object directories: 100% (256/256), &lt;span style=&#34;color:#f00&#34;&gt;done&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Checking objects: 100% (573/573), &lt;span style=&#34;color:#f00&#34;&gt;done&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dangling blob c319a9963957cb51e3cb692ac44a4831ea529992
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dangling blob 4a8aaf3e4ce1c7e8da2764f8b6253a3029664d92
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dangling blob 091349d97a6ecaeea819fac9fcb3f9d515c87a99
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dangling blob 524b1128ed15bfb42eb1b71f93b3fd0fa77adab6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dangling blob 879b261622ca54bd28f8fa2be6330fe9ebfba814
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dangling blob 7f3ced9d3dad92439949d98ad2d92125be07764c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dangling blob bcfc949b6572079aa54db963abc59b48232813ed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dangling blob f16c37ff355844ac388d101e5bba46e698a4deb8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dangling blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dangling blob f4d5466af82d891b81ad792b0e74e2341e46312f
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dangling blob 0a56b32d98fea47ca5228e3b62ee1fc189408796
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dangling blob 0e062ca2a9130d0bfb9ffcf29a0a43d6f1b65957
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dangling blob 5ca654e778f2cceb0207dc9311c8961107caa17e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dangling blob 002f663c650d708e29d75524630bc5cf97403039
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;--dry-run&lt;/code&gt; 옵션을 사용하면 실제로 객체를 지우지 않고 어떤 것이 지워지는지 보여주기만 한다.
확인해보면 위의 dangling blob 객체들이라는 것을 알 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git prune --dry-run --verbose
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;002f663c650d708e29d75524630bc5cf97403039 blob
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;091349d97a6ecaeea819fac9fcb3f9d515c87a99 blob
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0a56b32d98fea47ca5228e3b62ee1fc189408796 blob
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0e062ca2a9130d0bfb9ffcf29a0a43d6f1b65957 blob
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4a8aaf3e4ce1c7e8da2764f8b6253a3029664d92 blob
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;524b1128ed15bfb42eb1b71f93b3fd0fa77adab6 blob
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5ca654e778f2cceb0207dc9311c8961107caa17e blob
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;7f3ced9d3dad92439949d98ad2d92125be07764c blob
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;879b261622ca54bd28f8fa2be6330fe9ebfba814 blob
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bcfc949b6572079aa54db963abc59b48232813ed blob
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c319a9963957cb51e3cb692ac44a4831ea529992 blob
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 blob
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f16c37ff355844ac388d101e5bba46e698a4deb8 blob
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f4d5466af82d891b81ad792b0e74e2341e46312f blob
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;GIT_TRACE=true&lt;/code&gt; 환경 변수와 함께 &lt;code&gt;gc&lt;/code&gt;를 실행하면 &lt;code&gt;prune&lt;/code&gt; 명령이 실행된다는 것을 알 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#eedd82&#34;&gt;GIT_TRACE&lt;/span&gt;=true git gc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21:48:42.368350 git.c:439               trace: built-in: git gc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21:48:42.368555 run-command.c:663       trace: run_command: git pack-refs --all --prune
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21:48:42.369748 git.c:439               trace: built-in: git pack-refs --all --prune
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21:48:42.376790 run-command.c:663       trace: run_command: git reflog expire --all
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21:48:42.377979 git.c:439               trace: built-in: git reflog expire --all
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21:48:42.383220 run-command.c:663       trace: run_command: git repack -d -l -A --unpack-unreachable=2.weeks.ago
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21:48:42.384183 git.c:439               trace: built-in: git repack -d -l -A --unpack-unreachable=2.weeks.ago
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21:48:42.384316 run-command.c:663       trace: run_command: &lt;span style=&#34;color:#eedd82&#34;&gt;GIT_REF_PARANOIA&lt;/span&gt;=&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; git pack-objects --local --delta-base-offset .git/objects/pack/.tmp-57526-pack --keep-true-parents --honor-pack-keep --non-empty --all --reflog --indexed-objects --unpack-unreachable=2.weeks.ago
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21:48:42.385307 git.c:439               trace: built-in: git pack-objects --local --delta-base-offset .git/objects/pack/.tmp-57526-pack --keep-true-parents --honor-pack-keep --non-empty --all --reflog --indexed-objects --unpack-unreachable=2.weeks.ago
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Enumerating objects: 573, &lt;span style=&#34;color:#f00&#34;&gt;done&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Counting objects: 100% (573/573), &lt;span style=&#34;color:#f00&#34;&gt;done&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Delta compression using up to &lt;span style=&#34;color:#f60&#34;&gt;12&lt;/span&gt; threads
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Compressing objects: 100% (256/256), &lt;span style=&#34;color:#f00&#34;&gt;done&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Writing objects: 100% (573/573), &lt;span style=&#34;color:#f00&#34;&gt;done&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Total &lt;span style=&#34;color:#f60&#34;&gt;573&lt;/span&gt; (delta 133), reused &lt;span style=&#34;color:#f60&#34;&gt;573&lt;/span&gt; (delta 133)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21:48:42.402885 run-command.c:663       trace: run_command: git prune --expire 2.weeks.ago
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21:48:42.403766 git.c:439               trace: built-in: git prune --expire 2.weeks.ago
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21:48:42.407108 run-command.c:663       trace: run_command: git worktree prune --expire 3.months.ago
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21:48:42.408258 git.c:439               trace: built-in: git worktree prune --expire 3.months.ago
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21:48:42.408495 run-command.c:663       trace: run_command: git rerere gc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21:48:42.409708 git.c:439               trace: built-in: git rerere gc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;git-server&#34;&gt;Git Server&lt;/h1&gt;
&lt;h2 id=&#34;fork&#34;&gt;Fork&lt;/h2&gt;
&lt;p&gt;Fork는 서버에 저장소의 복사본을 만든다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/git/fork-repository.svg&#34; alt=&#34;fork-repository&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://coderefinery.github.io/git-collaborative/03-distributed/&#34;&gt;Distributed version control and forking workflow&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fork를 사용하면 upstream 리포지토리에 영향을 주지 않고 마음대로 변경할 수 있다.
&lt;ul&gt;
&lt;li&gt;fork 리포지토리에서 &lt;code&gt;push --force&lt;/code&gt;를 하든 말든 상관없다.&lt;/li&gt;
&lt;li&gt;remote-local 리포지토리를 좀 더 적극적으로 관리할 수 있다.&lt;/li&gt;
&lt;li&gt;공유지의 비극을 피할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;upstream 리포지토리의 메인테이너를 제한할 수 있다.&lt;/li&gt;
&lt;li&gt;upstream 리포지토리의 안 쓰는 브랜치들을 따로 정리할 필요가 없다.&lt;/li&gt;
&lt;li&gt;진정한 의미의 DVCS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;branch-protection-rules&#34;&gt;Branch protection rules&lt;/h2&gt;
&lt;p&gt;Pull Request를 통해서만 소스를 통합할 수 있도록 제약 사항을 설정했을 경우 혹은 원격 브랜치에 force push 할 수 있는 권한이 없을 경우 아래와 같은 메시지를 마주할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git --no-optional-locks -c color.branch=false -c color.diff=false -c color.status=false -c diff.mnemonicprefix=false -c core.quotepath=false -c credential.helper=sourcetree push -v --tags origin refs/heads/develop:refs/heads/develop
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Pushing to https://bitbucket.markruler.com/scm/mark/test-pr.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;POST git-receive-pack (&lt;span style=&#34;color:#f60&#34;&gt;990&lt;/span&gt; bytes)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:                             *%%%%%.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:                         %%%         %%%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:                      ,%#               %%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:                     %%                   %%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:                    %#                     %%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:                   %%                       %
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:                   %(                       %%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:                   %%%%%%%%%%%%%%%%%%%%%%%%%%%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:                 %#%*%#///////%# %%///////%%%%%%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:                ,% %*%%******%#   %%******%(%%,%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:                  %%/ %%/**%%/%%%%%%%(**#%( %%#
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:                   %%          %%%          %(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:                    %                      .%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:                    *%        %%%%%       .%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:                      %#                 %%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:                       .%%            .%%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:                       .%%.%%,     %%%.%%/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:                 %%%%%%##%.  &lt;span style=&#34;color:#0f0&#34;&gt;#%%%%%.  .%((%%%%%%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:             %%#(((((((((%%,         &lt;span style=&#34;color:#0f0&#34;&gt;#%%(((((((((#%%.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:       %%%((((((((((((((((((%%%, .%%%((((((((((((((((((&lt;span style=&#34;color:#0f0&#34;&gt;#%%*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:     %%(((((((((((((((((((((((((%(((((((((((((((((((((((((&lt;span style=&#34;color:#0f0&#34;&gt;#%.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:   ,%(((((((((((((((((((((((((((((((((((((((((((((((((((((((%#
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:   %#((((((((((((((((((((((((((((((((((((((((((((((((((((((((%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:   %%%%%%%%%%%%%(((((((((((((((((((((((((((((((((%%%%%%%%%%%%%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:  %%            %####((((((&lt;span style=&#34;color:#0f0&#34;&gt;###%%%%%%%%#(((((((((%            ,%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote: ,%             %%%%%%#.               %%%((((((%*            %%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote: &lt;span style=&#34;color:#0f0&#34;&gt;#%                                       %%%#                %%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote: .%                             .%%%%%%%%%                    %#
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:  %                         &lt;span style=&#34;color:#0f0&#34;&gt;#%%%                              %&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:  %                     %%%%                                  %*
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote: /%************/#%%%%%%######%%*                        ..,*/(%%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:               %%######(((((((&lt;span style=&#34;color:#0f0&#34;&gt;##################%%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:               %%######(((((((((((((((((((((((((%%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote: //////////////%%%%%%%%#########################%%/////////  ///
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote: ----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote: Branch refs/heads/develop can only be modified through pull requests.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote: Check your branch permissions configuration with the project administrator.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote: ----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;To https://bitbucket.markruler.com/scm/mark/test-pr.git ! [remote rejected] develop -&amp;gt; develop (pre-receive hook declined)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;error: failed to push some refs to &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;https://bitbucket.markruler.com/scm/mark/test-pr.git&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Completed with errors, see above
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;참고&#34;&gt;참고&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Books
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2&#34;&gt;Pro Git&lt;/a&gt; (2/e) - Scott Chacon, Ben Straub&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials&#34;&gt;Git Tutorials&lt;/a&gt; - Atlassian&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/git-guides/&#34;&gt;Git Guide&lt;/a&gt; - GitHub&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ISBN=9788960775473&#34;&gt;Git을 이용한 버전 관리&lt;/a&gt; - 라비산카 소마순다람&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Git Internal
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://markruler.github.io/posts/shell/cs-visualized-useful-git-commands/&#34;&gt;CS Visualized: 유용한 깃(Git) 명령어&lt;/a&gt; - Lydia Hallie&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.udemy.com/course/git-and-github-complete-guide/&#34;&gt;The Complete Git Guide: Understand and master Git and GitHub&lt;/a&gt; - Bogdan Stashchuk&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/swimm/a-visualized-intro-to-git-internals-objects-and-branches-68df85864037&#34;&gt;A Visualized Intro to Git Internals — Objects and Branches&lt;/a&gt; - Omer Rosenbaum&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/swimm/getting-hardcore-creating-a-repo-from-scratch-cc747edbb11c&#34;&gt;Getting Hardcore — Creating a Repo From Scratch&lt;/a&gt; - Omer Rosenbaum&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://swimm.io/blog/a-hands-on-intro-to-git-internals-creating-a-repo-from-scratch/&#34;&gt;A Hands-On Intro to Git Internals: Creating a Repo From Scratch&lt;/a&gt; - swimm&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/hash-function-transition/&#34;&gt;Hash Function&lt;/a&gt; - git-scm&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/ko/v2/Git%EC%9D%98-%EB%82%B4%EB%B6%80-Git-%EA%B0%9C%EC%B2%B4&#34;&gt;objects&lt;/a&gt; - git-scm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;refs
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/gitrevisions&#34;&gt;gitrevisions&lt;/a&gt; - git-scm&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/refs-and-the-reflog&#34;&gt;Refs and the Reflog&lt;/a&gt; - Atlassian&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;index
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.blog/2021-11-10-make-your-monorepo-feel-small-with-gits-sparse-index/&#34;&gt;Make your monorepo feel small with Git&amp;rsquo;s sparse index&lt;/a&gt; - Derrick Stolee&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mincong.io/2018/04/28/git-index/&#34;&gt;Git: Understanding the Index File&lt;/a&gt; - Mincong Huang&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shafiul.github.io//gitbook/7_the_git_index.html&#34;&gt;The Git Index&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;config
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/git-config&#34;&gt;git-scm&lt;/a&gt; - git-scm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tag
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/ko/v2/Git%EC%9D%98-%EA%B8%B0%EC%B4%88-%ED%83%9C%EA%B7%B8&#34;&gt;tag&lt;/a&gt; - git-scm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Commands
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/git/git/blob/90d242d36e248acfae0033274b524bfa55a947fd/git.c#L487&#34;&gt;struct cmd_struct commands[]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;submodule &amp;amp; subtree
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/git-submodule&#34;&gt;submodule&lt;/a&gt; - Atlassian&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/git-subtree&#34;&gt;subtree&lt;/a&gt; - Atlassian&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-%EC%84%9C%EB%B8%8C%EB%AA%A8%EB%93%88&#34;&gt;git-submodule&lt;/a&gt; - git-scm&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/git-subtree&#34;&gt;Git subtree: the alternative to Git submodule&lt;/a&gt; - Atlassian&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codingkilledthecat.wordpress.com/2012/04/28/why-your-company-shouldnt-use-git-submodules/&#34;&gt;Why your company shouldn&amp;rsquo;t use Git submodules&lt;/a&gt; - Amber&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://openclassrooms.com/en/courses/5671626-manage-your-code-project-with-git-github/6152286-use-subtrees-and-submodules-to-add-a-public-repo-to-your-project&#34;&gt;Use subtrees and submodules to add a public repo to your project&lt;/a&gt; - OpenClassrooms&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.developer.atlassian.com/the-power-of-git-subtree/&#34;&gt;The power of Git subtree&lt;/a&gt; - Atlassian&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.rhostem.com/posts/2020-01-03-code-sharing-with-git-subtree&#34;&gt;Git subtree를 활용한 코드 공유&lt;/a&gt; - rhostem&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.three-snakes.com/git/git-subtree&#34;&gt;Subtree 사용법&lt;/a&gt; - ThreeSnakes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://homoefficio.github.io/2015/07/18/git-subtree/&#34;&gt;git subtree - 프로젝트 안의 또 다른 프로젝트&lt;/a&gt; - HomoEfficio&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;status
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/git/git/blob/90d242d36e248acfae0033274b524bfa55a947fd/builtin/commit.c#L1475&#34;&gt;int cmd_status(int argc, const char **argv, const char *prefix)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/git/git/blob/master/wt-status.c#L807&#34;&gt;wt_status_collect(struct wt_status *s)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kwoncheol.me/posts/git-rename-inference&#34;&gt;git은 폴더경로가 변경된 것을 어떻게 알 수 있을까?&lt;/a&gt; - kwoncheol&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fetch
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/git-fetch&#34;&gt;git-fetch&lt;/a&gt; - git-scm&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/syncing/git-fetch&#34;&gt;git fetch&lt;/a&gt; - Atlassian&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;add
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/git/git/blob/90d242d36e248acfae0033274b524bfa55a947fd/builtin/add.c#L491&#34;&gt;int cmd_add(int argc, const char **argv, const char *prefix)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;merge
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging&#34;&gt;Basic Branching and Merging&lt;/a&gt; - git-scm&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/J0W-WA0aYJI&#34;&gt;3 way merge - 지옥에서 온 Git&lt;/a&gt; - 생활코딩&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.plasticscm.com/2016/02/three-way-merging-look-under-hood.html&#34;&gt;Three-way merging: A look under the hood&lt;/a&gt; - Plastic SCM&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.npcode.com/2012/09/29/3-way-merge-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%97%90-%EB%8C%80%ED%95%B4/&#34;&gt;3-way merge 알고리즘에 대해&lt;/a&gt; - 이응준&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;rebase
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Branching-Rebasing&#34;&gt;Rebasing&lt;/a&gt; - git-scm&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/merging-vs-rebasing&#34;&gt;Merging vs. Rebasing&lt;/a&gt; - Atlassian&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;stash
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/saving-changes/git-stash#how-git-stash-works&#34;&gt;git stash&lt;/a&gt; - Atlassian&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/git/git/blob/90d242d36e248acfae0033274b524bfa55a947fd/builtin/stash.c#L1769&#34;&gt;int cmd_stash(int argc, const char **argv, const char *prefix)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/git/git/blob/90d242d36e248acfae0033274b524bfa55a947fd/builtin/stash.c#L1082&#34;&gt;static int check_changes(const struct pathspec *ps, int include_untracked, struct strbuf *untracked_files)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;reset
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things&#34;&gt;Undoing Things&lt;/a&gt; - git-scm&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting&#34;&gt;Resetting, Checking Out &amp;amp; Reverting&lt;/a&gt; - Atlassian&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-Git%EC%9C%BC%EB%A1%9C-%EB%B2%84%EA%B7%B8-%EC%B0%BE%EA%B8%B0&#34;&gt;Git으로 버그 찾기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;reflog
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/rewriting-history/git-reflog&#34;&gt;git reflog&lt;/a&gt; - Atlassian&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-%EB%A6%AC%EB%B9%84%EC%A0%84-%EC%A1%B0%ED%9A%8C%ED%95%98%EA%B8%B0#_git_reflog&#34;&gt;Revision Selection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;diff
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/saving-changes/git-diff&#34;&gt;Git diff&lt;/a&gt; - Atlassian&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/git-diff&#34;&gt;git-diff&lt;/a&gt; - git-scm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cherry-pick
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/cherry-pick&#34;&gt;Git Cherry Pick&lt;/a&gt; - Atlassian&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/git-cherry-pick&#34;&gt;git-cherry-pick&lt;/a&gt; - git-scm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;push
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/git-push&#34;&gt;git-push&lt;/a&gt; - git-scm&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/syncing/git-push&#34;&gt;git push&lt;/a&gt; - Atlassian&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hooks
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/git-hooks&#34;&gt;Git Hooks&lt;/a&gt; - Atlassian&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/githooks&#34;&gt;githooks&lt;/a&gt; - git-scm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;packfile
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Internals-Packfiles&#34;&gt;Packfiles&lt;/a&gt; - Pro Git&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://shafiul.github.io/gitbook/7_the_packfile.html&#34;&gt;The Packfile&lt;/a&gt; - Git Community Book&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;gc
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/git-gc&#34;&gt;git gc&lt;/a&gt; - Atlassian&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/git-prune&#34;&gt;git prune&lt;/a&gt; - Atlassian&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;orphan
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.lainyzine.com/ko/article/how-to-create-git-orphan-branch/&#34;&gt;Git 저장소에서 빈 고아 브랜치를 만드는 방법&lt;/a&gt; - LainyZine&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fork
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/comparing-workflows/forking-workflow&#34;&gt;Forking Workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/about-forks&#34;&gt;About forks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.outsider.ne.kr/865&#34;&gt;Github를 이용하는 전체 흐름 이해하기 #1&lt;/a&gt; - 아웃사이더&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://markruler.github.io/posts/shell/git-commands/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>Go 언어로 컨테이너 이미지 빌드하기</title>
        <link>https://markruler.github.io/posts/container/building-container-images-in-go/</link>
        <pubDate>Sun, 28 Feb 2021 12:49:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/container/building-container-images-in-go/</guid>
        <description>임창수 https://markruler.github.io/posts/container/building-container-images-in-go/ -&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Ahmet Alp Balkan의 &lt;a href=&#34;https://ahmet.im/blog/building-container-images-in-go/&#34;&gt;Building container images in Go&lt;/a&gt;를 번역한 글입니다.&lt;/li&gt;
&lt;li&gt;저자의 허락을 받고 번역했습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 글에서는 도커(Docker)를 사용하지 않고 어떻게 OCI 컨테이너 이미지를 만드는지 설명합니다.
이를 위해 &lt;a href=&#34;https://github.com/google/go-containerregistry&#34;&gt;go-containerregistry&lt;/a&gt; 모듈을 이용해
프로그래밍해서 레이어 및 이미지 매니페스트를 빌드합니다.
예를 들어 &lt;a href=&#34;https://hub.docker.com/_/nginx&#34;&gt;nginx&lt;/a&gt; 이미지 위에
정적 웹 사이트 콘텐츠를 추가하여 컨테이너 이미지를 빌드하고
Go 프로그램을 사용하는 &lt;a href=&#34;https://gcr.io&#34;&gt;&lt;code&gt;gcr.io&lt;/code&gt;&lt;/a&gt; 같은 레지스트리에 푸시하겠습니다.&lt;/p&gt;
&lt;p&gt;순서는 다음과 같습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;도커 허브에서 &lt;code&gt;nginx&lt;/code&gt; 이미지를 가져 옵니다(pull).&lt;/li&gt;
&lt;li&gt;기존 &lt;code&gt;/usr/share/nginx/html&lt;/code&gt; 디렉터리를 삭제하는 새 레이어를 만듭니다.&lt;/li&gt;
&lt;li&gt;정적 HTML 콘텐츠과 애셋으로 새 레이어를 만듭니다.&lt;/li&gt;
&lt;li&gt;이미지와 태그에 새 레이어를 추가합니다.&lt;/li&gt;
&lt;li&gt;새 이미지를 레지스트리로 푸시합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/ahmetb/430baa4e8bb0b0f78abb1c34934cd0b6&#34;&gt;이 gist&lt;/a&gt;에서
예제 코드를 찾을 수 있습니다.
그럼 자세히 살펴보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/google/go-containerregistry&#34;&gt;모듈&lt;/a&gt;을 다운로드합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go get -u github.com/google/go-containerregistry
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이미지 레퍼런스를 가져옵니다.
&lt;code&gt;crane.Pull&lt;/code&gt; 메서드는 &lt;code&gt;nginx&lt;/code&gt;라는 레퍼런스를 &lt;code&gt;index.docker.io/library/nginx:latest&lt;/code&gt;로 바꾼 다음
도커 허브에서 익명 자격 증명(anonymous credentials)을 처리합니다.
그리고 &lt;a href=&#34;https://pkg.go.dev/github.com/google/go-containerregistry/pkg/v1#Image&#34;&gt;v1.Image&lt;/a&gt;를 반환합니다.
(실제로는 &lt;a href=&#34;https://pkg.go.dev/github.com/google/go-containerregistry/pkg/v1/remote#Image&#34;&gt;remote.Image&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;img, err := crane.&lt;span style=&#34;color:#ff0&#34;&gt;Pull&lt;/span&gt;(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  panic(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이제 &lt;a href=&#34;https://github.com/opencontainers/image-spec/blob/v1.0.1/layer.md#whiteouts&#34;&gt;화이트아웃&lt;/a&gt; 파일&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;을
사용하여 nginx 이미지에 딸려 있는 &lt;code&gt;/usr/share/nginx/html&lt;/code&gt; 디렉터리를 제거하는 레이어를 생성하겠습니다.&lt;/p&gt;
&lt;p&gt;이를 위해 파일명 리스트와 인메모리 바이트 슬라이스로 타르볼(tarball)을 생성할 수 있는 헬퍼 메서드를 사용합니다.
해당 레이어에서 경로를 지우기 위해 tar 파일 내부에 &lt;code&gt;usr/share/nginx/.wh.html&lt;/code&gt;이라는 파일이 필요합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deleteMap := &lt;span style=&#34;color:#f00&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;][]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;usr/share/nginx/.wh.html&amp;#34;&lt;/span&gt;: []&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;{},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deleteLayer, err := crane.&lt;span style=&#34;color:#ff0&#34;&gt;Layer&lt;/span&gt;(deleteMap)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  panic(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이제 이 컨테이너 이미지에 추가할 정적 HTML 파일과 에셋이 포함된 디렉토리 트리를 스캔해야 합니다.
다시 &lt;code&gt;crane.Layer&lt;/code&gt; 메서드를 사용할 수 있지만, 그러려면 모든 파일을 메모리에 올려야 합니다.&lt;/p&gt;
&lt;p&gt;여기서는 &lt;code&gt;tar&lt;/code&gt; 명령어를 사용하여 타르볼을 생성하고 결과를 표준 출력(stdout)에 표시한 다음
&lt;a href=&#34;https://pkg.go.dev/github.com/google/go-containerregistry/pkg/v1/tarball#LayerFromReader&#34;&gt;tarball.FromReader&lt;/a&gt;로
전달할 수도 있습니다. 명령어는 다음과 같습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -cf- DIR &lt;span style=&#34;color:#87ceeb&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&lt;/span&gt;    --transform &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;s,^,usr/share/nginx/,&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    --owner=&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; --group=&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;또는 &lt;code&gt;tar.Writer&lt;/code&gt;를 사용하여 네이티브한 방식으로 타르볼을 빌드하고
이 &lt;a href=&#34;https://gist.github.com/ahmetb/430baa4e8bb0b0f78abb1c34934cd0b6&#34;&gt;gist&lt;/a&gt;처럼
인메모리 버퍼에 결과를 기록할 수 있습니다.
여기서는 &lt;code&gt;filepath.Walk&lt;/code&gt; 메서드를 사용하여 디렉터리 트리의 파일을 스캔하고
tar 아카이브에 디렉터리 및 파일 엔트리를 추가합니다.
간단하게 디렉터리와 일반 파일만 구현했습니다. (symlink 등은 독자에게 예제로 남김)
또한 파일 엔트리에 &lt;code&gt;usr/share/nginx/html&lt;/code&gt; 접두사를 추가합니다.&lt;/p&gt;
&lt;p&gt;그런 다음 이러한 레이어를 새 이미지에 추가합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;newImg, err := mutate.&lt;span style=&#34;color:#ff0&#34;&gt;AppendLayers&lt;/span&gt;(img, deleteLayer, addLayer)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  panic(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;또한 이미지의 진입점(entrypoint)과 전달 인자(arguments)를 변경할 수 있습니다.&lt;/p&gt;
&lt;p&gt;그런 다음 이미지에 태그를 지정합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tag, err := name.&lt;span style=&#34;color:#ff0&#34;&gt;NewTag&lt;/span&gt;(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;gcr.io/ahmetb-blog/blog:latest&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  panic(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 때 로컬 자격 증명 키 체인과 헬퍼를 사용하여 원격 레지스트리에 이미지를 푸시하거나
로컬 도커 데몬에 로드하여 다음을 테스트할 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// 로컬 테스트를 위해 로컬 도커 엔진에 로드합니다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; s, err := daemon.&lt;span style=&#34;color:#ff0&#34;&gt;Write&lt;/span&gt;(tag, newImg); err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  panic(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#f00&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fmt.&lt;span style=&#34;color:#ff0&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;pushed &amp;#34;&lt;/span&gt;+s)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// 원격 레지스트리에 푸시합니다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err := crane.&lt;span style=&#34;color:#ff0&#34;&gt;Push&lt;/span&gt;(newImg, tag.&lt;span style=&#34;color:#ff0&#34;&gt;String&lt;/span&gt;()); err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  panic(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#f00&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fmt.&lt;span style=&#34;color:#ff0&#34;&gt;Println&lt;/span&gt;(s)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기까지입니다.
이 글로 &lt;a href=&#34;https://github.com/google/go-containerregistry&#34;&gt;go-containerregistry&lt;/a&gt;가
무엇을 해 줄 수 있는지 생각해 볼 수 있는 좋은 연습이었기를 바랍니다.
이 모듈은 매니페스트 수정, 레이어 재배치, 이미지 단순화&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;를 수행하는
&lt;a href=&#34;https://pkg.go.dev/github.com/google/go-containerregistry/pkg/v1/mutate&#34;&gt;mutate&lt;/a&gt; 패키지처럼
훨씬 더 많은 기능을 가지고 있습니다.
(&lt;a href=&#34;https://github.com/google/ko&#34;&gt;ko&lt;/a&gt;,
&lt;a href=&#34;https://github.com/google/go-containerregistry/blob/main/cmd/crane/doc/crane.md&#34;&gt;crane&lt;/a&gt;과
같은 도구가 이 Go 모듈을 사용하여 만들어졌다는 것을 알고 계셨나요?)&lt;/p&gt;
&lt;p&gt;꼭 &lt;a href=&#34;https://github.com/google/go-containerregistry&#34;&gt;리포지터리&lt;/a&gt;를
별표(Star)하고 메인터이너의 트위터
(&lt;a href=&#34;https://twitter.com/jonjonsonjr&#34;&gt;@jonjohnsonjr&lt;/a&gt;,
&lt;a href=&#34;https://twitter.com/imjasonh&#34;&gt;@ImJasonH&lt;/a&gt;,
&lt;a href=&#34;https://twitter.com/mattomata&#34;&gt;@mattomata&lt;/a&gt;)를 팔로우해서 커뮤니티에 참여하세요.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;실행 결과 맛보기 (역자)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir create-oci-image
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd create-oci-image
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -O https://gist.githubusercontent.com/ahmetb/430baa4e8bb0b0f78abb1c34934cd0b6/raw/1431150eb52c2ecf81ea469ca685d4be3a30f895/demo.go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go mod init demo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# go: creating new go.mod: module demo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go get
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# go: finding module for package github.com/google/go-containerregistry/pkg/crane&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# go: finding module for package github.com/google/go-containerregistry/pkg/v1/tarball&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# go: finding module for package github.com/google/go-containerregistry/pkg/v1/mutate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# go: finding module for package github.com/google/go-containerregistry/pkg/v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# go: finding module for package github.com/google/go-containerregistry/pkg/v1/daemon&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# go: finding module for package github.com/google/go-containerregistry/pkg/name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# go: found github.com/google/go-containerregistry/pkg/crane in github.com/google/go-containerregistry v0.4.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# go: found github.com/google/go-containerregistry/pkg/name in github.com/google/go-containerregistry v0.4.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# go: found github.com/google/go-containerregistry/pkg/v1 in github.com/google/go-containerregistry v0.4.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# go: found github.com/google/go-containerregistry/pkg/v1/daemon in github.com/google/go-containerregistry v0.4.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# go: found github.com/google/go-containerregistry/pkg/v1/mutate in github.com/google/go-containerregistry v0.4.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# go: found github.com/google/go-containerregistry/pkg/v1/tarball in github.com/google/go-containerregistry v0.4.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo -i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker images
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go run demo.go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:294912,&amp;#34;total&amp;#34;:27095142},&amp;#34;progress&amp;#34;:&amp;#34;[\u003e                                                  ]  294.9kB/27.1MB&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;9eb82f04c782&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:7077888,&amp;#34;total&amp;#34;:27095142},&amp;#34;progress&amp;#34;:&amp;#34;[=============\u003e                                     ]  7.078MB/27.1MB&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;9eb82f04c782&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:13860864,&amp;#34;total&amp;#34;:27095142},&amp;#34;progress&amp;#34;:&amp;#34;[=========================\u003e                         ]  13.86MB/27.1MB&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;9eb82f04c782&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:19759104,&amp;#34;total&amp;#34;:27095142},&amp;#34;progress&amp;#34;:&amp;#34;[====================================\u003e              ]  19.76MB/27.1MB&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;9eb82f04c782&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:25067520,&amp;#34;total&amp;#34;:27095142},&amp;#34;progress&amp;#34;:&amp;#34;[==============================================\u003e    ]  25.07MB/27.1MB&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;9eb82f04c782&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:26247168,&amp;#34;total&amp;#34;:27095142},&amp;#34;progress&amp;#34;:&amp;#34;[================================================\u003e  ]  26.25MB/27.1MB&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;9eb82f04c782&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:27095142,&amp;#34;total&amp;#34;:27095142},&amp;#34;progress&amp;#34;:&amp;#34;[==================================================\u003e]   27.1MB/27.1MB&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;9eb82f04c782&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:294912,&amp;#34;total&amp;#34;:26566376},&amp;#34;progress&amp;#34;:&amp;#34;[\u003e                                                  ]  294.9kB/26.57MB&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;ffd3d6313c9b&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:8847360,&amp;#34;total&amp;#34;:26566376},&amp;#34;progress&amp;#34;:&amp;#34;[================\u003e                                  ]  8.847MB/26.57MB&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;ffd3d6313c9b&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:16809984,&amp;#34;total&amp;#34;:26566376},&amp;#34;progress&amp;#34;:&amp;#34;[===============================\u003e                   ]  16.81MB/26.57MB&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;ffd3d6313c9b&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:24477696,&amp;#34;total&amp;#34;:26566376},&amp;#34;progress&amp;#34;:&amp;#34;[==============================================\u003e    ]  24.48MB/26.57MB&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;ffd3d6313c9b&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:26566376,&amp;#34;total&amp;#34;:26566376},&amp;#34;progress&amp;#34;:&amp;#34;[==================================================\u003e]  26.57MB/26.57MB&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;ffd3d6313c9b&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:599,&amp;#34;total&amp;#34;:599},&amp;#34;progress&amp;#34;:&amp;#34;[==================================================\u003e]     599B/599B&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;9b23c8e1e6f9&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:599,&amp;#34;total&amp;#34;:599},&amp;#34;progress&amp;#34;:&amp;#34;[==================================================\u003e]     599B/599B&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;9b23c8e1e6f9&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:894,&amp;#34;total&amp;#34;:894},&amp;#34;progress&amp;#34;:&amp;#34;[==================================================\u003e]     894B/894B&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;0f804d36244d&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:894,&amp;#34;total&amp;#34;:894},&amp;#34;progress&amp;#34;:&amp;#34;[==================================================\u003e]     894B/894B&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;0f804d36244d&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:666,&amp;#34;total&amp;#34;:666},&amp;#34;progress&amp;#34;:&amp;#34;[==================================================\u003e]     666B/666B&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;9f65d1d4c869&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:666,&amp;#34;total&amp;#34;:666},&amp;#34;progress&amp;#34;:&amp;#34;[==================================================\u003e]     666B/666B&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;9f65d1d4c869&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:1411,&amp;#34;total&amp;#34;:1411},&amp;#34;progress&amp;#34;:&amp;#34;[==================================================\u003e]  1.411kB/1.411kB&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;2acf82036f38&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:1411,&amp;#34;total&amp;#34;:1411},&amp;#34;progress&amp;#34;:&amp;#34;[==================================================\u003e]  1.411kB/1.411kB&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;2acf82036f38&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:110,&amp;#34;total&amp;#34;:110},&amp;#34;progress&amp;#34;:&amp;#34;[==================================================\u003e]     110B/110B&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;c99fc288b954&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:110,&amp;#34;total&amp;#34;:110},&amp;#34;progress&amp;#34;:&amp;#34;[==================================================\u003e]     110B/110B&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;c99fc288b954&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:39,&amp;#34;total&amp;#34;:39},&amp;#34;progress&amp;#34;:&amp;#34;[==================================================\u003e]      39B/39B&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;5f70bf18a086&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;status&amp;#34;:&amp;#34;Loading layer&amp;#34;,&amp;#34;progressDetail&amp;#34;:{&amp;#34;current&amp;#34;:39,&amp;#34;total&amp;#34;:39},&amp;#34;progress&amp;#34;:&amp;#34;[==================================================\u003e]      39B/39B&amp;#34;,&amp;#34;id&amp;#34;:&amp;#34;5f70bf18a086&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# {&amp;#34;stream&amp;#34;:&amp;#34;Loaded image: nginx:foo\n&amp;#34;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker images
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# nginx               foo                 176899f2ab5f        10 days ago         133MB&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;화이트아웃 파일(whiteout file)은 경로를 삭제해야 함을 나타내는 특별한 파일명을 가진 빈(empty) 파일입니다.
화이트아웃 파일명은 &lt;code&gt;.wh.&lt;/code&gt; 접두사와 삭제할 경로로 구성됩니다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;code&gt;docker history&lt;/code&gt; 명령어를 사용하면 도커 이미지의 히스토리(이전 레이어들을 확인할 수 있습니다.
이때 이미지 단순화(flatten images)란 필요한 이미지 정보만 추출해서 히스토리를 제거하고
이미지 크기를 줄이는 작업을 일컫습니다.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
- https://markruler.github.io/posts/container/building-container-images-in-go/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>책 &#34;컨테이너 보안&#34;</title>
        <link>https://markruler.github.io/posts/review/container-security/</link>
        <pubDate>Sun, 21 Feb 2021 11:47:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/review/container-security/</guid>
        <description>임창수 https://markruler.github.io/posts/review/container-security/ -&lt;blockquote&gt;
&lt;p&gt;한빛미디어의 지원을 받아 작성되었습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;거두절미&#34;&gt;거두절미&lt;/h1&gt;
&lt;p&gt;컨테이너에 관심 있으신 분이라면 필수 소장 도서입니다.
저도 컨테이너, 쿠버네티스, 도커, 클라우드 관련 도서를 많이 읽어봤지만
컨테이너를 이렇게 간명하고 깊게 다루는 책은 없었습니다.
컨테이너 &amp;lsquo;보안&amp;rsquo;을 설명하기 위해 컨테이너가 어떻게 동작하는지
설명하는 데에 책의 대부분을 차지합니다.
다만 200 페이지에 많은 내용을 압축한 만큼 도해는 많지 않습니다.&lt;/p&gt;
&lt;p&gt;먼저 저자의 &lt;a href=&#34;https://www.katacoda.com/lizrice/courses/containers-and-go&#34;&gt;katacoda (An Introduction to Containers for Go programmers)&lt;/a&gt;로
실습해보시거나 &lt;a href=&#34;https://youtu.be/HPuvDm8IC-4&#34;&gt;발표(What is a container, really? Let&amp;rsquo;s write one in Go from scratch)&lt;/a&gt;를 보시길 추천드립니다.&lt;/p&gt;
&lt;h1 id=&#34;저자-리즈-라이스에-대해&#34;&gt;저자 리즈 라이스에 대해&lt;/h1&gt;
&lt;p&gt;저자 리즈 라이스(Liz Rice)는 아쿠아 시큐리티(Aqua Security)의 오픈 소스 엔지니어링
부사장(VP Open Source Engineering)이자 클라우드 네이티브 보안 전문가입니다.
저자는 수년 전부터 꾸준히 &lt;code&gt;컨테이너&lt;/code&gt;와 &lt;code&gt;보안&lt;/code&gt;에 관련된 좋은 글을 내고 발표를 하고 있습니다.
저는 한빛미디어의 &amp;lt;나는 리뷰어다 2021&amp;gt; 리뷰어로 선정되어 책의 리뷰를 쓰게 되었지만
이전부터 저자의 &lt;a href=&#34;https://www.lizrice.com/&#34;&gt;블로그&lt;/a&gt;나
&lt;a href=&#34;https://twitter.com/lizrice&#34;&gt;트위터&lt;/a&gt;를 챙겨볼 정도로 팬이 되었습니다.&lt;/p&gt;
&lt;h1 id=&#34;대상-독자&#34;&gt;대상 독자&lt;/h1&gt;
&lt;p&gt;도커와 쿠버네티스 등 컨테이너 관련 도구들을 조금은 다뤄보셨고 리눅스의
기본 명령어를 알고 계신 분에게 추천드리지만
하나씩 찾아보면서 읽어보겠다 하는 분들도 충분히 읽으실 수 있습니다.
컨테이너 네트워크를 설명할 때 방화벽과 OSI 레이어부터 설명할 정도니까요.&lt;/p&gt;
&lt;h1 id=&#34;번역&#34;&gt;번역&lt;/h1&gt;
&lt;p&gt;컴퓨터 분야 기술 번역으로 꽤 오래 활동하신 류광님이 번역해주셨습니다.
&lt;a href=&#34;https://kubernetes.io/ko/docs/contribute/localization_ko/&#34;&gt;공식 한글화 쿠버네티스 문서&lt;/a&gt;나
한국 커뮤니티에서 쓰이는 용어와 다소 차이가 있어서 자연스럽게 읽히진 않습니다.
사실 영어와 한국어가 정확히 일대일로 치환되는 것은 아니기 때문에
역자의 고민이 묻어나는 부분이긴 하지만 독자에 따라 호불호가 있을 수 있습니다.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;원문&lt;/th&gt;
          &lt;th&gt;번역&lt;/th&gt;
          &lt;th&gt;커뮤니티에서 흔히 볼 수 있는 번역&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;deployment&lt;/td&gt;
          &lt;td&gt;배치본&lt;/td&gt;
          &lt;td&gt;디플로이먼트&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;controller&lt;/td&gt;
          &lt;td&gt;제어기&lt;/td&gt;
          &lt;td&gt;컨트롤러&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;namespace&lt;/td&gt;
          &lt;td&gt;이름공간&lt;/td&gt;
          &lt;td&gt;네임스페이스&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;multitenancy&lt;/td&gt;
          &lt;td&gt;다중 입주&lt;/td&gt;
          &lt;td&gt;멀티테넌시&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;더-읽을-거리&#34;&gt;더 읽을 거리&lt;/h1&gt;
&lt;p&gt;책이 압축되어 있는 만큼 중간중간 별도의 링크를 남겨 더 읽을 거리를
제공합니다. 저도 컨테이너 분야를 공부하면서
&lt;a href=&#34;https://markruler.github.io/posts/container/container-study-guide/&#34;&gt;도움되었던 자료들&lt;/a&gt;을
모으며 번역하고 있습니다. 필요하신 분들에게 도움이 되었으면 좋겠습니다.&lt;/p&gt;
- https://markruler.github.io/posts/review/container-security/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>컨테이너 톺아보기</title>
        <link>https://markruler.github.io/posts/container/container-study-guide/</link>
        <pubDate>Wed, 17 Feb 2021 23:47:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/container/container-study-guide/</guid>
        <description>임창수 https://markruler.github.io/posts/container/container-study-guide/ -&lt;h1 id=&#34;거두절미&#34;&gt;거두절미&lt;/h1&gt;
&lt;p&gt;생각보다 컨테이너는 간단한 게 아닙니다.
컨테이너를 쉽게 생성하고 삭제할 수 있었던 이유는
도커와 같은 컨테이너 관리 도구가 복잡한 것들을 꽁꽁 감췄기 때문입니다.
컨테이너를 공부하면 할수록 알아야 할 게 더 늘어나고 있지만
이쯤에서 유익했던 자료들을 모아 보려 합니다.&lt;/p&gt;
&lt;h1 id=&#34;참고-자료&#34;&gt;참고 자료&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;👍 필수
&lt;ul&gt;
&lt;li&gt;책 - &lt;a href=&#34;https://www.hanbit.co.kr/store/books/look.php?p_code=B8383749156&#34;&gt;컨테이너 보안&lt;/a&gt;, Liz Rice&lt;/li&gt;
&lt;li&gt;katacoda - &lt;a href=&#34;https://www.katacoda.com/lizrice/courses/containers-and-go&#34;&gt;An Introduction to Containers for Go programmers&lt;/a&gt;, Liz Rice&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;컨테이너
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/&#34;&gt;A Practical Introduction to Container Terminology&lt;/a&gt;, Scott McCarty&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/build-a-container-golang/&#34;&gt;Build Your Own Container Using Less than 100 Lines of Go&lt;/a&gt;, Julian Friedman&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://iximiuz.com/en/posts/implementing-container-runtime-shim/&#34;&gt;Implementing Container Runtime Shim: runc&lt;/a&gt;, Ivan Velichko&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;컨테이너 런타임
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.44bits.io/ko/keyword/linux-container&#34;&gt;리눅스 컨테이너란?&lt;/a&gt;, Daegwon Nacyot Kim&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.samsungsds.com/kr/insights/docker.html&#34;&gt;흔들리는 도커(Docker)의 위상: OCI와 CRI 중심으로 재편되는 컨테이너 생태계&lt;/a&gt;, 김준석&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.redhat.com/blog/2019/02/21/podman-and-buildah-for-docker-users/&#34;&gt;Podman and Buildah for Docker users&lt;/a&gt;, Red Hat&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://joejulian.name/post/kubernetes-container-engine-comparison/&#34;&gt;Selecting a container runtime for use with Kubernetes&lt;/a&gt;, Joe Julian&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;컨테이너 오케스트레이션
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.redhat.com/ko/topics/containers/what-is-container-orchestration&#34;&gt;컨테이너 오케스트레이션이란?&lt;/a&gt;, Red Hat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;네임스페이스
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.44bits.io/ko/keyword/linux-namespace&#34;&gt;리눅스 네임스페이스란?&lt;/a&gt;, Daegwon Nacyot Kim&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jake.dothome.co.kr/namespace/&#34;&gt;네임스페이스&lt;/a&gt;, 문영일&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://windsock.io/using-linux-namespaces-to-isolate-processes/&#34;&gt;Using Linux Namespaces to Isolate Processes&lt;/a&gt;, Scott McCarty&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.redhat.com/en/blog/whats-next-containers-user-namespaces&#34;&gt;What’s Next for Containers? User Namespaces&lt;/a&gt;, Scott McCarty&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://netflixtechblog.com/evolving-container-security-with-linux-user-namespaces-afbe3308c082&#34;&gt;Evolving Container Security With Linux User Namespaces&lt;/a&gt;, Netflix&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kinvolk.io/blog/2020/12/improving-kubernetes-and-container-security-with-user-namespaces/&#34;&gt;Improving Kubernetes and container security with user namespaces&lt;/a&gt;, Alban Crequy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;컨트롤 그룹
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/&#34;&gt;Cgroup Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/resource_management_guide/&#34;&gt;Red Hat Resource Management Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tech.kakao.com/2020/06/29/cgroup-driver/&#34;&gt;Cgroup Driver 선택하기&lt;/a&gt;, ssup&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://b.luavis.kr/server/missing-800mb&#34;&gt;사라진 800MB를 찾아서&lt;/a&gt;, Luavis&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;루트 파일세스템
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt&#34;&gt;Linux Kernel Documentation - ramfs, rootfs and initramfs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.44bits.io/ko/post/change-root-directory-by-using-chroot&#34;&gt;chroot를 사용한 프로세스의 루트 디렉터리 격리&lt;/a&gt;, Daegwon Nacyot Kim&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;유니온 마운트
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ahmet.im/blog/building-container-images-in-go/&#34;&gt;Building container images in Go&lt;/a&gt;, Ahmet Alp Balkan (번역중)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.44bits.io/ko/post/how-docker-image-work&#34;&gt;도커 이미지 빌드 원리와 OverlayFS&lt;/a&gt;, Daegwon Nacyot Kim&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.redhat.com/blog/2016/01/13/a-practical-introduction-to-docker-container-terminology/&#34;&gt;A Practical Introduction to Docker Container Terminology&lt;/a&gt;, Scott McCarty / Joe Brockmeier&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.naver.com/alice_k106/221530340759&#34;&gt;투명 셀로판지 이론을 통한 Overlay FS 사용 방법과 유니온 마운트 이해하기&lt;/a&gt;, 최용호&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ssup2.github.io/theory_analysis/Union_Mount_AUFS_Docker_Image_Layer/&#34;&gt;Union Mount, AUFS, Docker Image Layer&lt;/a&gt;, ssup2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/storage/storagedriver/aufs-driver&#34;&gt;Use the AUFS storage driver&lt;/a&gt;, Docker&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lwn.net/Articles/312641/&#34;&gt;Unifying filesystems with union mounts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;캐퍼빌리티
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/capabilities.7.html&#34;&gt;capabilities(7)&lt;/a&gt;, Linux manual page&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://archive.is/20130112225523/http://www.eros-os.org/essays/capintro.html&#34;&gt;What is a Capability, Anyway?&lt;/a&gt;, Jonathan Shapiro&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.epnc.co.kr/news/articleView.html?idxno=43405&#34;&gt;권한을 최소화시키는 리눅스 커널 자격&lt;/a&gt;, 이혜원&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.container-solutions.com/linux-capabilities-why-they-exist-and-how-they-work&#34;&gt;Linux Capabilities: Why They Exist and How They Work&lt;/a&gt;, Adrian Mouat&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.container-solutions.com/linux-capabilities-in-practice&#34;&gt;Linux Capabilities In Practice&lt;/a&gt;, Adrian Mouat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;컨테이너 네트워크
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.44bits.io/ko/post/container-network-1-uts-namespace&#34;&gt;UTS 네임스페이스를 사용한 호스트네임 격리 - 컨테이너 네트워크 기초 1편&lt;/a&gt;, Daegwon Nacyot Kim&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.44bits.io/ko/post/container-network-2-ip-command-and-network-namespace&#34;&gt;ip로 직접 만들어보는 네트워크 네임스페이스와 브리지 네트워크 - 컨테이너 네트워크 기초 2편&lt;/a&gt;, Daegwon Nacyot Kim&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;리눅스-컨테이너&#34;&gt;리눅스 컨테이너&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;A Linux container is a set of 1 or more processes that are isolated from the rest of the system.&amp;rdquo;
&lt;a href=&#34;https://www.redhat.com/en/topics/containers/whats-a-linux-container&#34;&gt;Red Hat&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;리눅스 컨테이너(Linux Container)는 시스템의 다른 부분과 격리된 하나 이상의 프로세스 집합입니다.
즉, 어떤 응용 프로그램이나 프로세스를 일컫는 것이 아니라 그저 리눅스 자원이 격리된 것입니다(‼️).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/container/user-space-vs-kernel-space-simple-container.png&#34; alt=&#34;user-space-vs-kernel-space-simple-container&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;출처: &lt;a href=&#34;https://www.redhat.com/en/blog/architecting-containers-part-1-why-understanding-user-space-vs-kernel-space-matters&#34;&gt;레드햇 블로그 &amp;ldquo;Architecting Containers Part 1: Why Understanding User Space vs. Kernel Space Matters&amp;rdquo; - Scott McCarty (fatherlinux)&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/container/user-space-vs-kernel-space-virtualization-vs-containerization11.png&#34; alt=&#34;user-space-vs-kernel-space-virtualization-vs-containerization&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;출처: &lt;a href=&#34;https://www.redhat.com/en/blog/architecting-containers-part-2-why-user-space-matters&#34;&gt;레드햇 블로그 &amp;ldquo;Architecting Containers Part 2: Why the User Space Matters&amp;rdquo; - Scott McCarty (fatherlinux)&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;컨테이너-엔진&#34;&gt;컨테이너 엔진&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/#h.6yt1ex5wfo3l&#34;&gt;컨테이너 엔진(Container Engine)&lt;/a&gt;은
컨테이너를 관리하기 위한 API나 CLI 도구를 제공하는 소프트웨어입니다.
&lt;code&gt;도커 엔진(docker-ce)&lt;/code&gt;부터 레드햇의 &lt;code&gt;파드맨(Podman)&lt;/code&gt;, 로켓 컴퍼니의 &lt;code&gt;rkt&lt;/code&gt; 등이
컨테이너 엔진에 해당합니다. 컨테이너 엔진은 사용자 입력을 받고, 컨테이너
이미지를 꺼내고(pull), 컨테이너 실행 방법을 명시한 메타데이터를 만든 다음,
컨테이너 런타임에 이 정보들을 전달합니다.&lt;/p&gt;
&lt;h2 id=&#34;컨테이너-런타임&#34;&gt;컨테이너 런타임&lt;/h2&gt;
&lt;p&gt;컨테이너 런타임(Container Runtime)은 루트 파일시스템과 메타 데이터(spec file)를
받아 컨테이너를 실행하는 도구입니다. 가장 일반적으로 쓰이는 런타임은 OCI를 준수하는
&lt;a href=&#34;https://github.com/opencontainers/runc&#34;&gt;&lt;code&gt;runC&lt;/code&gt;&lt;/a&gt;입니다.
흔히 쓰이는 &lt;a href=&#34;https://github.com/containerd/containerd/blob/master/pkg/process/init.go#L64&#34;&gt;&lt;code&gt;컨테이너-디 (containerd)&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&#34;https://github.com/cri-o/cri-o/blob/master/pkg/config/config.go#L38-L40&#34;&gt;&lt;code&gt;크라이-오 (cri-o)&lt;/code&gt;&lt;/a&gt;도 실제로는 &lt;code&gt;runC&lt;/code&gt;에 의존합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/container/docker-containerd-runc.png&#34; alt=&#34;docker-containerd-runc&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;출처: &lt;a href=&#34;https://www.docker.com/blog/oci-release-of-v1-0-runtime-and-image-format-specifications/&#34;&gt;Docker Leads OCI Release of v1.0 Runtime and Image Format Specifications&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;최근 쿠버네티스 블로그에 업로드된 Dockershim 제거에 대한 글&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;로
도커를 못 쓰게 된 건지 혼란이 있었습니다. 도커가 워낙 만능이다보니
&amp;ldquo;컨테이너 엔진==컨테이너 런타임==CRI==도커&amp;quot;라는 오해에서 비롯되었습니다.
자세한 내용은 &lt;a href=&#34;https://subicura.com/k8s/2020/12/19/deprecate-docker&#34;&gt;서비큐라님 글&lt;/a&gt;,
&lt;a href=&#34;https://www.slideshare.net/JoHoon1/the-myths-of-deprecating-docker-in-kubernetes&#34;&gt;조훈님과 심근우님 글&lt;/a&gt;을 참고해주세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/container/simple-orchestration-node.png&#34; alt=&#34;simple-orchestration-node&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;출처: &lt;a href=&#34;https://www.katacoda.com/fatherlinux/courses/subsystems/container-internals-lab-2-0-part-1&#34;&gt;Linux Container Internals - Scott McCarty&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;컨테이너-오케스트레이션&#34;&gt;컨테이너 오케스트레이션&lt;/h2&gt;
&lt;p&gt;컨테이너 오케스트레이션(Container Orchestration)은 컨테이너 배포, 관리, 확장, 네트워킹 등을 자동화합니다.
대표적으로 CNCF에서 관리하고 있는 &lt;a href=&#34;https://kubernetes.io/&#34;&gt;쿠버네티스&lt;/a&gt;가 있습니다.&lt;/p&gt;
&lt;h1 id=&#34;컨테이너를-만드는-리눅스-커널-기능&#34;&gt;컨테이너를 만드는 리눅스 커널 기능&lt;/h1&gt;
&lt;p&gt;처음에는 리눅스 커널까지 깊게 알아야 하나 싶었는데
&lt;a href=&#34;https://b.luavis.kr/server/missing-800mb&#34;&gt;사라진 메모리를 찾아가는 Luavis님 글&lt;/a&gt;을
읽어보니 반드시 알아야겠더라구요.
대표적으로 쓰이는 리눅스 커널 기능은 네임스페이스와 컨트롤 그룹 등이 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/container/docker-with-linux-kernel.png&#34; alt=&#34;docker-with-linux-kernel&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;출처: &lt;a href=&#34;https://www.educative.io/edpresso/what-are-kernel-namespaces&#34;&gt;educative&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;네임스페이스-what-you-can-see&#34;&gt;네임스페이스: What you can see&lt;/h2&gt;
&lt;p&gt;리눅스 네임스페이스(Namespace)는 프로세스 실행 시 시스템 자원을 격리시켜주는 기능입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/namespaces.7.html&#34;&gt;&lt;code&gt;namespaces&lt;/code&gt;(7)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;네임스페이스 유형&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;네임스페이스&lt;/th&gt;
          &lt;th&gt;플래그&lt;/th&gt;
          &lt;th&gt;경로&lt;/th&gt;
          &lt;th&gt;매뉴얼&lt;/th&gt;
          &lt;th&gt;격리 대상&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Cgroup&lt;/td&gt;
          &lt;td&gt;CLONE_NEWCGROUP&lt;/td&gt;
          &lt;td&gt;/proc/[pid]/ns/cgroup&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/cgroup_namespaces.7.html&#34;&gt;cgroup_namespaces(7)&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Cgroup root directory&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;IPC&lt;/td&gt;
          &lt;td&gt;CLONE_NEWIPC&lt;/td&gt;
          &lt;td&gt;/proc/[pid]/ns/ipc&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/ipc_namespaces.7.html&#34;&gt;ipc_namespaces(7)&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;System V IPC, POSIX message queues&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Network&lt;/td&gt;
          &lt;td&gt;CLONE_NEWNET&lt;/td&gt;
          &lt;td&gt;/proc/[pid]/ns/net&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/network_namespaces.7.html&#34;&gt;network_namespaces(7)&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Network devices, stacks, ports, etc.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Mount&lt;/td&gt;
          &lt;td&gt;CLONE_NEWNS&lt;/td&gt;
          &lt;td&gt;/proc/[pid]/ns/mnt&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/mount_namespaces.7.html&#34;&gt;mount_namespaces(7)&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Mount points&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;PID&lt;/td&gt;
          &lt;td&gt;CLONE_NEWPID&lt;/td&gt;
          &lt;td&gt;/proc/[pid]/ns/pid, /proc/[pid]/ns/pid_for_children&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/pid_namespaces.7.html&#34;&gt;pid_namespaces(7)&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Process IDs&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Time&lt;/td&gt;
          &lt;td&gt;CLONE_NEWTIME&lt;/td&gt;
          &lt;td&gt;/proc/[pid]/ns/time, /proc/[pid]/ns/time_for_children&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/time_namespaces.7.html&#34;&gt;time_namespaces(7)&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Boot and monotonic clocks&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;User&lt;/td&gt;
          &lt;td&gt;CLONE_NEWUSER&lt;/td&gt;
          &lt;td&gt;/proc/[pid]/ns/user&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/user_namespaces.7.html&#34;&gt;user_namespaces(7)&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;User and group IDs&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;UTS (UNIX Time Sharing)&lt;/td&gt;
          &lt;td&gt;CLONE_NEWUTS&lt;/td&gt;
          &lt;td&gt;/proc/[pid]/ns/uts&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/uts_namespaces.7.html&#34;&gt;uts_namespaces(7)&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;Hostname and NIS domain name&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;네임스페이스 관련 API&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;시스템 호출&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man2/clone.2.html&#34;&gt;clone&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;새로운 자식 프로세스를 생성합니다. 위의 표에서 &lt;code&gt;CLONE_NEW*&lt;/code&gt; 플래그를 인수로 지정합니다.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man2/setns.2.html&#34;&gt;setns&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;시스템 호출한 프로세스가 &lt;code&gt;/proc/[pid]/ns&lt;/code&gt;를 참조해 기존 네임스페이스에 할당됩니다.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man2/unshare.2.html&#34;&gt;unshare&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;시스템 호출한 프로세스가 새로운 네임스페이스에 할당됩니다. 마찬가지로 &lt;code&gt;CLONE_NEW*&lt;/code&gt; 플래그를 인수로 지정합니다.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man2/ioctl.2.html&#34;&gt;ioctl&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;네임스페이스 관련 정보를 찾기 위한 다양한 기능을 제공합니다. 기본적으로 디바이스 제어 API입니다.&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;clone&lt;/code&gt;과 &lt;code&gt;unshare&lt;/code&gt;는 &lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt; &lt;a href=&#34;#%EB%A6%AC%EB%88%85%EC%8A%A4-%EC%BA%90%ED%8D%BC%EB%B9%8C%EB%A6%AC%ED%8B%B0linux-capabilities&#34;&gt;캐퍼빌리티&lt;/a&gt;가 필요합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/namespaces/compatibility-list.rst&#34;&gt;네임스페이스 호환성 문제&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;컨트롤-그룹-what-you-can-use&#34;&gt;컨트롤 그룹: What you can use&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;보통 &lt;code&gt;씨-그룹&lt;/code&gt;이나 &lt;code&gt;컨트롤-그룹&lt;/code&gt;이라고 발음합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;컨트롤 그룹(cgroup, control group)은 프로세스에서 사용 가능한 CPU, 메모리, 네트워크 대역폭, 디스크 I/O 등을
그룹 단위로 제어하는 리눅스 커널의 기능입니다.
원래는 &lt;a href=&#34;https://lwn.net/Articles/236038/&#34;&gt;프로세스 컨테이너&lt;/a&gt;라는
이름으로 제안되었지만, 나중에 컨트롤 그룹이 되었습니다.
컨트롤 그룹은 컨테이너에서만 사용되는 기능은 아니고
리눅스 시스템에서 프로세스 관리를 위해 일반적으로 사용되고 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;control-group-드라이버httpskubernetesiokodocssetupproduction-environmentcontainer-runtimescgroup-eb939ceb9dbcec9db4ebb284&#34;&gt;&lt;a href=&#34;https://kubernetes.io/ko/docs/setup/production-environment/container-runtimes/#cgroup-%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B2%84&#34;&gt;Control Group 드라이버&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;cgroupfs&lt;/li&gt;
&lt;li&gt;systemd&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo docker info -f &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;{{json .}}&amp;#39;&lt;/span&gt; | jq &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;. | .CgroupDriver&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# &amp;#34;cgroupfs&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cgroupfs-컨트롤-그룹-파일-시스템&#34;&gt;cgroupfs (컨트롤 그룹 파일 시스템)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;memory&lt;/code&gt; 중에서도 &lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v1/memory.html#benefits-and-purpose-of-the-memory-controller&#34;&gt;일부분만 갈무리&lt;/a&gt;해봤습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;tasks&lt;/th&gt;
          &lt;th&gt;attach a task(thread) and show list of threads&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;cgroup.procs&lt;/td&gt;
          &lt;td&gt;show list of processes&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;cgroup.event_control&lt;/td&gt;
          &lt;td&gt;an interface for event_fd()&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;memory.stat&lt;/td&gt;
          &lt;td&gt;show various statistics&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;memory.limit_in_bytes&lt;/td&gt;
          &lt;td&gt;set/show limit of memory usage&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;memory.usage_in_bytes&lt;/td&gt;
          &lt;td&gt;show current usage for memory (See 5.5 for details)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;memory.max_usage_in_bytes&lt;/td&gt;
          &lt;td&gt;show max memory usage recorded&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;memory.numa_stat&lt;/td&gt;
          &lt;td&gt;show the number of memory usage per numa node&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;memory.kmem.tcp.max_usage_in_bytes&lt;/td&gt;
          &lt;td&gt;show max tcp buf memory usage recorded&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;hellip;&lt;/td&gt;
          &lt;td&gt;&amp;hellip;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;control-group-v1-컨트롤러&#34;&gt;Control Group v1 컨트롤러&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;컨트롤러&lt;/th&gt;
          &lt;th&gt;커널 설정 옵션&lt;/th&gt;
          &lt;th&gt;설명&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/blkio-controller.rst&#34;&gt;blkio&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;CONFIG_BLK_CGROUP&lt;/td&gt;
          &lt;td&gt;블록 IO 제어&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/cpuacct.rst&#34;&gt;cpuacct&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;CONFIG_CGROUP_CPUACCT&lt;/td&gt;
          &lt;td&gt;프로세스 그룹 CPU 사용량 계산&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/cpusets.rst&#34;&gt;cpuset&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;CONFIG_CPUSETS&lt;/td&gt;
          &lt;td&gt;특정 CPU나 NUMA 노드 할당&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/devices.rst&#34;&gt;devices&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;CONFIG_CGROUP_DEVICE&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man2/mknod.2.html&#34;&gt;mknod&lt;/a&gt;를 통해 디바이스를 관리할 수 있는지 결정&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/freezer-subsystem.rst&#34;&gt;freezer&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;CONFIG_CGROUP_FREEZER&lt;/td&gt;
          &lt;td&gt;프로세스 일시 정지-재개&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/memory.rst&#34;&gt;memory&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;CONFIG_MEMCG&lt;/td&gt;
          &lt;td&gt;사용중인 프로세스 메모리, 커널 메모리, 스왑 메모리 관리&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/net_cls.rst&#34;&gt;net_cls&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;CONFIG_CGROUP_NET_CLASSID&lt;/td&gt;
          &lt;td&gt;트래픽 제어에 쓰이는 classid 관리&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/net_prio.rst&#34;&gt;net_prio&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;CONFIG_CGROUP_NET_PRIO&lt;/td&gt;
          &lt;td&gt;네트워크 인터페이스 우선순위(priorities) 관리&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/pids.rst&#34;&gt;pids&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;CONFIG_CGROUP_PIDS&lt;/td&gt;
          &lt;td&gt;생성할 수 있는 프로세스 수 관리&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;hellip;&lt;/td&gt;
          &lt;td&gt;&amp;hellip;&lt;/td&gt;
          &lt;td&gt;&amp;hellip;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;control-group-v2&#34;&gt;Control Group v2&lt;/h3&gt;
&lt;p&gt;cgroups v2가 Linux 커널 4.5부터 공식적으로 포함되었습니다. 자세한 내용은
&lt;a href=&#34;https://medium.com/nttlabs/cgroup-v2-596d035be4d7&#34;&gt;Akihiro Suda의 글&lt;/a&gt;과
&lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v2.html&#34;&gt;커널 문서&lt;/a&gt;를
참고해주세요.&lt;/p&gt;
&lt;h2 id=&#34;루트-파일시스템&#34;&gt;루트 파일시스템&lt;/h2&gt;
&lt;p&gt;루트 파일시스템(Root File System)이란 &lt;code&gt;ramfs&lt;/code&gt;나 &lt;code&gt;tmpfs&lt;/code&gt;의 특수 인스턴스로
루트 디렉토리(&lt;code&gt;/&lt;/code&gt;)에 마운트되는 파일 시스템을 말합니다.
&lt;code&gt;rootfs&lt;/code&gt;은 커널이 동작하기 위한 필수 파일들이 있기 때문에 마운트를 해제할 수 없습니다.
&lt;code&gt;chroot&lt;/code&gt;나 &lt;code&gt;pivot_root&lt;/code&gt; 명령어로 &lt;code&gt;rootfs&lt;/code&gt; 경로를 변경(chroot jail)하여 파일 시스템을 격리할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;유니온-마운트&#34;&gt;유니온 마운트&lt;/h2&gt;
&lt;p&gt;유니온 마운트(Union Mount)란 여러 파일 시스템을 단일 포인트로 마운트하는 것을 말합니다.
컨테이너에 필수적인 기능은 아니지만 이미지 레이어 구현에 사용되면서 필수적인
기능으로 자리잡았습니다. 예를 들면 도커가 사용하는 &lt;a href=&#34;https://docs.docker.com/storage/storagedriver/aufs-driver/&#34;&gt;AUFS&lt;/a&gt;, &lt;a href=&#34;https://docs.docker.com/storage/storagedriver/overlayfs-driver/&#34;&gt;OverlayFS&lt;/a&gt; 등이 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/container/aufs-layers.jpg&#34; alt=&#34;aufs&#34;&gt;&lt;/p&gt;
&lt;p&gt;출처: &lt;a href=&#34;https://docs.docker.com/storage/storagedriver/aufs-driver/&#34;&gt;Use the AUFS storage driver - docker docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/container/overlay-constructs.jpg&#34; alt=&#34;overlay-constructs&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;출처: &lt;a href=&#34;https://docs.docker.com/storage/storagedriver/overlayfs-driver/#how-the-overlay-driver-works&#34;&gt;Use the OverlayFS storage driver - docker docs&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;리눅스-캐퍼빌리티httpsman7orglinuxman-pagesman7capabilities7html&#34;&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/capabilities.7.html&#34;&gt;리눅스 캐퍼빌리티&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Capability-based_security#POSIX_capabilities&#34;&gt;POSIX capabilities&lt;/a&gt;
개념으로 루트 프로세스 권한을 세부적으로 제어하기 위한 속성입니다. &amp;lsquo;자격&amp;rsquo;, &amp;lsquo;능력&amp;rsquo; 등으로 번역됩니다.&lt;/p&gt;
&lt;p&gt;캐퍼빌리티가 없을 때 프로세스는 두 가지로만 나뉘었습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(User ID가 0인, superuser라 불리는) 루트 사용자가 소유한 특권(privileged) 프로세스&lt;/li&gt;
&lt;li&gt;(User ID가 0이 아닌) 일반 사용자가 소유한 비특권(unprivileged) 프로세스.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 중 루트 권한을 세분화해서 프로세스마다 다르게 적용할 수 있도록 만든 기능이 바로 리눅스 캐퍼빌리티입니다.
컨테이너 런타임에서 루트 권한 일부분만 필요할 경우 리눅스 캐퍼빌리티를 사용합니다.&lt;/p&gt;
&lt;h1 id=&#34;샌드박싱-솔루션&#34;&gt;샌드박싱 솔루션&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;샌드박싱이란? 자원 접근이 제한되도록 응용 프로그램을 격리하는 것 - &amp;lt;컨테이너 보안&amp;gt; 참조&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;seccomp&lt;/li&gt;
&lt;li&gt;AppArmor&lt;/li&gt;
&lt;li&gt;SELinux&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/blog/2020/12/02/dont-panic-kubernetes-and-docker/&#34;&gt;Don&amp;rsquo;t Panic: Kubernetes and Docker&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/blog/2020/12/02/dockershim-faq/&#34;&gt;Dockershim Deprecation FAQ&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
- https://markruler.github.io/posts/container/container-study-guide/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>최소한의 안전한 Bash 스크립트 템플릿</title>
        <link>https://markruler.github.io/posts/shell/minimal-safe-bash-script-template/</link>
        <pubDate>Sun, 14 Feb 2021 15:22:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/shell/minimal-safe-bash-script-template/</guid>
        <description>임창수 https://markruler.github.io/posts/shell/minimal-safe-bash-script-template/ -&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/radzikowski_m&#34;&gt;Maciej Radzikowski&lt;/a&gt;가 작성한 &lt;a href=&#34;https://betterdev.blog/minimal-safe-bash-script-template/&#34;&gt;Minimal safe Bash script template (2020-12-14)&lt;/a&gt;를 번역한 글입니다.&lt;/li&gt;
&lt;li&gt;저자의 허락을 받고 번역했습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bash 스크립트.
거의 모든 사람들이 언젠가 작성해야 하는 것입니다.
하지만 그 중 누구도 &amp;ldquo;맞아요, 저는 Bash 스크립트 작성하는 것을 사랑합니다&amp;quot;라고 말하지 않습니다.
거의 모든 사람들이 Bash 스크립트를 작성할 때 주의를 기울이지 않는 이유죠.&lt;/p&gt;
&lt;p&gt;저는 여러분을 Bash 전문가로 만들려는 것이 아닙니다 (저도 전문가는 아닙니다).
다만 스크립트를 더 안전하게 만들어 줄 최소한의 템플릿을 보여 드리겠습니다.
저에게 감사해하실 필요는 없어요. 여러분의 미래가 여러분에게 감사해할 것입니다.&lt;/p&gt;
&lt;h1 id=&#34;bash에서-스크립팅-하는-이유&#34;&gt;Bash에서 스크립팅 하는 이유&lt;/h1&gt;
&lt;p&gt;Bash 스크립팅에 대한 가장 좋은 설명이 최근 저의 트위터 피드에 나타났습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;자전거 타는 거랑 비슷해&amp;quot;의 반대말은 &amp;ldquo;bash 프로그래밍이랑 비슷해&amp;quot;이다.&lt;br&gt;
몇 번을 했던지 상관없이 매번 다시 배워야 한다는 말.&lt;br&gt;
&lt;br&gt;
- &lt;a href=&#34;https://twitter.com/JakeWharton/status/1334177665356587008&#34;&gt;Jake Wharton&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;하지만 Bash는 널리 사랑받는 언어인 JavaScript처럼 쉽게 사라지지 않을 것입니다.
주요 언어가 되지 않길 바라더라도 Bash는 항상 우리와 가까운 곳에 있습니다.&lt;/p&gt;
&lt;p&gt;Bash는 &lt;a href=&#34;https://www.quora.com/Is-Bash-considered-the-lingua-franca-of-shells/answer/Paul-Reiber&#34;&gt;셸(shell) 왕좌를 물려받았고&lt;/a&gt;
Docker 이미지를 포함한 거의 모든 Linux에서 찾을 수 있습니다.
이는 대부분의 백엔드가 실행되는 환경입니다.
따라서 서버 애플리케이션 시작, CI/CD 또는 통합 테스트 실행을
스크립팅해야 하는 경우 Bash를 사용하면 됩니다.&lt;/p&gt;
&lt;p&gt;몇 가지 명령을 이어 붙이고, 출력을 다른 명령으로 전달하고,
실행 파일을 시작하기 위해 Bash는 가장 쉽고 가장 기본적인 솔루션입니다.
더 크고 복잡한 스크립트를 다른 언어로 작성하는 것은 매우 타당한 일이지만
Python, Ruby, fish 또는 다른 인터프리터가 어디에서나 사용할 수 있을 것이라고 기대할 수는 없습니다.
또한 일부 프로덕션 서버, Docker 이미지 또는 CI 환경에 이 언어들을 추가하려면
두 번 생각해보고 또 다시 한 번 생각해 보아야 합니다.&lt;/p&gt;
&lt;p&gt;하지만 Bash는 완벽하지 않습니다.
문법은 최악이고 에러 핸들링도 어렵습니다.
우리가 해결해야 하는 지뢰가 널려 있죠.&lt;/p&gt;
&lt;h1 id=&#34;bash-스크립트-템플릿&#34;&gt;Bash 스크립트 템플릿&lt;/h1&gt;
&lt;p&gt;거두절미하고 템플릿은 다음과 같습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set -Eeuo pipefail
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;trap cleanup SIGINT SIGTERM ERR EXIT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;script_dir&lt;/span&gt;=&lt;span style=&#34;color:#f00&#34;&gt;$(&lt;/span&gt;cd &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;$(&lt;/span&gt;dirname &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;BASH_SOURCE&lt;/span&gt;[0]&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; &amp;amp;&amp;gt;/dev/null &amp;amp;&amp;amp; pwd -P&lt;span style=&#34;color:#f00&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;usage() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cat &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;Usage: $(basename &amp;#34;${BASH_SOURCE[0]}&amp;#34;) [-h] [-v] [-f] -p param_value arg1 [arg2...]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;Script description here.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;Available options:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;-h, --help      Print this help and exit
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;-v, --verbose   Print script debug info
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;-f, --flag      Some flag description
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;-p, --param     Some param description
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  exit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cleanup() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  trap - SIGINT SIGTERM ERR EXIT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;# script cleanup here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setup_colors() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; [[ -t &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; ]] &amp;amp;&amp;amp; [[ -z &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;NO_COLOR&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; ]] &amp;amp;&amp;amp; [[ &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;TERM&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; != &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;dumb&amp;#34;&lt;/span&gt; ]]; &lt;span style=&#34;color:#f00&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eedd82&#34;&gt;NOFORMAT&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;RED&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;31m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;GREEN&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;32m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;ORANGE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;33m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;BLUE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;34m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;PURPLE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;35m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;CYAN&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;36m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;YELLOW&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[1;33m&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eedd82&#34;&gt;NOFORMAT&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;RED&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;GREEN&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;ORANGE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;BLUE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;PURPLE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;CYAN&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;YELLOW&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msg() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  echo &amp;gt;&amp;amp;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; -e &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;1&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;die() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local &lt;span style=&#34;color:#eedd82&#34;&gt;msg&lt;/span&gt;=&lt;span style=&#34;color:#eedd82&#34;&gt;$1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local &lt;span style=&#34;color:#eedd82&#34;&gt;code&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;2&lt;/span&gt;-1&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#0f0&#34;&gt;# default exit status 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  msg &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$msg&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  exit &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$code&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parse_params() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;# default values of variables set from params&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eedd82&#34;&gt;flag&lt;/span&gt;=&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eedd82&#34;&gt;param&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;while&lt;/span&gt; :; &lt;span style=&#34;color:#f00&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;1&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; in
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -h | --help) usage ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -v | --verbose) set -x ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    --no-color) &lt;span style=&#34;color:#eedd82&#34;&gt;NO_COLOR&lt;/span&gt;=&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -f | --flag) &lt;span style=&#34;color:#eedd82&#34;&gt;flag&lt;/span&gt;=&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ;; &lt;span style=&#34;color:#0f0&#34;&gt;# example flag&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -p | --param) &lt;span style=&#34;color:#0f0&#34;&gt;# example named parameter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eedd82&#34;&gt;param&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;2&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      shift
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -?*) die &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Unknown option: &lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    *) break ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    shift
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eedd82&#34;&gt;args&lt;/span&gt;=(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$@&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;# check required params and arguments&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [[ -z &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;param&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; ]] &amp;amp;&amp;amp; die &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Missing required parameter: param&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [[ &lt;span style=&#34;color:#87ceeb&#34;&gt;${#&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;args&lt;/span&gt;[@]&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt; -eq &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; ]] &amp;amp;&amp;amp; die &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Missing script arguments&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parse_params &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$@&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setup_colors
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# script logic here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msg &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;RED&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;Read parameters:&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;NOFORMAT&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msg &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;- flag: &lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;flag&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msg &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;- param: &lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;param&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msg &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;- arguments: &lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;args&lt;/span&gt;[*]-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;너무 길지 않게 만들려는 생각이었습니다.
저는 스크립트 로직때문에 500줄이나 스크롤하고 싶지 않습니다.
동시에 어떤 스크립트에서든 좋은 기반 스크립트가 되었으면 했습니다.
하지만 Bash는 의존성 관리라는 것이 없어서 쉽게 만들 수는 없었습니다.&lt;/p&gt;
&lt;p&gt;한 가지 해결책은 처음부터 모든 보일러 플레이트 및 유틸리티
함수(function)가 있는 별도의 스크립트를 같이 실행시키는 것입니다.
이 방식의 단점은 &amp;ldquo;간단한 Bash 스크립트&amp;quot;라는 의도를 잃어버리고 항상
별도의 파일을 달고 다녀야 한다는 것입니다. 그래서 저는 템플릿을
가능한 한 짧게 만들기 위해 필수적인 것만을 템플릿에 넣자고 결정했습니다.&lt;/p&gt;
&lt;p&gt;이제 좀 더 자세히 살펴보겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;bash-선택하기&#34;&gt;Bash 선택하기&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;스크립트는 기본적으로 셔뱅(shebang)&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;으로 시작합니다.
&lt;a href=&#34;https://stackoverflow.com/questions/21612980/why-is-usr-bin-env-bash-superior-to-bin-bash&#34;&gt;최적의 호환성&lt;/a&gt;을 위해
&lt;code&gt;/bin/bash&lt;/code&gt;가 아닌 &lt;code&gt;/usr/bin/env&lt;/code&gt;를 참조합니다.
링크된 StackOverflow 질문의 답변을 읽어 보시면
이 경우에도 오류가 발생할 수는 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;빠르게-실패하기&#34;&gt;빠르게 실패하기&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set -Eeuo pipefail
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;set&lt;/code&gt; 명령어는 스크립트 실행 옵션을 변경합니다.
예를 들면 &lt;strong&gt;기본적으로 Bash는 일부 명령이 실패하는 것과 상관없이&lt;/strong&gt;
0 외의 종료 상태 코드를 반환합니다. 다음 단계로 잘 넘어갑니다.
이제 다음과 같이 짧은 스크립트를 살펴보겠습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;&lt;/span&gt;cp important_file ./backups/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm important_file
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기서 &lt;code&gt;backups&lt;/code&gt; 디렉토리가 존재하지 않을 경우 어떻게 될까요?
정확히 말하면 콘솔에 오류 메시지가 표시되지만
응답하기 전에 두 번째 명령에 의해 파일이 이미 제거됩니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set -Eeuo pipefail&lt;/code&gt; 옵션들이 정확하게 무엇을 바꾸는지,
어떻게 사용자를 보호할 것인지에 대한 자세한 내용은
&lt;a href=&#34;https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/&#34;&gt;몇 년 동안 제 북마크에 있는 글&lt;/a&gt;을 참조해주세요.&lt;/p&gt;
&lt;p&gt;하지만 &lt;a href=&#34;https://www.reddit.com/r/commandline/comments/g1vsxk/the_first_two_statements_of_your_bash_script/fniifmk/&#34;&gt;이러한 옵션 설정에 대해 몇 가지 반론&lt;/a&gt;이 있다는 것을 알고 있어야 합니다.&lt;/p&gt;
&lt;h2 id=&#34;위치-가져오기&#34;&gt;위치 가져오기&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;script_dir&lt;/span&gt;=&lt;span style=&#34;color:#f00&#34;&gt;$(&lt;/span&gt;cd &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;$(&lt;/span&gt;dirname &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;BASH_SOURCE&lt;/span&gt;[0]&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; &amp;amp;&amp;gt;/dev/null &amp;amp;&amp;amp; pwd -P&lt;span style=&#34;color:#f00&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 줄은 스크립트가 위치한 디렉토리를 지정하는 데 가장 효과적이며, &lt;del&gt;여기에 &lt;code&gt;cd&lt;/code&gt;를 붙입니다.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;스크립트가 작업 디렉토리에 있다면 스크립트가 상대 경로로 동작하며
파일을 복사하고 명령어를 실행합니다.
동일한 디렉토리에서 스크립트를 실행하는 한 그렇습니다.&lt;/p&gt;
&lt;p&gt;하지만 CI 구성에서 다음과 같은 스크립트를 실행한다면&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/ci/project/script.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 스크립트는 프로젝트 디렉토리가 아니라 CI 도구의 다른 작업 디렉토리에서 동작합니다.
스크립트를 실행하기 전에 해당 디렉토리로 이동함으로써 고칠 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /opt/ci/project &amp;amp;&amp;amp; ./script.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그래도 스크립트 쪽에서 해결하는 게 훨씬 좋습니다.
스크립트가 일부 파일을 읽거나 동일한 디렉터리에서
다른 프로그램을 실행하려는 경우 아래처럼 호출합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$script_dir&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;/my_file&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;동시에 스크립트는 작업 디렉토리 위치를 변경하지 않습니다.
스크립트가 다른 디렉토리에서 실행되어 사용자가 일부 파일에 대한
상대 경로를 제공하더라도 해당 스크립트를 읽을 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;정리하기&#34;&gt;정리하기&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;trap cleanup SIGINT SIGTERM ERR EXIT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cleanup() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  trap - SIGINT SIGTERM ERR EXIT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;# script cleanup here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;스크립트의 &lt;code&gt;trap&lt;/code&gt;을 &lt;code&gt;finally&lt;/code&gt; 블록으로 생각해 보세요.
보통 오류나 외부 신호에 의해 스크립트가 끝나면 &lt;code&gt;cleanup()&lt;/code&gt; 함수가 실행됩니다.
예를 들어 스크립트가 생성한 모든 임시 파일들을 제거할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cleanup()&lt;/code&gt;은 끝날 때뿐만 아니라 스크립트가 특정 부분만 제거할 수도 있다는 것을 기억하세요.
제거하려는 자원이 반드시 있어야 하는 것은 아닙니다.&lt;/p&gt;
&lt;h2 id=&#34;도움되는-도움말-표시하기&#34;&gt;도움되는 도움말 표시하기&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;usage() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cat &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;Usage: $(basename &amp;#34;${BASH_SOURCE[0]}&amp;#34;) [-h] [-v] [-f] -p param_value arg1 [arg2...]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;Script description here.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  exit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;usage()&lt;/code&gt; 함수가 상대적으로 스크립트 상단에 있을 경우 다음 두 가지 방식으로 동작합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든 옵션을 아는 것도 아니면서 스크립트 전체를 보고 싶지 않은 사용자를 위해 &lt;code&gt;도움말을 표시합니다&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;스크립트 수정 시 &lt;code&gt;최소한의 문서&lt;/code&gt;입니다. (예: 2주 후, 무엇을 작성했는지 떠올릴 필요가 없습니다)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기에 모든 함수를 기록해야 한다고 말하는 것은 아닙니다.
그러나 짧고 적절한 스크립트 사용법(usage) 메시지는 필수 항목입니다.&lt;/p&gt;
&lt;h2 id=&#34;적절한-메시지-출력하기&#34;&gt;적절한 메시지 출력하기&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setup_colors() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; [[ -t &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; ]] &amp;amp;&amp;amp; [[ -z &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;NO_COLOR&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; ]] &amp;amp;&amp;amp; [[ &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;TERM&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; != &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;dumb&amp;#34;&lt;/span&gt; ]]; &lt;span style=&#34;color:#f00&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eedd82&#34;&gt;NOFORMAT&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;RED&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;31m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;GREEN&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;32m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;ORANGE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;33m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;BLUE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;34m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;PURPLE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;35m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;CYAN&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[0;36m&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;YELLOW&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;\033[1;33m&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eedd82&#34;&gt;NOFORMAT&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;RED&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;GREEN&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;ORANGE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;BLUE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;PURPLE&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;CYAN&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eedd82&#34;&gt;YELLOW&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msg() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  echo &amp;gt;&amp;amp;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; -e &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;1&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;먼저 텍스트에서 색상을 사용하지 않으려면 &lt;code&gt;setup_colors()&lt;/code&gt; 함수를 지우세요.
하지만 저는 매번 코드를 구글에다 검색하지 않는다면
색상을 더 자주 사용할 수 있다는 것을 알기 때문에 지우지 않습니다.&lt;/p&gt;
&lt;p&gt;둘째로, 이러한 &lt;strong&gt;색상은 &lt;code&gt;msg()&lt;/code&gt; 함수에만 사용하도록 되어 있고&lt;/strong&gt; &lt;code&gt;echo&lt;/code&gt; 명령에는 사용되지 않습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;msg()&lt;/code&gt; 함수는 스크립트 출력을 제외한 모든 것을 출력하는 데 사용됩니다.
여기에는 오류뿐만 아니라 모든 로그와 메시지가 포함됩니다.
&lt;a href=&#34;https://medium.com/@jdxcode/12-factor-cli-apps-dd3c227a0e46&#34;&gt;12 팩터 CLI 앱&lt;/a&gt;이라는 좋은 글을 인용합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;요컨대 stdout은 출력용이고 stderr는 메시지용입니다.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://jdxcode.com/&#34;&gt;Jeff Dickey&lt;/a&gt;, who &lt;a href=&#34;https://github.com/oclif/oclif/graphs/contributors&#34;&gt;knows a little&lt;/a&gt; about &lt;a href=&#34;https://github.com/heroku/cli/graphs/contributors&#34;&gt;building CLI apps&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;그래서 대부분의 경우 &lt;code&gt;stdout&lt;/code&gt;에 색상을 사용하지 않는 것이 좋습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;msg()&lt;/code&gt;로 출력된 메시지는 &lt;code&gt;stderr&lt;/code&gt; 스트림으로 전송되며 색상과 같은 특수 시퀀스를 지원합니다.
또한 &lt;code&gt;stderr&lt;/code&gt; 출력이 대화형 터미널이 아니거나 &lt;a href=&#34;https://no-color.org/&#34;&gt;표준 파라미터 중 하나&lt;/a&gt;가 전달되면 색상이 비활성화됩니다.&lt;/p&gt;
&lt;p&gt;사용법:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msg &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;This is a &lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;RED&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;very important&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;NOFORMAT&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt; message, but not a script output value!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;stderr&lt;/code&gt;가 대화형 터미널이 아닐 때 어떻게 작동하는지 확인하려면 스크립트에 위와 같은 줄을 추가하세요.
그런 다음 &lt;code&gt;stderr&lt;/code&gt;를 &lt;code&gt;stdout&lt;/code&gt;으로 리다이렉션하고 cat에 보내줍니다(pipe).
파이프가 동작하면 출력이 더 이상 터미널로 직접 전송되지 않고 다음 명령으로
전송되므로 이제 색상을 사용하지 않도록 설정해야 합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./test.sh 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; | cat
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This is a very important message, but not a script output value!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;모든-파라미터-파싱&#34;&gt;모든 파라미터 파싱&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parse_params() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;# default values of variables set from params&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eedd82&#34;&gt;flag&lt;/span&gt;=&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eedd82&#34;&gt;param&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;while&lt;/span&gt; :; &lt;span style=&#34;color:#f00&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;1&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; in
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -h | --help) usage ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -v | --verbose) set -x ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    --no-color) &lt;span style=&#34;color:#eedd82&#34;&gt;NO_COLOR&lt;/span&gt;=&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -f | --flag) &lt;span style=&#34;color:#eedd82&#34;&gt;flag&lt;/span&gt;=&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ;; &lt;span style=&#34;color:#0f0&#34;&gt;# example flag&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -p | --param) &lt;span style=&#34;color:#0f0&#34;&gt;# example named parameter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eedd82&#34;&gt;param&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;2&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      shift
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    -?*) die &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Unknown option: &lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    *) break ;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;esac&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    shift
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eedd82&#34;&gt;args&lt;/span&gt;=(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$@&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;# check required params and arguments&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [[ -z &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;param&lt;/span&gt;-&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; ]] &amp;amp;&amp;amp; die &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Missing required parameter: param&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [[ &lt;span style=&#34;color:#87ceeb&#34;&gt;${#&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;args&lt;/span&gt;[@]&lt;span style=&#34;color:#87ceeb&#34;&gt;}&lt;/span&gt; -eq &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; ]] &amp;amp;&amp;amp; die &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Missing script arguments&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;스크립트에서 파라미터로 만들어야 하는 것이 있다면, 저는 보통 그렇게 합니다.
스크립트가 한 곳에서만 사용되더라도 마찬가지입니다.
이렇게 하면 복사 및 재사용이 쉬워지며, 이 작업은 종종 더 빠릅니다.
또한 하드 코딩이 필요한 부분이 있더라도 일반적으로 Bash 스크립트보다 더 높은 수준입니다.&lt;/p&gt;
&lt;p&gt;플래그(flags), 지정된 파라미터(named parameters, keyword arguments) 및 위치 인자(positional arguments)라는
&lt;a href=&#34;https://betterdev.blog/command-line-arguments-anatomy-explained/&#34;&gt;세 가지 주요 CLI 파라미터 유형&lt;/a&gt;이 있습니다&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.
&lt;code&gt;parse_params()&lt;/code&gt; 함수는 모두 지원합니다.&lt;/p&gt;
&lt;p&gt;여기서 처리되지 않는 유일한 공통 파라미터 패턴은
&lt;a href=&#34;https://betterdev.blog/command-line-arguments-anatomy-explained/#flags_and_named_arguments&#34;&gt;여러 개의 단일 문자 플래그를 연결하는&lt;/a&gt; 것입니다.
&lt;code&gt;-a -b&lt;/code&gt;처럼 두 개의 플래그가 아닌 &lt;code&gt;-ab&lt;/code&gt;로 전달하려면 추가 코드가 필요합니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;while&lt;/code&gt; 루프는 파라미터들을 수동으로 파싱하는 방법입니다.
다른 모든 언어에서는 &lt;a href=&#34;https://docs.python.org/3/library/argparse.html&#34;&gt;내장 파서&lt;/a&gt;
또는 &lt;a href=&#34;https://yargs.js.org/&#34;&gt;사용 가능한 라이브러리&lt;/a&gt;를 사용해야 합니다.
하지만 우리가 사용하려는 것은 Bash입니다.&lt;/p&gt;
&lt;p&gt;템플릿에 플래그(&lt;code&gt;-f&lt;/code&gt;)와 지정된 파라미터(&lt;code&gt;-p&lt;/code&gt;)가 예시로 있습니다.
다른 파라미터를 추가하기 위해서는 변경하거나 복사하기만 하면 됩니다.
그후 잊지 말고 &lt;code&gt;usage()&lt;/code&gt; 함수를 업데이트하세요.&lt;/p&gt;
&lt;p&gt;여기서 중요한 것은 &lt;strong&gt;알 수 없는 옵션에 오류를 던지는 것&lt;/strong&gt;입니다.
Bash 인자 파싱에 대한 Google 검색 결과를 보면 일반적으로 놓치는 것입니다.
스크립트가 알 수 없는 옵션을 받았다는 것은 스크립트가 수행할 수
없는 작업을 사용자는 수행하기를 원했음을 의미합니다.
따라서 사용자의 기대와 스크립트 동작은 상당히 다를 수 있습니다.
좋지 않은 일이 일어나기 전에 실행을 아예 막는 것이 좋습니다.&lt;/p&gt;
&lt;p&gt;Bash에는 파라미터를 파싱하는 두 가지 대안이 있습니다. &lt;code&gt;getopt&lt;/code&gt;와 &lt;code&gt;getopts&lt;/code&gt;입니다.
이 명령어들을 사용하는 것에 대한 &lt;a href=&#34;https://unix.stackexchange.com/questions/62950/getopt-getopts-or-manual-parsing-what-to-use-when-i-want-to-support-both-shor&#34;&gt;찬성과 반대 의견&lt;/a&gt;이 있습니다.
기본적으로 macOS의 &lt;code&gt;getopt&lt;/code&gt;가 &lt;a href=&#34;https://stackoverflow.com/questions/11777695/why-the-getopt-doesnt-work-well-in-my-mac-os&#34;&gt;완전히 다르게 동작&lt;/a&gt;하고,
&lt;code&gt;getopts&lt;/code&gt;가 긴 파라미터(예: &lt;code&gt;--help&lt;/code&gt;)를 지원하지 않기 때문에 이러한 도구가 최선은 아니라는 것을 알게 되었습니다.&lt;/p&gt;
&lt;h1 id=&#34;템플릿-사용하기&#34;&gt;템플릿 사용하기&lt;/h1&gt;
&lt;p&gt;인터넷에서 찾을 수 있는 대부분의 코드처럼 복사-붙여넣기만 하면 됩니다.&lt;/p&gt;
&lt;p&gt;음, 사실은 말하자면요.
Bash를 사용하면 &lt;code&gt;npm install&lt;/code&gt;과 같은 범용 기능이 없습니다.&lt;/p&gt;
&lt;p&gt;복사한 후에는 4가지 항목만 변경하면 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스크립트에 대한 설명이 있는 &lt;code&gt;usage()&lt;/code&gt; 텍스트&lt;/li&gt;
&lt;li&gt;관련 내용 &lt;code&gt;cleanup()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse_params()&lt;/code&gt;의 파라미터 - &lt;code&gt;--help&lt;/code&gt;와 &lt;code&gt;--no-color&lt;/code&gt;는 그대로 두고 예시(&lt;code&gt;-f&lt;/code&gt;, &lt;code&gt;-p&lt;/code&gt;)는 변경하세요.&lt;/li&gt;
&lt;li&gt;실제 스크립트 로직&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;이식성-portability&#34;&gt;이식성 (Portability)&lt;/h1&gt;
&lt;p&gt;MacOS (기본적으로 구식 Bash 3.2)와 몇몇의 Docker 이미지에서 템플릿을 테스트했습니다.
Debian, Ubuntu, CentOS, Amazon Linux, Fedora입니다. 제대로 동작합니다.&lt;/p&gt;
&lt;p&gt;분명히 Alpine Linux와 같은 Bash가 빠진 환경에서는 작동하지 않을 것입니다.
Alpine은 미니멀리즘 시스템으로서 매우 가벼운 ash (Almquist shell)를 사용합니다.&lt;/p&gt;
&lt;p&gt;거의 모든 곳에서 작동하는
&lt;a href=&#34;https://en.wikipedia.org/wiki/Bourne_shell&#34;&gt;본 셸&lt;/a&gt;(Bourne shell, &lt;code&gt;/bin/sh&lt;/code&gt;)
호환 스크립트를 사용하는 것이 좋지 않냐고 질문할 수 있습니다.
적어도 저에게는 그렇지 않습니다.
Bash는 (아직도 사용하기 쉽지 않지만) 더 안전하고 강력하기 때문에
거의 다룰 일 없는 몇 가지 리눅스 배포판을 지원하지 않는 것 정도는 받아들일 수 있습니다.&lt;/p&gt;
&lt;h1 id=&#34;더-읽을-거리&#34;&gt;더 읽을 거리&lt;/h1&gt;
&lt;p&gt;Bash 또는 기타 &lt;del&gt;더 나은&lt;/del&gt; 언어로 CLI 스크립트를 만들 때 몇 가지 범용 규칙이 있습니다.
다음 자료들은 작은 스크립트와 대형 CLI 애플리케이션을 안정적으로 만드는 방법으로 안내합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://clig.dev/&#34;&gt;명령행 인터페이스 가이드라인&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@jdxcode/12-factor-cli-apps-dd3c227a0e46&#34;&gt;12 팩터 CLI 앱&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://betterdev.blog/command-line-arguments-anatomy-explained/&#34;&gt;예시를 들어 설명하는 명령행 인자 구조&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;끝맺음&#34;&gt;끝맺음&lt;/h1&gt;
&lt;p&gt;제가 Bash 스크립트 템플릿을 만든 첫 번째이자 마지막이 아닙니다.
좋은 대안 중 하나는 &lt;a href=&#34;https://github.com/ralish/bash-script-template&#34;&gt;이 프로젝트&lt;/a&gt;입니다.
비록 제가 매일 필요로 하는 것에 비해 조금 크긴 하지만요.
결국 저는 Bash 스크립트를 가능한 한 작게 (그리고 희한하게) 유지하려고 노력합니다.&lt;/p&gt;
&lt;p&gt;Bash 스크립트를 작성할 때 JetBrains IDE와 같이
&lt;a href=&#34;https://github.com/koalaman/shellcheck&#34;&gt;ShellCheck&lt;/a&gt; 린터를 지원하는 IDE를 사용하십시오.
이것은 당신에게 역효과를 줄 수 있는 &lt;a href=&#34;https://github.com/koalaman/shellcheck/blob/master/README.md#user-content-gallery-of-bad-code&#34;&gt;많은 것&lt;/a&gt;들을 하지 못하게 할 것입니다.&lt;/p&gt;
&lt;p&gt;저의 Bash 스크립트 템플릿은 GitHub Gist(MIT 라이센스)처럼 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/m-radzikowski/53e0b39e9a59a1518990e76c2bff8038&#34;&gt;script-template.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;템플릿에 문제가 있거나 중요한 항목이 빠졌다고 생각되면 &lt;a href=&#34;https://betterdev.blog/minimal-safe-bash-script-template/&#34;&gt;코멘트&lt;/a&gt;로 알려 주세요.&lt;/p&gt;
&lt;h2 id=&#34;업데이트-2020-12-15&#34;&gt;업데이트 2020-12-15&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/programming/duplicates/kcxnag/minimal_safe_bash_script_template/&#34;&gt;Reddit&lt;/a&gt;과
&lt;a href=&#34;https://news.ycombinator.com/item?id=25428621&#34;&gt;HackerNews&lt;/a&gt;에서 많은 코멘트를 받은 후
템플릿을 개선했습니다.
개정 이력을 &lt;a href=&#34;https://gist.github.com/m-radzikowski/53e0b39e9a59a1518990e76c2bff8038&#34;&gt;gist&lt;/a&gt;에서 확인하세요.&lt;/p&gt;
&lt;h2 id=&#34;업데이트-2020-12-16&#34;&gt;업데이트 2020-12-16&lt;/h2&gt;
&lt;p&gt;이 게시물에 대한 링크는 &lt;a href=&#34;https://news.ycombinator.com/front?day=2020-12-15&#34;&gt;Hacker News의 첫 페이지(#7)&lt;/a&gt;에 도달했습니다.
상상도 못한 일이었습니다.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://ko.wikipedia.org/wiki/%EC%85%94%EB%B1%85&#34;&gt;셔뱅&lt;/a&gt;이란 해시 기호와 느낌표(&lt;code&gt;#!&lt;/code&gt;)로 이루어진 문자 시퀀스로 인터프리터 지시자(interpreter directive)를 지정합니다. 지정하려는 인터프리터 프로그램은 절대경로로 표시합니다.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;간단히 말하면,
&amp;lsquo;플래그&amp;rsquo;는 &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;를 인자로 받으며 &lt;code&gt;true&lt;/code&gt;일 경우 생략할 수 있습니다.
&amp;lsquo;지정된 파라미터&amp;rsquo;는 파라미터와 함께 특정 값을 인자로 지정해야 합니다.
&amp;lsquo;위치 인자&amp;rsquo;는 인자를 적합한 위치에 지정해야 합니다.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
- https://markruler.github.io/posts/shell/minimal-safe-bash-script-template/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>쿠버네티스 레벨 트리거링 및 조정</title>
        <link>https://markruler.github.io/posts/kubernetes/level-triggering-and-reconciliation/</link>
        <pubDate>Wed, 13 Jan 2021 23:05:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/kubernetes/level-triggering-and-reconciliation/</guid>
        <description>임창수 https://markruler.github.io/posts/kubernetes/level-triggering-and-reconciliation/ -&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;James Bowes(&lt;a href=&#34;https://twitter.com/jrbowes&#34;&gt;@jrbowes&lt;/a&gt;)의 &lt;a href=&#34;https://hackernoon.com/level-triggering-and-reconciliation-in-kubernetes-1f17fe30333d&#34;&gt;Level Triggering and Reconciliation in Kubernetes&lt;/a&gt;를 번역한 글입니다.&lt;/li&gt;
&lt;li&gt;저자의 허락을 받고 번역했습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;


    
    &lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/tCht7FvIDdY?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;
      &gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;h1 id=&#34;시스템-프로그래밍-개념으로-보는-쿠버네티스가-클러스터를-관리하는-방법&#34;&gt;시스템 프로그래밍 개념으로 보는 쿠버네티스가 클러스터를 관리하는 방법&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/&#34;&gt;쿠버네티스&lt;/a&gt;는 현재
&lt;a href=&#34;https://techcrunch.com/2017/12/18/as-kubernetes-surged-in-popularity-in-2017-it-created-a-vibrant-ecosystem/&#34;&gt;가장 있기 있는&lt;/a&gt;
컨테이너 오케스트레이터입니다. 이런 성공의 밑받침은 신뢰성입니다. 모든
소프트웨어에는 버그가 있죠. 그러나 컨테이너를 실행하는 데 있어서 쿠버네티스는
다른 소프트웨어보다 버그가 적습니다.&lt;/p&gt;
&lt;p&gt;쿠버네티스는 원하는 수의 컨테이너를 제때에 실행합니다.
그리고 그 숫자를 계속해서 유지하죠.
&lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/&#34;&gt;공식 문서&lt;/a&gt;에
따르면 쿠버네티스가 &lt;strong&gt;자가 치유(self-healing)&lt;/strong&gt; 하는 것이라고 말합니다.
이런 동작 방식은 쿠버네티스 설계의 핵심 철학에서 비롯됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;제어 루프(control loop)의 목표 탐색 행위는 매우 안정적입니다.
이것은 쿠버네티스에서 입증되었죠.
근본적으로는 제어 루프가 안정적이고 시간이 지나면 알아서 교정하기 때문에
버그가 있어도 알아챌 수 없었거든요.&lt;br&gt;
&lt;br&gt;
에지 트리거링은 상태를 망가뜨리고 다시 원상태를 생성하지 못하게 할 위험이 있습니다.
레벨 트리거링은 굉장히 포용적이고, 교정되어야 할 컴포넌트가 그렇지
못할 경우 다시 교정될 수 있도록 여지를 줍니다. 이것이 쿠버네티스가 잘 동작하는 이유입니다.&amp;rdquo;&lt;br&gt;
&lt;br&gt;
― Joe Beda&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, Heptio CTO (&lt;a href=&#34;http://shop.oreilly.com/product/0636920075837.do&#34;&gt;Cloud Native Infrastructure&lt;/a&gt;에서 발췌)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;잠깐: 다음은 동일한 신호에 대한 에지 및 레벨 트리거링입니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/kubernetes/edge-and-level-triggering-for-the-same-signal.png&#34; alt=&#34;edge-and-level-triggering-for-the-same-signal&#34;&gt;&lt;/p&gt;
&lt;p&gt;에지 및 레벨 트리거링은 전자 공학 및 &lt;a href=&#34;https://en.wikipedia.org/wiki/Interrupt#Types_of_interrupts&#34;&gt;시스템 프로그래밍&lt;/a&gt;에서 나온 개념입니다.
이것은 시스템이 시간에 따라 전기 신호(또는 디지털 논리) 형태에
어떻게 반응해야 하는지를 나타냅니다. 시스템은 신호가 로우(low)에서 하이(high)로,
하이에서 로우로 &lt;strong&gt;바뀔 때&lt;/strong&gt; 신경써야 할까요, 아니면 하이에
&lt;strong&gt;있는 지 여부&lt;/strong&gt;에 신경써야 할까요?&lt;/p&gt;
&lt;p&gt;아래처럼 간단한 덧셈 연산을 통해 설명해보겠습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; &lt;span style=&#34;color:#f00&#34;&gt;let&lt;/span&gt; a = &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; a += &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt; &lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;에지 트리거링 관점에서 위 연산은 다음과 같습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; to a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;더하는 순간 한 번 발생합니다.&lt;/p&gt;
&lt;p&gt;레벨 트리거링 관점에서는 다음과 같습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a is &lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;더할 때부터 다음 이벤트가 발생할 때까지 계속 이러한 상태가 유지됩니다.&lt;/p&gt;
&lt;h2 id=&#34;분산-시스템에서-에지-트리거링과-레벨-트리거링&#34;&gt;분산 시스템에서 에지 트리거링과 레벨 트리거링&lt;/h2&gt;
&lt;p&gt;추상적으로는 에지 트리거링과 레벨 트리거링 사이에 명확한 차이가 없습니다.
하지만 현실에서는 시스템 프로그래밍 수준에서도 실질적인 한계에 대처해야 합니다.
흔히 만날 수 있는 한계는 &lt;a href=&#34;https://en.wikipedia.org/wiki/Sampling_%28signal_processing%29#Sampling_rate&#34;&gt;샘플링 레이트(sampling rate)&lt;/a&gt;입니다.
시스템이 신호를 충분히 자주 샘플링하지 않으면 에지 트리거링에서 신호가 변할 때나
레벨 트리거링에서 짧은 변화가 일어났을 때 신호를 놓칠 수 있습니다.&lt;/p&gt;
&lt;p&gt;대규모 컴퓨팅, 대규모 네트워킹에서는 다루어야 할
&lt;a href=&#34;https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing&#34;&gt;문제들이 더 많습니다&lt;/a&gt;.
&lt;a href=&#34;http://www.cbc.ca/news/canada/nova-scotia/cellular-service-outage-bell-mobility-tellus-1.4235624&#34;&gt;네트워크&lt;/a&gt;는 신뢰할 수 없고요.
사람들은 &lt;a href=&#34;https://hothardware.com/news/dont-trip-over-the-power-cord-human-error-caused-massive-time-warner-network-outage&#34;&gt;실수를 저지릅니다&lt;/a&gt;.
다람쥐는 &lt;a href=&#34;http://cybersquirrel1.com/&#34;&gt;말을 듣지 않고요&lt;/a&gt;.
어떤 면에선 이러한 문제들은 정확하지 않거나 일관되지 않은 샘플링 레이트와 같습니다.
신호를 보는 우리의 시야를 가리거든요.&lt;/p&gt;
&lt;h1 id=&#34;신호-교란이-관측-결과를-바꿉니다&#34;&gt;신호 교란이 관측 결과를 바꿉니다&lt;/h1&gt;
&lt;p&gt;에지 및 레벨 트리거 시스템에서 신호 교란이 관측 결과에
어떤 영향을 미치는지 살펴보겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;이상적인-상황&#34;&gt;이상적인 상황&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/kubernetes/ideal-conditions.png&#34; alt=&#34;ideal-conditions&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;에지 및 레벨 트리거 시스템이 신호를 해석하는 방식입니다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;이상적인 상황에서는 에지 트리거 시스템과 레벨 트리거 시스템 모두 신호를 올바르게
관측할 수 있습니다. 신호가 사라진 직후 둘 다 신호가 사라졌다고 관측합니다.&lt;/p&gt;
&lt;h2 id=&#34;두-번의-신호-교란&#34;&gt;두 번의 신호 교란&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/kubernetes/two-disruptions.png&#34; alt=&#34;two-disruptions&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;상승 및 하강에 신호 교란이 발생하면 에지 트리거 시스템에서 상승 신호가 손실되지만 마지막에는 올바른 상태가 됩니다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;신호가 변할 때 두 번 발생된 신호 교란을 보면 에지 및 레벨 트리거 시스템 간의 차이가
분명해집니다. 에지 트리거 관점에서는 첫 번째 상승을 놓칩니다. 레벨 트리거 시스템은
신호가 다르게 보일 때까지 마지막으로 관측된 상태라고 가정합니다. 이는 대부분의 관측
신호가 정확하지만 신호 교란이 사라질 때까지는 그렇지 않습니다.&lt;/p&gt;
&lt;h2 id=&#34;한-번의-장애&#34;&gt;한 번의 장애&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/kubernetes/one-disruption.png&#34; alt=&#34;one-disruptions&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;에지 트리거 시스템에서는 신호 교란 하나가 중요한 곳에 생기면 큰 영향이 미칠 수 있습니다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;신호 교란이 적다고 해서 항상 더 나은 결과를 낳는 것은 아닙니다. 신호 교란 한번으로
하강하는 신호가 가려지면 레벨 트리거 시스템은 대부분 다시 교정하지만,
에지 트리거 시스템은 두 번의 상승만 볼 수 있기 때문에 본래의 신호를 잃어버립니다.&lt;/p&gt;
&lt;p&gt;다시 덧셈 연산으로 레벨 트리거 시스템의 신호를 나타내면 다음과 같습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; &lt;span style=&#34;color:#f00&#34;&gt;let&lt;/span&gt; a = &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; a += &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; a -= &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; a += &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그러나 에지 트리거 시스템에서는 아래와 같이 관측됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; &lt;span style=&#34;color:#f00&#34;&gt;let&lt;/span&gt; a = &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; a += &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; a += &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;희망-상태와-실제-상태-조정하기&#34;&gt;희망 상태와 실제 상태 조정하기&lt;/h1&gt;
&lt;p&gt;쿠버네티스는 하나의 신호만 관측하지 않고 &lt;strong&gt;희망하는(desired)&lt;/strong&gt; 클러스터
상태와 &lt;strong&gt;실제(actual)&lt;/strong&gt; 클러스터 상태 두 가지를 관측합니다.
희망 상태는 클러스터를 사용하는 사람이 바라는 상태를 말합니다.
(&lt;em&gt;&amp;ldquo;애플리케이션 컨테이너 인스턴스를 두 개 실행해주세요&amp;rdquo;&lt;/em&gt;)
실제 상태와 희망 상태는 가능하면 일치해야 하지만 수많은 하드웨어 오류와
유해 프로그램의 영향을 받기 쉽습니다. 희망 상태와 멀어지게 만들 수 있죠.
실제 상태가 희망 상태와 즉시 일치할 수는 없기 때문에 시간조차도 하나의
요인입니다. 예를 들면 레지스트리에서 컨테이너 이미지를 다운로드하고
애플리케이션을 정상적으로 종료하려면 시간이 필요합니다.&lt;/p&gt;
&lt;p&gt;쿠버네티스는 실제 상태를 희망 상태로 &lt;strong&gt;조정(reconcile)&lt;/strong&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;해야 합니다.
계속 반복해서 두 상태를 가져오고, 차이나는 부분을 가려내고,
실제 상태를 희망 상태로 만들기 위해 어떤 변경이든 적용합니다.&lt;/p&gt;
&lt;h2 id=&#34;쿠버네티스-디플로이먼트-스케일링&#34;&gt;쿠버네티스 디플로이먼트 스케일링&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/kubernetes/scaling-a-deployment-in-kubernetes.png&#34; alt=&#34;scaling-a-deployment-in-kubernetes&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;에지 트리거 시스템에서는 원하는 결과와 크게 달라질 수 있습니다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;신호 교란이 없더라도 에지 트리거 시스템은 두 상태를
조정하려고 하기 때문에 잘못된 결과를 초래할 수 있습니다.&lt;/p&gt;
&lt;p&gt;단일 컨테이너 레플리카로 시작해서 5개의 레플리카로 확장한 후
2개의 레플리카로 축소하려는 경우,
에지 트리거 시스템은 희망 상태를 아래와 같이 관측합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; &lt;span style=&#34;color:#f00&#34;&gt;let&lt;/span&gt; replicas = &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; replicas += &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; replicas -= &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;시스템의 실제 상태는 이러한 명령에 즉시 반응할 수 없습니다.
위 다이어그램처럼 실행 중인 레플리카가 3개만 있을 때 3개의 레플리카를
종료할 수도 있습니다. 그럼 레플리카가 하나도 안 남겠죠.&lt;/p&gt;
&lt;p&gt;레벨 트리거 시스템에서는 항상 희망 상태와 실제 상태 전체를 비교합니다.
이렇게 하면 상태 동기화 실패(state desynchronization) 버그가 발생할 가능성이 줄어듭니다.&lt;/p&gt;
&lt;h1 id=&#34;안정적으로-만들기&#34;&gt;안정적으로 만들기&lt;/h1&gt;
&lt;p&gt;본질적으로 에지 트리거링이 안 좋은 것은 아닙니다.
레벨 트리거링에 비해 이점도 있습니다.
에지 트리거링은 신호가 변경되었을 때 변경된 부분만 전달합니다.&lt;/p&gt;
&lt;p&gt;신호 교란과 관련된 에지 트리거 시스템의 문제를 줄일 수도 있습니다.
흔히 레벨 트리거 시스템이 동작하는 것처럼 전체 상태를 주기적으로
조정하면서 해결합니다. 명확한 이벤트 순서와 버전 관리를 통해
신호 교란을 줄일 수도 있습니다.&lt;/p&gt;
&lt;p&gt;분산 컴퓨팅 고유의 문제에도 불구하고 쿠버네티스는 위 문제를
레벨 트리거 시스템 관점으로 바라봄으로써 간명하고
사용자가 원하는 것을 수행하는 아키텍처가 되었습니다.&lt;/p&gt;
&lt;p&gt;이 글에 포함된 다이어그램을 그려준 &lt;a href=&#34;https://medium.com/@megthesmith&#34;&gt;Meg Smith&lt;/a&gt;에게 특별히 감사드립니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;역주: 쿠버네티스의 조정(Reconciliation)과 관련하여 &lt;a href=&#34;https://kubernetes.io/docs/concepts/architecture/controller/&#34;&gt;컨트롤러 패턴&lt;/a&gt;,
파드 실행 흐름 등을 같이 익히는 것이 좋다고 생각합니다. 조 베다(Joe Beda)가 작성한 &lt;a href=&#34;https://blog.heptio.com/core-kubernetes-jazz-improv-over-orchestration-a7903ea92ca&#34;&gt;좋은 글&lt;/a&gt;이 있습니다.
&lt;a href=&#34;http://book.naver.com/bookdb/book_detail.nhn?bid=16320585&#34;&gt;책 &amp;lt;쿠버네티스 패턴&amp;gt;&lt;/a&gt;도 좋았습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/kubernetes/typical-flow-scheduling-pod.png&#34; alt=&#34;typical-flow-scheduling-pod&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;출처: Core Kubernetes: Jazz Improv over Orchestration - Joe Beda&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;쿠버네티스 창시자 중 한 명&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;조정(reconciliation)이란 실제 클러스터 상태를 사용자가 정의한 상태로 제어하는 것을 말합니다. 이에 대한 자세한 내용은
&lt;a href=&#34;https://github.com/kubernetes-sigs/controller-runtime/blob/v0.7.0/pkg/reconcile/reconcile.go#L53-L87&#34;&gt;소스 코드에 달린 주석&lt;/a&gt;을 읽어보세요.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
- https://markruler.github.io/posts/kubernetes/level-triggering-and-reconciliation/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>CS Visualized: 유용한 깃(Git) 명령어</title>
        <link>https://markruler.github.io/posts/shell/cs-visualized-useful-git-commands/</link>
        <pubDate>Sat, 09 Jan 2021 08:35:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/shell/cs-visualized-useful-git-commands/</guid>
        <description>임창수 https://markruler.github.io/posts/shell/cs-visualized-useful-git-commands/ -&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;리디아 할리(Lydia Hallie, &lt;a href=&#34;https://twitter.com/lydiahallie&#34;&gt;@lydiahallie&lt;/a&gt;)가 쓴 &lt;a href=&#34;https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1&#34;&gt;CS Visualized: Useful Git Commands&lt;/a&gt;를 번역한 글입니다.&lt;/li&gt;
&lt;li&gt;저자의 허락을 받고 번역했습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Git이 정말 강력한 도구이긴 하지만, 대다수의 사람들은 끔찍한 악몽 😐
같다는 말도 공감할 거에요. 저는 항상 Git으로 작업할 때 어떤 일이 일어날지
머릿속으로 그려보는 것이 꽤 유용하다는 것을 알았습니다. 특정 명령을 실행할
때 브랜치는 어떻게 상호작용하고, 그것이 히스토리에 어떤 영향을 미칠까요?
&lt;code&gt;master&lt;/code&gt;에서 &lt;code&gt;reset --hard&lt;/code&gt; 하고 &lt;code&gt;origin&lt;/code&gt; 리포지터리로 &lt;code&gt;force push&lt;/code&gt;한 후,
&lt;code&gt;.git&lt;/code&gt; 폴더를 &lt;code&gt;rimraf&lt;/code&gt;하면 왜 저의 팀원은 소리를 지를까요?&lt;/p&gt;
&lt;p&gt;* &lt;code&gt;rimraf&lt;/code&gt; == &lt;code&gt;rm -rf&lt;/code&gt;: 묻지도 따지지도 않고 전부 지워버린다.&lt;/p&gt;
&lt;p&gt;저는 가장 많이 쓰이면서 유용한 명령어들을 시각화하는 것이 완벽한 유즈 케이스라고 생각했습니다! 🥳
명령어들은 동작(behavior)을 바꾸기 위해 사용할 수 있는 전달 인자들(arguments)이 있지만,
제가 다룰 예시에서는 (수많은) 설정 옵션 없이 명령어의 기본 동작에 대해서만 설명하겠습니다. 😄&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;병합-merge&#34;&gt;병합 (Merge)&lt;/h1&gt;
&lt;p&gt;브랜치가 여러 개 있으면 새로운 변경 사항들을 분리해서 관리하기 편합니다.
승인되지 않았거나 잘못된 변경 사항을 실수로 운영 환경에 푸시하지
않도록 하는 데에도 편합니다. 변경 사항이 승인됐다면 운영 환경
브랜치에 적용해야 하죠!&lt;/p&gt;
&lt;p&gt;한 브랜치에서 다른 브랜치로 변경 사항을 옮기는 한 가지 방법은
&lt;code&gt;git merge&lt;/code&gt;를 실행하는 것입니다! Git이 수행할 수 있는 병합에는
&lt;strong&gt;fast-forward&lt;/strong&gt;, &lt;strong&gt;no-fast-forward&lt;/strong&gt;라는 두 가지 유형이 있습니다. 🐢&lt;/p&gt;
&lt;p&gt;지금 당장은 무슨 말인지 이해되지 않으실테니 차이점을 살펴보도록 하겠습니다!&lt;/p&gt;
&lt;h2 id=&#34;fast-forward---ff&#34;&gt;Fast-forward (&lt;code&gt;--ff&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;fast-forward 병합&lt;/strong&gt;은 현재 브랜치에 병합하려는 브랜치에 비해 추가
커밋이 없을 때 발생할 수 있습니다. Git은&amp;hellip; &lt;em&gt;게을러서&lt;/em&gt; 가장 쉬운
옵션인 fast-forward부터 시도하려 할 것입니다! 이 방식은 새로운
커밋을 생성하지 않고 병합하려는 브랜치의 커밋을 그대로 병합합니다. 🥳&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/merge-ff.gif&#34; alt=&#34;merge-ff&#34;&gt;&lt;/p&gt;
&lt;p&gt;Perfect! 우리는 이제 &lt;code&gt;dev&lt;/code&gt; 브랜치에서 만든 모든 변경 사항들을
&lt;code&gt;master&lt;/code&gt; 브랜치에서도 접근할 수 있게 되었습니다. 그럼
&lt;strong&gt;no-fast-forward&lt;/strong&gt;는 뭘까요?&lt;/p&gt;
&lt;h2 id=&#34;no-fast-foward---no-ff&#34;&gt;No-fast-foward (&lt;code&gt;--no-ff&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;병합하려는 브랜치와 비교해 현재 브랜치에 추가 커밋이 없는 경우가 좋겠지만
안타깝게도 그런 경우는 거의 없습니다! 병합할 브랜치에 없는 변경 사항을 현재 브랜치에 커밋한 경우
Git은 &lt;em&gt;no-fast-forward&lt;/em&gt; 병합을 수행합니다.&lt;/p&gt;
&lt;p&gt;Git은 no-fast-forward을 사용해 현재 브랜치에 새로운 &lt;em&gt;병합 커밋&lt;/em&gt;을 생성합니다.
상위 커밋은 현재 브랜치와 병합하려는 브랜치 모두를 가리킵니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/merge-no-ff.gif&#34; alt=&#34;merge-no-ff&#34;&gt;&lt;/p&gt;
&lt;p&gt;별 거 아니지만 완벽해요! 🎉
이제 &lt;code&gt;master&lt;/code&gt; 브랜치는 &lt;code&gt;dev&lt;/code&gt; 브랜치에서 변경한 내용을 모두 포함합니다.&lt;/p&gt;
&lt;h2 id=&#34;병합-충돌-merge-conflicts&#34;&gt;병합 충돌 (Merge conflicts)&lt;/h2&gt;
&lt;p&gt;어떻게 브랜치를 병합하고 파일에 변경 사항을 추가할지 Git이 잘 결정할테지만,
Git이 항상 혼자 결정할 수는 없습니다. 🙂 병합하려는 두 개의 브랜치가 똑같은
파일, 똑같은 줄에 변경 사항이 있거나 한 브랜치가 다른 브랜치에서 변경한 파일을
삭제하는 경우 등의 문제가 발생할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이런 경우 Git이 두 가지 중 어떤 내용을 유지하고 싶은지 물어볼 것입니다!
두 브랜치 모두에서 &lt;code&gt;README.md&lt;/code&gt;의 첫번째 줄을 편집했다고 가정해 보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/readme.png&#34; alt=&#34;readme&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dev&lt;/code&gt;를 &lt;code&gt;master&lt;/code&gt;로 병합하려는 경우 병합 충돌이 발생합니다.
그럼 제목을 &lt;code&gt;Hello!&lt;/code&gt; 또는 &lt;code&gt;Hey!&lt;/code&gt; 중 어떤 걸로 지정하실래요?&lt;/p&gt;
&lt;p&gt;브랜치를 병합하려고 하면 Git은 충돌이 발생한 위치를 보여줄 겁니다.
버리고 싶은 변경 사항을 수동으로 제거하고 저장한 후,
변경된 파일을 다시 추가하면 커밋할 수 있게 됩니다. 🥳&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/merge-conflict.gif&#34; alt=&#34;merge-conflict&#34;&gt;&lt;/p&gt;
&lt;p&gt;Yay! 병합 충돌은 정말 번거롭지만 꼭 필요한 과정입니다.
Git은 단순히 우리가 유지하고자 하는 변경 사항을 &lt;em&gt;가정&lt;/em&gt;해서는 안 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;리베이스-rebase&#34;&gt;리베이스 (Rebase)&lt;/h1&gt;
&lt;p&gt;방금 &lt;code&gt;git merge&lt;/code&gt;를 수행하여 한 브랜치에서 다른 브랜치로 변경 사항을 적용하는 방법을
보았습니다. 여기에 또 한 가지 방법이 있는데 바로 &lt;code&gt;git rebase&lt;/code&gt;입니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git rebase&lt;/code&gt;는 현재 브랜치에서 커밋을 복사하고 복사된 커밋을 지정한 브랜치 맨 위에 놓습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/rebase.gif&#34; alt=&#34;rebase&#34;&gt;&lt;/p&gt;
&lt;p&gt;Perfect! 이제 &lt;code&gt;master&lt;/code&gt; 브랜치의 모든 변경 사항을 &lt;code&gt;dev&lt;/code&gt; 브랜치에서도 사용할 수 있게 되었습니다! 🎊&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git merge&lt;/code&gt;와 비교할 때 큰 차이점은 Git이 유지할 파일과 유지하지 않을 파일을 물어보지
않았는다는 거에요. 리베이스 하는 브랜치에는 항상 최근 변경 사항이 적용됩니다!
이러한 방식으로 병합 충돌은 발생하지 않고 Git 히스토리를 선형으로 유지하죠.&lt;/p&gt;
&lt;p&gt;이 예에서는 &lt;code&gt;master&lt;/code&gt; 브랜치에 대한 리베이스를 보여 줍니다.
그러나 더 큰 프로젝트에서는 대개 이렇게 하고 싶지 않을 거에요.
&lt;code&gt;git rebase&lt;/code&gt;는 복사된 커밋의 해시가 새로 생성될 때
&lt;strong&gt;프로젝트 히스토리를 변형시킵니다&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;리베이스는 &lt;code&gt;feature&lt;/code&gt; 브랜치에서 작업할 때나 &lt;code&gt;master&lt;/code&gt; 브랜치가 업데이트될 때 유용합니다.
브랜치에서 모든 업데이트를 받을 수 있으므로 이후 병합 충돌을 방지할 수 있거든요! 😄&lt;/p&gt;
&lt;h2 id=&#34;대화형-리베이스--i-interactive-rebase&#34;&gt;대화형 리베이스 (&lt;code&gt;-i&lt;/code&gt; interactive rebase)&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;대화형 리베이스&lt;/em&gt;를 사용하면 커밋을 리베이스 하기 전에 변형시킬 수도 있어요! 😃
대화형 리베이스는 현재 작업 중인 브랜치에서 일부 커밋을 수정하고 싶은 경우 유용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;리베이스 작업중인 커밋에 대해 수행할 수 있는 명령어는 6가지가 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reword&lt;/code&gt;: 커밋 메시지 수정&lt;/li&gt;
&lt;li&gt;&lt;code&gt;edit&lt;/code&gt;: 커밋 수정&lt;/li&gt;
&lt;li&gt;&lt;code&gt;squash&lt;/code&gt;: 이전 커밋과 혼합&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fixup&lt;/code&gt;: 커밋 로그 메시지를 유지하지 않고 이전 커밋과 혼합&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec&lt;/code&gt;: 리베이스하려는 커밋마다 명령어 실행&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drop&lt;/code&gt;: 커밋 삭제&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Awesome! 이 명령어들을 사용해 커밋을 완전히 제어할 수 있습니다.
만약 커밋을 지우고 싶다면 그냥 &lt;code&gt;drop&lt;/code&gt;하세요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/rebase-drop.gif&#34; alt=&#34;rebase-drop&#34;&gt;&lt;/p&gt;
&lt;p&gt;만약 깨끗한 히스토리를 유지하고 싶다면 여러 커밋들을 &lt;code&gt;squash&lt;/code&gt;하시면 됩니다. 문제 없어요!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/rebase-squash.gif&#34; alt=&#34;rebase-squash&#34;&gt;&lt;/p&gt;
&lt;p&gt;대화형 리베이스는 커밋을 제어하는 다양한 방법을 제공합니다.
현재 작업 중인 브랜치라도 말이죠!&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;리셋-reset&#34;&gt;리셋 (Reset)&lt;/h1&gt;
&lt;p&gt;나중에 원치 않는 변경 사항을 커밋할 수도 있습니다.
&lt;code&gt;WIP&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 커밋이거나 버그가 발견된 커밋일 수도 있죠! 🐛
그런 경우에 &lt;code&gt;git reset&lt;/code&gt; 명령어를 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git reset&lt;/code&gt;은 스테이징&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;된 파일을 제거하거나
&lt;code&gt;HEAD&lt;/code&gt;가 가리키는 곳을 제어할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;소프트-리셋---soft&#34;&gt;소프트 리셋 (&lt;code&gt;--soft&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;소프트 리셋&lt;/em&gt;은 &lt;code&gt;HEAD&lt;/code&gt;를 지정된 커밋으로 옮기거나 해당 커밋의 인덱스를 &lt;code&gt;HEAD&lt;/code&gt;와 비교합니다.
나중에 커밋된 변경 사항들을 제거하지 않고서 말이죠!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;style.css&lt;/code&gt; 파일을 추가한 &lt;code&gt;9e78i&lt;/code&gt; 커밋과
&lt;code&gt;index.js&lt;/code&gt; 파일을 추가한 &lt;code&gt;035cc&lt;/code&gt; 커밋을 유지하고 싶지 않다고 가정해 보겠습니다.
하지만 새로 추가된 &lt;code&gt;style.css&lt;/code&gt;와 &lt;code&gt;index.js&lt;/code&gt; 파일은 유지하고 싶어요!
그럼 소프트 리셋을 위한 완벽한 유즈 케이스입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/reset-soft.gif&#34; alt=&#34;reset-soft&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;를 입력하면 아직 이전 커밋에서 변경한 모든 내용에 접근할 수 있다는 것을 알 수 있습니다.
이렇게 파일의 내용을 변경하고 또 다시 커밋할 수 있으니 좋은 방법입니다!&lt;/p&gt;
&lt;h2 id=&#34;하드-리셋---hard&#34;&gt;하드 리셋 (&lt;code&gt;--hard&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;때로는 특정 커밋에 의해 반영된 변경 사항을 유지하고 싶지 않을 겁니다.
그럼 소프트 리셋과 달리 더 이상 변경 사항에 접근할 필요가 없겠죠.
Git은 지정된 커밋의 상태로 간단하게 리셋합니다.
여기에는 워킹 디렉토리와 스테이징된 파일의 변경 사항도 포함됩니다! 💣&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/reset-hard.gif&#34; alt=&#34;reset-hard&#34;&gt;&lt;/p&gt;
&lt;p&gt;Git은 &lt;code&gt;9e78i&lt;/code&gt;와 &lt;code&gt;035cc&lt;/code&gt; 커밋에 반영된 변경 사항을 버리고
&lt;code&gt;ec5be&lt;/code&gt;커밋으로 다시 상태를 리셋했습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;리버트-revert&#34;&gt;리버트 (Revert)&lt;/h1&gt;
&lt;p&gt;변경 사항을 되돌리는 또 다른 방법은 &lt;code&gt;git revert&lt;/code&gt; 하는 것입니다.
특정 커밋을 리버트하면 &lt;em&gt;새로운 커밋&lt;/em&gt;이 생성되고 여기에는 리버트된 변경 사항이 포함됩니다!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ec5be&lt;/code&gt; 커밋으로 &lt;code&gt;index.js&lt;/code&gt; 파일이 추가됐다고 가정해 보겠습니다.
그리고 나중에서야 이 변경 사항이 더 이상 필요없다는 것을 느끼죠!
이제 &lt;code&gt;ec5be&lt;/code&gt; 커밋을 되돌려보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/revert.gif&#34; alt=&#34;revert&#34;&gt;&lt;/p&gt;
&lt;p&gt;Perfect! &lt;code&gt;9e78i&lt;/code&gt; 커밋은 &lt;code&gt;ec5be&lt;/code&gt; 커밋에 반영된 변경 사항을 제거했습니다.
&lt;code&gt;git revert&lt;/code&gt;를 실행하면 브랜치의 히스토리를 수정하지 않고 특정 커밋을 되돌릴 수 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;체리-피킹-cherry-pick&#34;&gt;체리 피킹 (Cherry-pick)&lt;/h1&gt;
&lt;p&gt;특정 브랜치에 우리에게 필요한 변경 사항을 가진 커밋이 있다면,
&lt;code&gt;cherry-pick&lt;/code&gt; 명령어를 사용할 수 있습니다! 커밋을 &lt;code&gt;cherry-pick&lt;/code&gt;하면
&lt;code&gt;cherry-pick&lt;/code&gt; 커밋에 담긴 변경 사항을 포함해 현재 브랜치에 새로운 커밋을 만듭니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dev&lt;/code&gt; 브랜치의 &lt;code&gt;76d12&lt;/code&gt; 커밋이 &lt;code&gt;master&lt;/code&gt; 브랜치에서 원하는 변경 사항을
&lt;code&gt;index.js&lt;/code&gt; 파일에 추가했다고 가정해 보세요. 그럼 &lt;em&gt;다른 커밋&lt;/em&gt;들은 필요없고
단 한 가지 커밋만 있으면 됩니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/cherry-pick.gif&#34; alt=&#34;cherry-pick&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;페치-fetch&#34;&gt;페치 (Fetch)&lt;/h1&gt;
&lt;p&gt;현재 브랜치에 없는 커밋이 원격 브랜치에 생길 수 있습니다!
예를 들어 다른 브랜치가 병합된다거나 동료가 빠르게 변경 사항을 푸시하는 경우 등이 있죠.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git fetch&lt;/code&gt;를 실행해서 원격 브랜치의 변경 사항을 로컬로 가져올 수 있습니다!
&lt;code&gt;fetch&lt;/code&gt;는 단순히 새로운 데이터를 다운로드 하는 것일 뿐이지, 로컬 브랜치에 영향을 끼치지는
않습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/git-fetch.gif&#34; alt=&#34;git-fetch&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;풀-pull&#34;&gt;풀 (Pull)&lt;/h1&gt;
&lt;p&gt;브랜치의 원격 데이터를 가져오기 위해서는 &lt;code&gt;git fetch&lt;/code&gt;도 유용하지만 &lt;code&gt;git pull&lt;/code&gt;도 좋습니다.
&lt;code&gt;git pull&lt;/code&gt;은 &lt;code&gt;git fetch&lt;/code&gt;와 &lt;code&gt;git merge&lt;/code&gt; 두 가지 명령을 합친 것입니다.
&lt;code&gt;origin&lt;/code&gt; 저장소에서 변경 사항을 풀(pull)할 때 먼저 &lt;code&gt;git fetch&lt;/code&gt; 명령처럼
모든 데이터를 가져온 후 최신 변경 사항을 자동으로 로컬 브랜치에 병합합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/git-pull.gif&#34; alt=&#34;git-pull&#34;&gt;&lt;/p&gt;
&lt;p&gt;Awesome! 이제 원격 브랜치와 완전히 동기화되었고 최신 변경 사항이 모두 반영되었습니다! 🤩&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;레프-로그-reflog&#34;&gt;레프-로그 (Reflog)&lt;/h1&gt;
&lt;p&gt;모든 사람은 실수를 합니다. 지극히 정상이에요!
때로는 Git 저장소를 망쳐버려서 완전히 삭제하고 싶은 충동을 느낄 수도 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git reflog&lt;/code&gt;는 실행된 작업 로그를 모두 표시하는 데 정말 유용한 명령입니다!
여기에는 병합, 리셋, 리버트 등 기본적으로 브랜치에 대한 모든 변경 사항이 포함됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/git-reflog.gif&#34; alt=&#34;git-reflog&#34;&gt;&lt;/p&gt;
&lt;p&gt;실수를 했다면 &lt;code&gt;reflog&lt;/code&gt;가 주는 정보를 바탕으로 &lt;code&gt;HEAD&lt;/code&gt;를 리셋해서 쉽게 되돌릴 수 있습니다!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;origin&lt;/code&gt; 저장소의 브랜치를 병합하지 않고 싶다고 가정해보세요.
&lt;code&gt;git reflog&lt;/code&gt; 명령어를 실행하면 병합 전의 저장소 상태가 &lt;code&gt;HEAD@{1}&lt;/code&gt;로 표시됩니다.
&lt;code&gt;git reset&lt;/code&gt;을 수행하여 헤드가 &lt;code&gt;head@{1}&lt;/code&gt;으로 돌아가도록 합니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/shell/lydia/reset-reflog.gif&#34; alt=&#34;reset-reflog&#34;&gt;&lt;/p&gt;
&lt;p&gt;리셋 명령으로 &lt;code&gt;reflog&lt;/code&gt;가 밀린 것을 볼 수 있습니다!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Git에는 유용한 포셀린(porcelain) 명령어와 플러밍(plumbing) 명령어&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;가 너무
많아서 모두 다룰 수 있었으면 좋겠어요! 😄 다른 명령어나 대안들이 많아서 미처
다룰 시간이 없었다는 것을 이해해주세요. 좋아하는 명령어나 가장 유용한 명령어가
무엇인지 알려주시면 제가 다른 글에서 다룰 수도 있습니다!&lt;/p&gt;
&lt;p&gt;그리고 언제나 그랬듯이 저(Lydia Hallie)와 소통해요! 😊&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;✨&lt;/th&gt;
          &lt;th&gt;👩🏽‍💻&lt;/th&gt;
          &lt;th&gt;💻&lt;/th&gt;
          &lt;th&gt;💡&lt;/th&gt;
          &lt;th&gt;📷&lt;/th&gt;
          &lt;th&gt;💌&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.twitter.com/lydiahallie&#34;&gt;Twitter&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.instagram.com/theavocoder&#34;&gt;Instagram&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.github.com/lydiahallie&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.linkedin.com/in/lydia-hallie&#34;&gt;LinkedIn&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/channel/UC4EWKIKdKiDtAscQ9BIXwUw&#34;&gt;YouTube&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;mailto:lydiahallie.dev@gmail.com&#34;&gt;Email&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;WIP (Work in Progress): 진행 중인 작업&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;현재 작업 중인 &amp;ldquo;working directory&amp;quot;를 &lt;code&gt;git add&lt;/code&gt; 하면 &amp;ldquo;staging area&amp;quot;로 옮겨진다. 그 후 &lt;code&gt;git commit&lt;/code&gt;을 하면 &amp;ldquo;local repository&amp;quot;로 옮겨진다. 여기서 &lt;code&gt;git push&lt;/code&gt;를 명령할 경우 마침내 &amp;ldquo;remote repository&amp;quot;로 간다.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/book/ko/v2/Git%EC%9D%98-%EB%82%B4%EB%B6%80-Plumbing-%EB%AA%85%EB%A0%B9%EA%B3%BC-Porcelain-%EB%AA%85%EB%A0%B9&#34;&gt;저수준의 명령어는 &amp;ldquo;Plumbing&amp;rdquo; 명령어라고 부르고 좀 더 사용자에게 친숙한 사용자용 명령어는 &amp;ldquo;Porcelain&amp;rdquo; 명령어라고 부른다.&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
- https://markruler.github.io/posts/shell/cs-visualized-useful-git-commands/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>CS Visualized: CORS</title>
        <link>https://markruler.github.io/posts/web/cs-visualized-cors/</link>
        <pubDate>Sat, 02 Jan 2021 08:50:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/web/cs-visualized-cors/</guid>
        <description>임창수 https://markruler.github.io/posts/web/cs-visualized-cors/ -&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;리디아 할리(Lydia Hallie, &lt;a href=&#34;https://twitter.com/lydiahallie&#34;&gt;@lydiahallie&lt;/a&gt;)가 쓴 &lt;a href=&#34;https://dev.to/lydiahallie/cs-visualized-cors-5b8h&#34;&gt;CS Visualized: CORS&lt;/a&gt;를 번역한 글입니다.&lt;/li&gt;
&lt;li&gt;저자의 허락을 받고 번역했습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;어쩌다 콘솔에서 &amp;ldquo;fetch 접근이 CORS 정책에 의해 차단되었습니다&amp;quot;라는
커다란 빨간색 오류를 보면 모든 개발자가 짜증을 느낍니다! 😬
임시방편이 몇 가지 있긴 하지만 오늘은 그 어떤 것도 사용하지 않겠습니다!
대신 CORS가 실제로 무엇을 하고 있는지 왜 우리에게 도움이 되는지
알아보도록 하겠습니다. 👏🏼&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;❗️ 이 글에서는 HTTP 기본에 대해 설명하지 않겠습니다.
HTTP 요청과 응답에 대해 더 자세히 알고 싶으시다면 제가 얼마 전에
작성한 &lt;a href=&#34;https://www.lydiahallie.dev/blog/http11&#34;&gt;짧은 글&lt;/a&gt;이
있습니다. 🙂 제가 사용한 예시에서 HTTP/2 대신 HTTP/1.1을
사용하지만 CORS에 영향을 미치지는 않습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;우리는 종종 프런트엔드에서 다른 곳에 있는 데이터를 보여주고 싶습니다!
해당 데이터를 가져오기 위해 브라우저는 먼저 서버에 요청을 해야 하죠!
이 요청은 서버가 데이터를 클라이언트로 보내기 위해 필요한
모든 정보를 포함합니다. 🙂&lt;/p&gt;
&lt;p&gt;예를 들어 웹사이트 &lt;code&gt;www.mywebsite.com&lt;/code&gt;에서 &lt;code&gt;api.website.com&lt;/code&gt; 서버에
있는 사용자 정보를 가져오려고 합니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/request-same.gif&#34; alt=&#34;request-same&#34;&gt;&lt;/p&gt;
&lt;p&gt;Perfect! 😃 방금 서버로 HTTP 요청을 보냈습니다.
그런 다음 서버는 우리가 요청했던 JSON 데이터를 응답했습니다.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;동일한&lt;/em&gt; 요청을 &lt;strong&gt;다른 도메인&lt;/strong&gt;에 시도해보겠습니다.
&lt;code&gt;www.mywebsite.com&lt;/code&gt; 대신
&lt;code&gt;www.anotherdomain.com&lt;/code&gt;에서 요청하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/request-another.gif&#34; alt=&#34;request-another&#34;&gt;&lt;/p&gt;
&lt;p&gt;잠깐, 뭐죠? 우리는 똑같은 요청을 보냈는데 이번에는 브라우저가 이상한 오류가 보여주죠?&lt;/p&gt;
&lt;p&gt;우리는 방금 CORS가 동작하는 것을 보았습니다! 💪🏼
그럼 이 오류가 발생한 원인과 정확히 무엇을 뜻하는지 알아보겠습니다.&lt;/p&gt;
&lt;h1 id=&#34;-같은-출처-정책-same-origin-policy&#34;&gt;✋🏼 같은 출처 정책 (Same-Origin Policy)&lt;/h1&gt;
&lt;p&gt;웹은 &lt;strong&gt;같은 출처 정책&lt;/strong&gt;이라는 것을 시행합니다. 기본적으로 우리는
요청을 하는 곳과 &lt;strong&gt;같은 출처&lt;/strong&gt;에 있는 자원만 접근할 수 있습니다! 💪🏼
예를 들어 &lt;code&gt;https://mywebsite.com&lt;/code&gt;에서 &lt;code&gt;https://mywebsite.com/image1.png&lt;/code&gt;에
있는 이미지를 불러 오는 것은 괜찮습니다.&lt;/p&gt;
&lt;p&gt;만약 자원이 다른 (하위)도메인 또는 다른 프로토콜, 다른 포트에 있는 경우
다른 출처(cross-origin)에 있다고 말합니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/origin.png&#34; alt=&#34;origin&#34;&gt;&lt;/p&gt;
&lt;p&gt;좋아요, 그런데 왜 같은 출처 정책까지 있는 거죠?&lt;/p&gt;
&lt;p&gt;만약 같은 출처 정책이 없었고 이모가 페이스북에서 보낸
수많은 바이러스 링크 중 하나를 실수로 클릭했다고 가정해 보세요.
이 링크가 여러분을 &amp;ldquo;유해 사이트&amp;quot;로 리다이렉션 시킵니다.
은행 사이트를 불러 오는 iframe이 내장된 웹사이트로요.
그리고 설정되어 있던 쿠키를 통해 성공적으로 로그인합니다! 😬&lt;/p&gt;
&lt;p&gt;&amp;ldquo;유해 사이트&amp;rdquo; 개발자들은 본인 계좌로 돈을 보내기 위해
웹사이트가 이 iframe에 접근하고 은행 사이트 DOM 콘텐츠에
접근할 수 있게끔 만들었습니다!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;역주: 위 공격은 CSRF (Cross-Site Request Forgery) 공격에 해당되며
XSS (Cross-Site Scripting)도 같은 출처 정책과 관련된 공격입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/wo-same-origin-policy.gif&#34; alt=&#34;wo-same-origin-policy&#34;&gt;&lt;/p&gt;
&lt;p&gt;맞습니다&amp;hellip; 이건 엄청난 보안 위험이에요! 우리는 그 누구도 접근하지 못하길 바랍니다. 😧&lt;/p&gt;
&lt;p&gt;운 좋게도 여기서 같은 출처 정책이 우리를 도와줍니다!
이 정책은 &lt;strong&gt;같은 출처&lt;/strong&gt; 자원만 접근할 수 있도록 합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/with-policy.gif&#34; alt=&#34;with-policy&#34;&gt;&lt;/p&gt;
&lt;p&gt;이 경우 &lt;code&gt;www.evilwebsite.com&lt;/code&gt;은 다른 출처인 &lt;code&gt;www.bank.com&lt;/code&gt; 자원에
접근하려고 했습니다! 같은 출처 정책은 이러한 일이 발생하지 않도록 접근을
차단하고 유해 사이트 개발자가 우리의 은행 데이터에 접근할 수 없도록 만듭니다. 🥳&lt;/p&gt;
&lt;p&gt;좋아요, 그럼&amp;hellip; 이것이 CORS와 무슨 관계가 있나요?&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;-클라이언트-측-cors&#34;&gt;🔥 클라이언트 측 CORS&lt;/h1&gt;
&lt;p&gt;같은 출처 정책은 실제로 스크립트에만 적용되지만, 브라우저는 자바스크립트에서
요청하는 것까지 이 정책을 &amp;ldquo;확장&amp;quot;시킵니다. 기본적으로 우리는 &lt;strong&gt;같은 출처&lt;/strong&gt;에서
가져온 자원만 접근할 수 있습니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/client-side-cors.gif&#34; alt=&#34;client-side-cors&#34;&gt;&lt;/p&gt;
&lt;p&gt;흠, 하지만&amp;hellip; 때로는 다른 출처 자원에 접근해야만 합니다. 🤔
프런트엔드가 데이터를 불러 오기 위해 백엔드 API를 호출해야 할 수도 있습니다.
그래서 브라우저는 다른 출처 요청을 안전하게 만들기 위해 &lt;strong&gt;CORS&lt;/strong&gt;라는
메커니즘을 사용합니다! 🥳&lt;/p&gt;
&lt;p&gt;CORS는 &lt;strong&gt;다른 출처 자원 공유(Cross-Origin Resource Sharing)&lt;/strong&gt; 를 말합니다.
브라우저가 같은 출처가 아닌 자원에 접근할 수 없게 하지만, CORS를 사용하여
이러한 보안 제한을 약간 바꿔서 다른 출처 자원에 안전하게 접근할 수 있습니다. 🎉&lt;/p&gt;
&lt;p&gt;사용자 에이전트(예: 브라우저)는 차단될 &lt;strong&gt;다른 출처 요청을 허용&lt;/strong&gt;하기 위해
HTTP 응답의 특정 CORS 헤더 값에 따라 CORS 메커니즘을 사용할 수 있습니다! ✅&lt;/p&gt;
&lt;p&gt;다른 출처 요청을 하면 클라이언트는 자동으로 HTTP 요청에
&lt;code&gt;Origin&lt;/code&gt; 헤더를 추가합니다. &lt;code&gt;Origin&lt;/code&gt; 헤더 값은 요청을 보낸 출처입니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/origin-header.gif&#34; alt=&#34;origin-header&#34;&gt;&lt;/p&gt;
&lt;p&gt;브라우저가 다른 출처 자원에 접근할 수 있도록 클라이언트의 &lt;code&gt;Origin&lt;/code&gt; 헤더는
해당 서버에게 다른 출처 요청 허용 여부를 명시한 응답 헤더를 요구하는 것입니다!&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;-서버-측-cors&#34;&gt;💻 서버 측 CORS&lt;/h1&gt;
&lt;p&gt;서버 개발자는 HTTP 응답에 헤더를 추가하여 다른 출처 요청이 허용되는지
확인시켜줄 수 있습니다. 이 헤더는 모두 &lt;code&gt;Access-Control-*&lt;/code&gt;로 시작합니다. 🔥
이 CORS 응답 헤더의 값에 따라 브라우저는 일반적으로 같은 출처
정책에 의해 차단되는 특정 다른 출처 응답을 허용할 수 있습니다!&lt;/p&gt;
&lt;p&gt;사용할 수 있는 &lt;a href=&#34;https://fetch.spec.whatwg.org/#http-responses&#34;&gt;여러 CORS 헤더&lt;/a&gt;가
있지만 브라우저가 다른 출처 자원 접근을 허용하기 위해 필요한 헤더는 하나입니다.
바로 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;입니다! 🙂 이 헤더 값은 서버의
&lt;strong&gt;자원에 접근할 수 있는 출처&lt;/strong&gt;를 지정합니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://mywebsite.com&lt;/code&gt;에서 접근할 서버를 개발 중인 경우
&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 헤더에 해당 도메인을 추가할 수 있습니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/access-control-allow-origin.gif&#34; alt=&#34;access-control-allow-origin&#34;&gt;&lt;/p&gt;
&lt;p&gt;Awesome! 🎉 이제 서버가 클라이언트로 보내는 응답에 이 헤더가 추가됩니다.
그럼 &lt;code&gt;https://mywebsite.com&lt;/code&gt;에서 요청을 보내도 &lt;code&gt;https://api.mywebsite.com&lt;/code&gt;
&lt;strong&gt;자원을 가져가는 걸 같은 출처 정책이 더 이상 막지 않습니다&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/allowed-origins.gif&#34; alt=&#34;allowed-origins&#34;&gt;&lt;/p&gt;
&lt;p&gt;브라우저 내부 CORS 메커니즘은 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 헤더 값이
요청할 때 보낸 &lt;code&gt;Origin&lt;/code&gt; 값과 동일한지 확인합니다. 🤚🏼&lt;/p&gt;
&lt;p&gt;이 경우 요청 출처는 &lt;code&gt;https://www.mywebsite.com&lt;/code&gt;으로
응답 헤더 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;에 실려 있습니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/response-header.gif&#34; alt=&#34;response-header&#34;&gt;&lt;/p&gt;
&lt;p&gt;Perfect! 🎉 다른 출처 자원을 성공적으로 받을 수 있습니다!
그러면 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 헤더에 실려 있지 않은
출처에서 다른 출처 자원에 접근하려고 하면 어떻게 될까요? 🤔&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/cors-error.gif&#34; alt=&#34;cors-error&#34;&gt;&lt;/p&gt;
&lt;p&gt;맞아요. CORS는 때때로 악명 높은 에러를 던지죠!
하지만 우리는 이제 이것이 오히려 이치에 맞다는 것을 알게 되었습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#39;Access-Control-Allow-Origin&amp;#39; 헤더 값이
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;제공된 출처(Origin)와 다른 &amp;#39;https://www.mywebsite.com&amp;#39;입니다.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 경우에 제공된 출처는 &lt;code&gt;https://www.anotherwebsite.com&lt;/code&gt;입니다.
그러나 서버가 보낸 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 헤더에는 해당 출처가
없습니다! CORS가 요청을 차단했고 우리의 코드는 가져온 데이터에 접근할
수 없습니다. 😃&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;또한 CORS를 사용하면 허용되는 Origin 값으로 와일드카드 &lt;code&gt;*&lt;/code&gt;를
추가할 수 있습니다. 이것은 모든 출처가 요청된 자원에
접근할 수 있다는 것이니 주의하세요!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;은 우리가 제공할 수 있는 수많은 CORS 헤더
중 하나입니다. 서버 개발자는 특정 요청을 허용하거나 차단하기 위해
CORS 정책을 수정할 수 있습니다! 💪🏼&lt;/p&gt;
&lt;p&gt;또 하나 자주 사용되는 헤더는 &lt;code&gt;Access-Control-Allow-Methods&lt;/code&gt;입니다!
CORS가 나열된 메서드들만 다른 출처 요청을 허용합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/access-control-allow-methods.gif&#34; alt=&#34;access-control-allow-methods&#34;&gt;&lt;/p&gt;
&lt;p&gt;이 경우 &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; 메서드 요청만 허용됩니다!
&lt;code&gt;PATCH&lt;/code&gt; 또는 &lt;code&gt;DELETE&lt;/code&gt;와 같은 다른 메서드들은 차단됩니다. ❌&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;다른 CORS 헤더는 무엇이 있으며 어떤 용도로 사용되는지 궁금하다면
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#The_HTTP_response_headers&#34;&gt;이 목록을 확인해보세요&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CORS는 실제로 &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; 요청에 대해서는
다르게 처리합니다! 🙃 이렇게 &amp;ldquo;&lt;em&gt;단순하지 않은&lt;/em&gt;&amp;rdquo; 요청은
&lt;strong&gt;예비 요청&lt;/strong&gt; 이라는 것을 만듭니다!&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;-예비-요청-preflighted-requests&#34;&gt;🚀 예비 요청 (Preflighted Requests)&lt;/h1&gt;
&lt;p&gt;CORS에는 &lt;strong&gt;단순 요청&lt;/strong&gt;과 &lt;strong&gt;예비 요청&lt;/strong&gt;이라는 두 가지 요청이 있습니다.
요청이 단순 요청인지 예비 요청인지는 요청이 가진 일부 값에 따라
달라집니다(걱정하지 마세요. 이 내용을 외울 필요는 없습니다ㅋㅋㅋ).&lt;/p&gt;
&lt;p&gt;단순 요청은 &lt;code&gt;GET&lt;/code&gt; 또는 &lt;code&gt;POST&lt;/code&gt; 메서드이고 사용자 정의 헤더가 없는 경우입니다!
예비 요청은 &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt; 또는 &lt;code&gt;DELETE&lt;/code&gt; 메서드와 같은 다른 모든 요청입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;단순 요청이 되기 위해 어떤 요구 사항을 충족해야 하는지 궁금하다면 MDN에
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests&#34;&gt;유용한 목록&lt;/a&gt;이 있습니다!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;알겠어요, 근데 &amp;ldquo;예비 요청&amp;quot;은 뭐고 왜 이런 일이 일어나는 건가요?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;실제 요청을 전송하기 전에 클라이언트는 예비 요청을 생성합니다!
예비 요청에는 &lt;code&gt;Access-Control-Request-*&lt;/code&gt; 헤더에 실제로 보내려는
요청 정보가 포함되어 있습니다. 🔥&lt;/p&gt;
&lt;p&gt;이 헤더는 브라우저가 수행하려는 실제 요청 정보를 서버에 제공합니다.
여기에는 요청 &lt;strong&gt;메서드&lt;/strong&gt;, &lt;strong&gt;추가 헤더&lt;/strong&gt; 등이 포함됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/preflighted-request.gif&#34; alt=&#34;preflighted-request&#34;&gt;&lt;/p&gt;
&lt;p&gt;서버는 이 예비 요청을 수신하고 서버 CORS 헤더와 함께 텅 빈 HTTP 응답을 보냅니다!
브라우저는 CORS 헤더 외에 아무 데이터가 없는 예비 응답을 수신하고
해당 HTTP 요청이 허용되는지 여부를 확인합니다! ✅&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/preflighted-response.gif&#34; alt=&#34;preflighted-response&#34;&gt;&lt;/p&gt;
&lt;p&gt;이런 경우 브라우저가 실제 요청을 서버로 보내면
서버는 요청 받은 데이터를 응답합니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/actual-request.gif&#34; alt=&#34;actual-request&#34;&gt;&lt;/p&gt;
&lt;p&gt;하지만 허용되지 않을 경우에는 CORS가 예비 요청을 차단하고 실제 요청은
절대 보내지지 않습니다. ✋🏼 예비 요청은 아직 CORS 정책이 적용되지 않은 서버의
자원에 접근하거나 수정할 수 없도록 하는 좋은 방법입니다! 서버가 잠재적으로
원하지 않는 다른 출처 요청으로부터 보호됩니다.😃&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 서버 통신 횟수를 줄이기 위해 CORS 요청에 &lt;code&gt;Access-Control-Max-Age&lt;/code&gt;
헤더를 추가하여 예비 요청에 대한 응답을 캐시할 수 있습니다!
그럼 브라우저는 새로운 예비 요청을 보내는 대신 캐시된 응답을
사용할 수 있습니다!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;-자격-증명credentials&#34;&gt;🍪 자격 증명(Credentials)&lt;/h1&gt;
&lt;p&gt;쿠키, 인가 헤더, TLS 인증서는 기본적으로 같은 출처 요청에서만 설정됩니다!
그러나 이러한 자격 증명을 다른 출처 요청에 사용할 수도 있습니다.
서버가 사용자를 식별하기 위해 사용하는 쿠키를 요청에 포함시킬 수도 있습니다!&lt;/p&gt;
&lt;p&gt;기본적으로 CORS에 자격 증명이 포함되어 있지 않지만
CORS 헤더 &lt;code&gt;Access-Control-Allow-Credentials&lt;/code&gt;를 추가할 수 있습니다! 🎉&lt;/p&gt;
&lt;p&gt;다른 출처 요청에 쿠키 및 기타 인가 헤더를 포함시키려면
요청에 &lt;code&gt;withCredentials&lt;/code&gt; 필드를 &lt;code&gt;true&lt;/code&gt;로 설정하고
응답에 &lt;code&gt;Access-Control-Allow-Credentials&lt;/code&gt; 헤더를 추가해야 합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/web/lydia/access-control-allow-credentials.gif&#34; alt=&#34;access-control-allow-credentials&#34;&gt;&lt;/p&gt;
&lt;p&gt;준비 끝! 이제 우리는 다른 출처 요청에 자격 증명을 포함시킬 수 있습니다. 🥳&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;제가 생각하기엔 우리 모두 CORS 오류가 가끔 짜증나지만
브라우저에서 다른 출처 요청을 안전하게 해준다는 것은 놀라울 거에요.
(좀 더 많은 사랑을 받아야 합니다 ㅋㅋㅋ) ✨&lt;/p&gt;
&lt;p&gt;제가 이 블로그 포스트에서 다룰 수 있었던 것보다 더 많은 자료들이 있습니다!
더 궁금하다면 운 좋게도
&lt;a href=&#34;https://livebook.manning.com/book/cors-in-action/part-1/&#34;&gt;CORS in Action&lt;/a&gt;이나
&lt;a href=&#34;https://www.w3.org/wiki/CORS_Enabled&#34;&gt;W3 규격&lt;/a&gt;과 같은 좋은 자료들이 있습니다. 💪🏼&lt;/p&gt;
&lt;p&gt;그리고 언제나 그랬듯이 저(Lydia Hallie)와 소통해요! 😊&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;✨&lt;/th&gt;
          &lt;th&gt;👩🏽‍💻&lt;/th&gt;
          &lt;th&gt;💻&lt;/th&gt;
          &lt;th&gt;💡&lt;/th&gt;
          &lt;th&gt;📷&lt;/th&gt;
          &lt;th&gt;💌&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.twitter.com/lydiahallie&#34;&gt;Twitter&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.instagram.com/theavocoder&#34;&gt;Instagram&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.github.com/lydiahallie&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.linkedin.com/in/lydia-hallie&#34;&gt;LinkedIn&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/channel/UC4EWKIKdKiDtAscQ9BIXwUw&#34;&gt;YouTube&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;a href=&#34;mailto:lydiahallie.dev@gmail.com&#34;&gt;Email&lt;/a&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
- https://markruler.github.io/posts/web/cs-visualized-cors/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
    
        <item>
        <title>Go로 밑바닥부터 만드는 BitTorrent 클라이언트</title>
        <link>https://markruler.github.io/posts/go/building-bittorrent-client/</link>
        <pubDate>Mon, 28 Dec 2020 14:46:00 +0900</pubDate>
        <author>imcxsu@gmail.com (Im Changsu)</author>
        <guid>https://markruler.github.io/posts/go/building-bittorrent-client/</guid>
        <description>임창수 https://markruler.github.io/posts/go/building-bittorrent-client/ -&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jse.li/posts/torrent/&#34;&gt;Jesse Li의 Building a BitTorrent client from the ground up in Go (2020-01-04)&lt;/a&gt;를 번역한 글입니다.&lt;/li&gt;
&lt;li&gt;저자의 허락을 받고 번역했습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;거두절미(tl;dr):&lt;/strong&gt; The Pirate Bay를 방문하고 mp3 파일이 나타나기까지 무슨 일이 일어나는 것일까요?
이 글에서는 데비안(Debian)을 다운로드할 수 있을 정도의 비트토렌트 프로토콜을 구현할 것입니다.
바로 &lt;a href=&#34;https://github.com/veggiedefender/torrent-client/&#34;&gt;소스 코드&lt;/a&gt;를 보거나 &lt;a href=&#34;#%EB%AA%A8%EB%91%90-%ED%95%A9%EC%B9%98%EA%B8%B0&#34;&gt;마지막 부분&lt;/a&gt;으로 넘어갈 수 있습니다.&lt;/p&gt;
&lt;p&gt;비트토렌트(BitTorrent)는 인터넷을 통해 파일을 다운로드하고 배포하기 위한 프로토콜입니다.
다운로더가 중앙 서버와 연결하는 기존의 클라이언트/서버 관계 (예: 넷플릭스에서
영화를 보거나 지금 읽고 있는 웹 페이지를 불러 오는 것)와 달리,
&lt;strong&gt;피어(peer)&lt;/strong&gt; 라고 불리는 비트토렌트 네트워크 참여자들은 &lt;em&gt;서로에게서&lt;/em&gt; 파일 조각을 다운로드합니다.
이것이 &lt;strong&gt;P2P(peer-to-peer)&lt;/strong&gt; 프로토콜입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/client-server-p2p.png&#34; alt=&#34;client-server-p2p&#34;&gt;&lt;/p&gt;
&lt;p&gt;이 프로토콜은 지난 20년 동안 진화했으며, 다양한 사람들과 조직들이 암호화(encryption),
비공개 토렌트(private torrent), 새로운 피어 탐색법과 같은 기능들을 추가했습니다.
우리는 주말에 구현할 수 있을 정도의 프로젝트 사이즈로 만들기 위해 &lt;a href=&#34;https://www.bittorrent.org/beps/bep_0003.html&#34;&gt;2001년 규격&lt;/a&gt;을 구현할 것입니다.&lt;/p&gt;
&lt;p&gt;저의 실험 재료로 적당한 350MB의 &lt;a href=&#34;https://cdimage.debian.org/debian-cd/current/amd64/bt-cd/#indexlist&#34;&gt;데비안 ISO&lt;/a&gt; 파일을 사용하겠습니다.
널리 사용되는 리눅스 배포판은 빠르고 협력적인 피어들이 많이 연결될 것입니다.
그리고 불법 복제 콘텐츠 다운로드와 관련된 법적, 윤리적 문제를 피할 수 있습니다.&lt;/p&gt;
&lt;h1 id=&#34;피어-찾기&#34;&gt;피어 찾기&lt;/h1&gt;
&lt;p&gt;다음과 같은 문제가 있습니다. 우리는 비트토렌트로 파일을 다운로드하려고 하지만 P2P 프로토콜이고 파일을 다운로드할 피어를 찾을 수 없습니다.
이것은 마치 새로운 도시로 이사해서 친구를 사귀는 것과 같습니다. 어쩌면 우리가 동네 술집이나 밋업 그룹에 가는 것처럼요!
중앙 집중식 서버는 피어들이 서로를 알 수 있도록 알려주는 &lt;strong&gt;트래커(tracker)&lt;/strong&gt; 의 핵심입니다.
이들은 HTTP&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 웹 서버일 뿐이며, 데비안의 서버는 &lt;a href=&#34;http://bttracker.debian.org:6969/stat&#34;&gt;http://bttracker.debian.org:6969/stat&lt;/a&gt;에서 찾을 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/trackers.png&#34; alt=&#34;trackers&#34;&gt;&lt;/p&gt;
&lt;p&gt;물론 이러한 중앙 서버는 피어들이 불법 컨텐츠를 교환할 수 있게 둔다면 정부의 단속을 받기 쉽습니다.
여러분은 불법 컨텐츠로 인해 폐쇄된 TorrentSpy, Popcorn Time, 그리고 KickassTorrents 와 같은 트래커에 대해 읽었을 수 있습니다.
오늘날에는 &lt;strong&gt;피어 탐색&lt;/strong&gt;도 분산 프로세스로 만들어 중간자를 생략했습니다 (역주: Trackerless Torrent).
우리가 이것까지 구현하지는 않지만 만약 관심이 있다면 &lt;strong&gt;DHT (Distributed Hash Table)&lt;/strong&gt;, &lt;strong&gt;PEX (Peer exchange)&lt;/strong&gt;, 그리고 &lt;strong&gt;자석 링크 (magnet link)&lt;/strong&gt; 같은 몇몇 용어들을 찾아보세요.&lt;/p&gt;
&lt;h2 id=&#34;torrent-파일-파싱-parsing-구문-분석&#34;&gt;.torrent 파일 파싱 (parsing: 구문 분석)&lt;/h2&gt;
&lt;p&gt;.torrent 파일에는 토렌트를 통해 다운로드할 수 있는(torrentable) 파일의 내용 및 트래커 연결에 대한 정보가 포함됩니다.
토렌트를 다운로드 하기 위해 필요한 것은 이것뿐입니다. 데비안의 .torrent 파일은 다음과 같습니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;d8:announce41:http://bttracker.debian.org:6969/announce7:comment35:&amp;#34;Debian CD from cdimage.debian.org&amp;#34;13:creation datei1573903810e9:httpseedsl145:https://cdimage.debian.org/cdimage/release/10.2.0//srv/cdbuilder.debian.org/dst/deb-cd/weekly-builds/amd64/iso-cd/debian-10.2.0-amd64-netinst.iso145:https://cdimage.debian.org/cdimage/archive/10.2.0//srv/cdbuilder.debian.org/dst/deb-cd/weekly-builds/amd64/iso-cd/debian-10.2.0-amd64-netinst.isoe4:infod6:lengthi351272960e4:name31:debian-10.2.0-amd64-netinst.iso12:piece lengthi262144e6:pieces26800:�����PS�^�� (binary blob of the hashes of each piece)ee
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;B인코드(Bencode)&lt;/strong&gt; 형식으로 인코딩되어 있고, 우리는 이것을 디코딩해야 합니다.&lt;/p&gt;
&lt;p&gt;B인코드는 JSON과 거의 동일한 유형(문자열, 정수, 리스트 및 딕셔너리)의 구조로 인코딩할 수 있습니다.
B인코딩된 데이터는 JSON만큼 사람이 쉽게 읽고 쓸 수 있는 것은 아니지만 바이너리 데이터를 효율적으로
처리할 수 있으며 스트림에서 파싱하는 것이 매우 간단합니다.
문자열은 길이 접두사가 붙으며 &lt;code&gt;4:spam&lt;/code&gt;와 같이 나타냅니다.
정수는 마커로 시작하고 끝나기 때문에 &lt;code&gt;7&lt;/code&gt;의 경우 &lt;code&gt;i7e&lt;/code&gt;로 인코딩됩니다.
리스트와 딕셔너리는 비슷한 방식으로 인코딩됩니다. &lt;code&gt;l4:spami7ee&lt;/code&gt;는 &lt;code&gt;[&#39;spam&#39;, 7]&lt;/code&gt;을, &lt;code&gt;d4:spami7ee&lt;/code&gt;는 &lt;code&gt;{spam: 7}&lt;/code&gt;을 나타냅니다.&lt;/p&gt;
&lt;p&gt;.torrent 파일을 보기 쉽게 다듬으면 다음과 같습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;:announce
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f60&#34;&gt;41&lt;/span&gt;:http:&lt;span style=&#34;color:#0f0&#34;&gt;//bttracker.debian.org:6969/announce
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;:comment
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f60&#34;&gt;35&lt;/span&gt;:&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Debian CD from cdimage.debian.org&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f60&#34;&gt;13&lt;/span&gt;:creation date
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i1573903810e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;:info
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;:length
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i351272960e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;:name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f60&#34;&gt;31&lt;/span&gt;:debian-&lt;span style=&#34;color:#f60&#34;&gt;10.2.0&lt;/span&gt;-amd64-netinst.iso
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f60&#34;&gt;12&lt;/span&gt;:piece length
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i262144e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;:pieces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f60&#34;&gt;26800&lt;/span&gt;:�����PS�^�� (binary blob of the hashes of each piece)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 파일에서는 트래커의 URL, 생성 날짜(유닉스 타임스탬프), 파일 이름 및 크기,
다운로드하려는 파일 &lt;strong&gt;조각&lt;/strong&gt; 의 SHA-1 해시가 들어 있는 큰 바이너리 블롭을 찾을 수 있습니다.
조각의 정확한 크기는 토렌트마다 다르지만 일반적으로 256KB에서 1MB 사이입니다.
이것은 큰 파일이 수천 개의 조각으로 구성될 수 있다는 것을 의미합니다.
피어들에게서 이 조각들을 다운로드해서 토렌트 파일에 있는 해시와 대조해 보고, 조립해 보고, 파일을 가지게 되는 겁니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/pieces.png&#34; alt=&#34;pieces&#34;&gt;&lt;/p&gt;
&lt;p&gt;이 메커니즘을 통해 각 조각의 무결성을 검증할 수 있습니다.
비트토렌트는 이를 통해 우발적인 데이터 손상이나 의도적인 &lt;strong&gt;토렌트 포이즈닝&lt;/strong&gt;(&lt;a href=&#34;https://en.wikipedia.org/wiki/Torrent_poisoning&#34;&gt;torrent poisoning&lt;/a&gt;) 을 막을 수 있습니다.
공격자가 역상 공격(&lt;a href=&#34;https://en.wikipedia.org/wiki/Preimage_attack&#34;&gt;preimage attack&lt;/a&gt;)을 통해 SHA-1을 해독할 수 없다면, 우리는 요청한 컨텐츠를 정확하게 받을 수 있습니다.&lt;/p&gt;
&lt;p&gt;B인코드 파서를 만드는 것은 정말 재미있겠지만, 파싱은 이 글의 목적이 아닙니다.
이해하기 쉬운 Fredrik Lundh의 &lt;a href=&#34;https://effbot.org/zone/bencode.htm&#34;&gt;50줄짜리 파서&lt;/a&gt;를 찾았지만,
이 프로젝트에서는 &lt;a href=&#34;https://github.com/jackpal/bencode-go&#34;&gt;github.com/jackpal/bencode-go&lt;/a&gt; 을 사용했습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;github.com/jackpal/bencode-go&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;type&lt;/span&gt; bencodeInfo &lt;span style=&#34;color:#f00&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Pieces      &lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#87ceeb&#34;&gt;`bencode:&amp;#34;pieces&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PieceLength &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;`bencode:&amp;#34;piece length&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Length      &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;`bencode:&amp;#34;length&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Name        &lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#87ceeb&#34;&gt;`bencode:&amp;#34;name&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;type&lt;/span&gt; bencodeTorrent &lt;span style=&#34;color:#f00&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Announce &lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;      &lt;span style=&#34;color:#87ceeb&#34;&gt;`bencode:&amp;#34;announce&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Info     bencodeInfo &lt;span style=&#34;color:#87ceeb&#34;&gt;`bencode:&amp;#34;info&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Open 토렌트 파일을 파싱합니다
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;Open&lt;/span&gt;(r io.Reader) (*bencodeTorrent, &lt;span style=&#34;color:#ee82ee&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bto := bencodeTorrent{}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  err := bencode.&lt;span style=&#34;color:#ff0&#34;&gt;Unmarshal&lt;/span&gt;(r, &amp;amp;bto)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;, err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &amp;amp;bto, &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/torrentfile/torrentfile.go&#34;&gt;github.com/veggiedefender/torrent-client/torrentfile/torrentfile.go&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;저는 구조체를 상대적으로 평평하게 유지하는 것을 좋아하고
애플리케이션 구조체를 직렬화 구조체와 분리하는 것을 좋아하기 때문에
&lt;code&gt;TorrentFile&lt;/code&gt;이라는 다른 평탄한 구조체를 내보내고
두 구조체 사이에서 변환할 몇 가지 헬퍼 함수를 작성했습니다.&lt;/p&gt;
&lt;p&gt;특히 각각의 해시에 쉽게 접근할 수 있도록 &lt;code&gt;조각&lt;/code&gt;(이전의 문자열)을 해시 조각(각각 &lt;code&gt;[20]byte&lt;/code&gt;)으로 분할합니다.
또한 (이름, 크기, 조각 해시를 포함한) B인코딩된 &lt;code&gt;info&lt;/code&gt; 딕셔너리의 SHA-1 해시를 계산했습니다.
이것을 &lt;strong&gt;infohash&lt;/strong&gt;라고 하며 트래커 및 피어와 통신할 때 파일 식별자 역할을 합니다.
이에 대해서는 나중에 더 살펴보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/info-hash.png&#34; alt=&#34;info-hash&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;type&lt;/span&gt; TorrentFile &lt;span style=&#34;color:#f00&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Announce    &lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  InfoHash    [&lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PieceHashes [][&lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PieceLength &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Length      &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Name        &lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; (bto bencodeTorrent) &lt;span style=&#34;color:#ff0&#34;&gt;toTorrentFile&lt;/span&gt;() (TorrentFile, &lt;span style=&#34;color:#ee82ee&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;// …
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/torrentfile/torrentfile.go#L120-L138&#34;&gt;github.com/veggiedefender/torrent-client/torrentfile/torrentfile.go#L120-L138&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;트래커로부터-피어-찾기&#34;&gt;트래커로부터 피어 찾기&lt;/h2&gt;
&lt;p&gt;이제 파일과 트래커에 대해 알았으니 트래커와 통신하여 피어로서의 존재를 &lt;strong&gt;알리고&lt;/strong&gt; 다른 피어들의 목록을 검색해 보겠습니다.
.torrent 파일에 제공된 &amp;lsquo;announce&amp;rsquo; URL에 몇 가지 쿼리 파라미터와 함께 GET 요청을 하면 됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; (t *TorrentFile) &lt;span style=&#34;color:#ff0&#34;&gt;buildTrackerURL&lt;/span&gt;(peerID [&lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;, port &lt;span style=&#34;color:#ee82ee&#34;&gt;uint16&lt;/span&gt;) (&lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#ee82ee&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  base, err := url.&lt;span style=&#34;color:#ff0&#34;&gt;Parse&lt;/span&gt;(t.Announce)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  params := url.Values{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;info_hash&amp;#34;&lt;/span&gt;:  []&lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;{string(t.InfoHash[:])},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;peer_id&amp;#34;&lt;/span&gt;:    []&lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;{string(peerID[:])},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;:       []&lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;{strconv.&lt;span style=&#34;color:#ff0&#34;&gt;Itoa&lt;/span&gt;(int(Port))},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;uploaded&amp;#34;&lt;/span&gt;:   []&lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;downloaded&amp;#34;&lt;/span&gt;: []&lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;compact&amp;#34;&lt;/span&gt;:    []&lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;:       []&lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;{strconv.&lt;span style=&#34;color:#ff0&#34;&gt;Itoa&lt;/span&gt;(t.Length)},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  base.RawQuery = params.&lt;span style=&#34;color:#ff0&#34;&gt;Encode&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; base.&lt;span style=&#34;color:#ff0&#34;&gt;String&lt;/span&gt;(), &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/torrentfile/tracker.go#L19-L35&#34;&gt;github.com/veggiedefender/torrent-client/torrentfile/tracker.go#L19-L35&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여기서 중요한 것은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;info_hash&lt;/strong&gt;: 다운로드하려는 파일을 식별합니다. 이것은 우리가 B인코딩된 &lt;code&gt;info&lt;/code&gt; 딕셔너리에서 계산한 infohash입니다. 트래커는 이를 사용하여 어떤 피어를 보여줄지 결정합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peer_id&lt;/strong&gt;: 트래커와 피어들에게 &lt;code&gt;우리&lt;/code&gt;를 식별시키기 위한 20바이트 이름입니다. 이를 위해 20개의 랜덤 바이트를 생성합니다. 실제 비트토렌트 클라이언트는 클라이언트 소프트웨어와 버전을 식별하는 &lt;code&gt;-TR2940-k8hj0wgej6ch&lt;/code&gt;와 같은 ID를 가지고 있습니다. 여기서 TR2940은 전송 클라이언트 2.94를 의미합니다. &lt;a href=&#34;https://www.bittorrent.org/beps/bep_0020.html&#34;&gt;(Peer ID Conventions)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/info-hash-peer-id.png&#34; alt=&#34;info-hash-peer-id&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;트래커-응답-분석&#34;&gt;트래커 응답 분석&lt;/h2&gt;
&lt;p&gt;다음과 같이 B인코딩된 응답을 받았습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;:interval
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i900e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;:peers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f60&#34;&gt;252&lt;/span&gt;:(another &lt;span style=&#34;color:#ee82ee&#34;&gt;long&lt;/span&gt; binary blob)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Interval&lt;/code&gt;은 얼마나 자주 트래커에 다시 연결하여 피어 목록을 새로 고쳐야 하는지 알려줍니다.
900이라는 값은 15분(900초)마다 다시 연결해야 함을 의미합니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Peers&lt;/code&gt;는 각 피어의 IP 주소를 포함하는 또 다른 긴 바이너리 블롭입니다.
&lt;code&gt;6바이트의 그룹들&lt;/code&gt;로 이루어져 있습니다.
각 그룹의 처음 4바이트는 피어의 IP 주소를 나타냅니다. 각 1 바이트는 IP 숫자를 나타냅니다.
마지막 2바이트는 포트 번호를 빅-엔디안 &lt;code&gt;uint16&lt;/code&gt;으로 나타냅니다.
&lt;strong&gt;빅-엔디안&lt;/strong&gt; 또는 &lt;strong&gt;네트워크 바이트 순서&lt;/strong&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;는 바이트 그룹을 왼쪽부터 담아 정수로 해석하는 것을 말합니다.
예를 들어 &lt;code&gt;0x1A&lt;/code&gt;, &lt;code&gt;0xE1&lt;/code&gt; 바이트는 &lt;code&gt;0x1AE1&lt;/code&gt; 또는 십진수로 6881을 만듭니다.&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/address.png&#34; alt=&#34;address&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Peer 피어의 연결 정보를 인코딩합니다
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;type&lt;/span&gt; Peer &lt;span style=&#34;color:#f00&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  IP   net.IP
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Port &lt;span style=&#34;color:#ee82ee&#34;&gt;uint16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Unmarshal 버퍼에서 피어의 IP 주소와 포트 번호를 파싱합니다
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;Unmarshal&lt;/span&gt;(peersBin []&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;) ([]Peer, &lt;span style=&#34;color:#ee82ee&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; peerSize = &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#0f0&#34;&gt;// 4 for IP, 2 for port
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;  numPeers := len(peersBin) / peerSize
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; len(peersBin)%peerSize != &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    err := fmt.&lt;span style=&#34;color:#ff0&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Received malformed peers&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;, err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  peers := make([]Peer, numPeers)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;; i &amp;lt; numPeers; i++ {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    offset := i * peerSize
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    peers[i].IP = net.&lt;span style=&#34;color:#ff0&#34;&gt;IP&lt;/span&gt;(peersBin[offset : offset+&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    peers[i].Port = binary.BigEndian.&lt;span style=&#34;color:#ff0&#34;&gt;Uint16&lt;/span&gt;(peersBin[offset+&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; : offset+&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; peers, &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/peers/peers.go&#34;&gt;github.com/veggiedefender/torrent-client/peers/peers.go&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;피어로부터-다운로드하기&#34;&gt;피어로부터 다운로드하기&lt;/h1&gt;
&lt;p&gt;이제 피어 목록이 있습니다.
피어와 연결하여 조각을 다운로드할 시간입니다!
우리는 이 과정을 몇 단계로 나눌 수 있습니다.
각 피어에 대해 다음을 수행하고자 합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;피어와 TCP 연결을 시작합니다. 이것은 전화를 거는 것과 같습니다.&lt;/li&gt;
&lt;li&gt;양방향 비트토렌트 &lt;strong&gt;핸드셰이크&lt;/strong&gt;를 완료합니다.. &lt;em&gt;&amp;ldquo;안녕?&amp;rdquo; &amp;ldquo;안녕.&amp;rdquo;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;조각&lt;/strong&gt;을 다운로드 하기 위해 &lt;strong&gt;메시지&lt;/strong&gt;를 교환합니다. &lt;em&gt;&amp;ldquo;231번 조각 주세요.&amp;rdquo;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tcp-연결&#34;&gt;TCP 연결&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conn, err := net.&lt;span style=&#34;color:#ff0&#34;&gt;DialTimeout&lt;/span&gt;(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;, peer.&lt;span style=&#34;color:#ff0&#34;&gt;String&lt;/span&gt;(), &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;*time.Second)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;, err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/client/client.go#L65-L69&#34;&gt;github.com/veggiedefender/torrent-client/client/client.go#L65-L69&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;연결할 수 없는 피어에 너무 많은 시간을 낭비하지 않도록 시간 제한을 설정했습니다.
대부분의 경우 표준 TCP 연결입니다.&lt;/p&gt;
&lt;h2 id=&#34;핸드셰이크-완료&#34;&gt;핸드셰이크 완료&lt;/h2&gt;
&lt;p&gt;피어와의 연결을 설정했지만 다음과 같은 가정을 검증하기 위해 핸드셰이크를 수행하려고 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;피어는 비트토렌트 프로토콜을 사용하여 통신할 수 있습니다.&lt;/li&gt;
&lt;li&gt;피어는 우리의 메시지를 이해하고 응답할 수 있습니다.&lt;/li&gt;
&lt;li&gt;피어는 우리가 원하는 파일을 가지고 있거나 적어도 우리가 무엇을 말하고 있는지 알고 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/handshake.png&#34; alt=&#34;handshake&#34;&gt;&lt;/p&gt;
&lt;p&gt;아버지는 제게 악수(handshake)를 잘 하는 비결은 손을 단단히 잡고 눈을 마주치는 것이라고 말씀하셨습니다.
좋은 비트토렌트 핸드셰이크의 비결은 다음과 같이 다섯 부분으로 구성됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;항상 19로 지정된 프로토콜 식별자의 길이. (16진수로는 0x13)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pstr&lt;/strong&gt;이라 불리는 프로토콜 식별자는 항상 &lt;code&gt;BitTorrent protocol&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;모두 0으로 지정된 &lt;strong&gt;8개의 예약된 바이트&lt;/strong&gt;. 그 중 일부를 1로 뒤집어서 특정 &lt;a href=&#34;http://www.bittorrent.org/beps/bep_0010.html&#34;&gt;확장 기능&lt;/a&gt;을 지원한다는 것을 나타냅니다. 하지만 지금은 그렇지 않으니 0으로 유지하겠습니다.&lt;/li&gt;
&lt;li&gt;우리가 원하는 파일을 식별할 앞서 계산한 &lt;strong&gt;infohash&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;우리 스스로를 식별하기 위해 만든 &lt;strong&gt;Peer ID&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;합치면 핸드셰이크 문자열은 다음과 같이 보일 수 있습니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;\x13BitTorrent protocol\x00\x00\x00\x00\x00\x00\x00\x00\x86\xd4\xc8\x00\x24\xa4\x69\xbe\x4c\x50\xbc\x5a\x10\x2c\xf7\x17\x80\x31\x00\x74-TR2940-k8hj0wgej6ch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;피어에게 핸드셰이크를 보낸 후 동일한 형식으로 핸드셰이크를 다시 받아야 합니다.
받은 infohash는 보낸 정보와 일치해야 동일한 파일에 대해 말하고 있다는 것을 알 수 있습니다.
모든 일이 계획대로 진행되면 다음 단계로 넘어갑니다.
그렇지 않다면 뭔가 잘못되었기 때문에 연결을 끊을 수 있습니다.
&lt;em&gt;&amp;ldquo;안녕?&amp;rdquo; &amp;ldquo;这是谁？ 你想要什么？&amp;rdquo; &amp;ldquo;알았어요, 와&amp;hellip;잘못 걸었어요..&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;코드에서 핸드셰이크를 나타내는 구조체를 만들고, 이것을 직렬화하고 읽는 몇 가지 메소드를 작성하겠습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Handshake 피어가 자신을 식별하는 데 사용하는 특별한 메시지입니다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;type&lt;/span&gt; Handshake &lt;span style=&#34;color:#f00&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Pstr     &lt;span style=&#34;color:#ee82ee&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  InfoHash [&lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PeerID   [&lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Serialize 핸드셰이크를 버퍼에 직렬화합니다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; (h *Handshake) &lt;span style=&#34;color:#ff0&#34;&gt;Serialize&lt;/span&gt;() []&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  buf := make([]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;, len(h.Pstr)+&lt;span style=&#34;color:#f60&#34;&gt;49&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  buf[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] = byte(len(h.Pstr))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  curr := &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  curr += copy(buf[curr:], h.Pstr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  curr += copy(buf[curr:], make([]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;)) &lt;span style=&#34;color:#0f0&#34;&gt;// 8 reserved bytes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;  curr += copy(buf[curr:], h.InfoHash[:])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  curr += copy(buf[curr:], h.PeerID[:])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; buf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Read 스트림에서 핸드셰이크를 파싱합니다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;Read&lt;/span&gt;(r io.Reader) (*Handshake, &lt;span style=&#34;color:#ee82ee&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;// 역직렬화 수행
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/a83013d250dd9b4268cceace28e4cd82b07f2cbd/handshake/handshake.go&#34;&gt;github.com/veggiedefender/torrent-client/handshake/handshake.go&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;메시지-주고-받기&#34;&gt;메시지 주고 받기&lt;/h2&gt;
&lt;p&gt;첫 핸드셰이크를 마치면 &lt;code&gt;메시지&lt;/code&gt;를 주고받을 수 있습니다.
하지만 나머지 피어들이 메시지를 받아들일 준비가 안 되어 있다면,
모두가 준비가 되었다고 말하기 전에는 보낼 수 없습니다.
이 상태에서는 나머지 피어들에게 &lt;code&gt;chocked&lt;/code&gt;를 당합니다.
그들은 우리가 데이터를 요청해도 된다는 것을 알리기 위해 &lt;code&gt;unchoke&lt;/code&gt; 메시지를 보낼 것입니다.
기본적으로 우리는 입증될 때까지 막힌다고 가정합니다.&lt;/p&gt;
&lt;p&gt;unchoke 메시지를 받으면 우리는 조각에 대한 &lt;code&gt;요청&lt;/code&gt;을 보낼 수 있고,
피어들은 조각이 담긴 메시지를 우리에게 보낼 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/choke.png&#34; alt=&#34;choke&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;메시지-해석&#34;&gt;메시지 해석&lt;/h3&gt;
&lt;p&gt;메시지는 길이, &lt;code&gt;ID&lt;/code&gt;, &lt;code&gt;페이로드(payload)&lt;/code&gt;를 가집니다. 이것은 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/message.png&#34; alt=&#34;message&#34;&gt;&lt;/p&gt;
&lt;p&gt;메시지는 메시지의 바이트 길이를 알려주는 길이 표시로 시작합니다.
32비트 정수이므로 빅-엔디안 순서의 4바이트로 압축할 수 있습니다.
다음 바이트인 &lt;strong&gt;ID&lt;/strong&gt;는 어떤 유형의 메시지를 수신하는지 알려줍니다.
예를 들어 &lt;code&gt;2&lt;/code&gt;바이트는 &amp;ldquo;관심있음(interested)&amp;ldquo;을 의미합니다.
마지막으로 선택값인 &lt;strong&gt;페이로드(payload)&lt;/strong&gt; 는 메시지의 남은 길이를 채웁니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;type&lt;/span&gt; messageID &lt;span style=&#34;color:#ee82ee&#34;&gt;uint8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MsgChoke         messageID = &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MsgUnchoke       messageID = &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MsgInterested    messageID = &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MsgNotInterested messageID = &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MsgHave          messageID = &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MsgBitfield      messageID = &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MsgRequest       messageID = &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MsgPiece         messageID = &lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MsgCancel        messageID = &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Message 메시지의 ID 및 페이로드를 저장합니다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;type&lt;/span&gt; Message &lt;span style=&#34;color:#f00&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ID      messageID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Payload []&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Serialize 메시지를 다음과 같은 형식으로 버퍼에 직렬화합니다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// &amp;lt;길이 접두사&amp;gt;&amp;lt;메시지 ID&amp;gt;&amp;lt;페이로드&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// `nil`은 keep-live 메시지로 해석합니다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; (m *Message) &lt;span style=&#34;color:#ff0&#34;&gt;Serialize&lt;/span&gt;() []&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; m == &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; make([]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  length := uint32(len(m.Payload) + &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#0f0&#34;&gt;// +1 for id
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;  buf := make([]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;+length)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  binary.BigEndian.&lt;span style=&#34;color:#ff0&#34;&gt;PutUint32&lt;/span&gt;(buf[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;], length)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  buf[&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;] = byte(m.ID)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  copy(buf[&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;:], m.Payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; buf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/message/message.go#L90-L103&#34;&gt;github.com/veggiedefender/torrent-client/message/message.go#L90-L103&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;스트림에서 메시지를 읽으려면 해당 메시지 형식을 따릅니다.
우리는 4바이트를 읽고 메시지의 &lt;strong&gt;길이&lt;/strong&gt;를 얻기 위해 &lt;code&gt;uint32&lt;/code&gt;로 해석합니다.
그런 다음 &lt;strong&gt;ID&lt;/strong&gt;(처음 1바이트) 및 &lt;strong&gt;payload&lt;/strong&gt;(나머지 바이트)를 얻습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Read 스트림에서 메시지를 파싱합니다. keep-alive 메시지는 `nil`을 반환합니다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;Read&lt;/span&gt;(r io.Reader) (*Message, &lt;span style=&#34;color:#ee82ee&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  lengthBuf := make([]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  _, err := io.&lt;span style=&#34;color:#ff0&#34;&gt;ReadFull&lt;/span&gt;(r, lengthBuf)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;, err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  length := binary.BigEndian.&lt;span style=&#34;color:#ff0&#34;&gt;Uint32&lt;/span&gt;(lengthBuf)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;// keep-alive 메시지
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; length == &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  messageBuf := make([]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;, length)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  _, err = io.&lt;span style=&#34;color:#ff0&#34;&gt;ReadFull&lt;/span&gt;(r, messageBuf)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;, err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m := Message{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ID:      &lt;span style=&#34;color:#ff0&#34;&gt;messageID&lt;/span&gt;(messageBuf[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;]),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Payload: messageBuf[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;:],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &amp;amp;m, &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/message/message.go#L105-L131&#34;&gt;github.com/veggiedefender/torrent-client/message/message.go#L105-L131&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;비트-필드-bitfields&#34;&gt;비트 필드 (Bitfields)&lt;/h3&gt;
&lt;p&gt;가장 흥미로운 유형의 메시지 중 하나는 &lt;strong&gt;비트 필드(bitfield)&lt;/strong&gt; 입니다.
이 자료 구조는 피어들이 우리에게 보낼 수 있는 조각을 효율적으로 인코딩하는 데 사용됩니다.
비트필드는 바이트 배열처럼 생겼고, 어떤 조각을 가지고 있는지 확인하기 위해서는 단지 1로 설정된 &lt;em&gt;비트&lt;/em&gt;의 위치를 보면 됩니다.
이것을 커피숍 쿠폰에 비유할 수 있습니다.
비트가 전부 &lt;code&gt;0&lt;/code&gt;인 카드부터 시작해서 하나씩 &lt;code&gt;1&lt;/code&gt;로 바꿔서 &amp;ldquo;도장&amp;rdquo; 찍듯이 표시합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/bitfield.png&#34; alt=&#34;bitfield&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;바이트&lt;/em&gt; 대신 &lt;em&gt;비트&lt;/em&gt;로 작업해서 비트필드 자료 구조는 크기가 매우 작습니다.
한 바이트의 공간에 8개의 조각 정보(&lt;code&gt;bool&lt;/code&gt; 크기)를 채워 넣을 수 있습니다.
단점은 값에 접근하는 것이 좀 더 까다로워진다는 것입니다.
컴퓨터가 처리할 수 있는 가장 작은 메모리 단위는 바이트입니다.
따라서 비트에 접근하려면 몇 가지 비트 조작(bitwise manipulation)을 수행해야 합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// Bitfield 피어가 가지고 있는 조각들을 나타냅니다
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;type&lt;/span&gt; Bitfield []&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// HasPiece 특정 인덱스를 가진 비트 필드가 설정되어 있는지 알려줍니다
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; (bf Bitfield) &lt;span style=&#34;color:#ff0&#34;&gt;HasPiece&lt;/span&gt;(index &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#ee82ee&#34;&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  byteIndex := index / &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  offset := index % &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; bf[byteIndex]&amp;gt;&amp;gt;(&lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;-offset)&amp;amp;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; != &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// SetPiece 비트 필드에 비트를 설정합니다
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; (bf Bitfield) &lt;span style=&#34;color:#ff0&#34;&gt;SetPiece&lt;/span&gt;(index &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  byteIndex := index / &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  offset := index % &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bf[byteIndex] |= &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (&lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt; - offset)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/bitfield/bitfield.go&#34;&gt;github.com/veggiedefender/torrent-client/bitfield/bitfield.go&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;모두-합치기&#34;&gt;모두 합치기&lt;/h2&gt;
&lt;p&gt;이제 토렌트를 다운로드하는 데 필요한 모든 도구를 확보했습니다.
트래커에서 얻은 피어 목록이 있으며, TCP로 연결하고 핸드셰이크를 하며,
메시지를 주고받음으로써 피어들과 통신할 수 있습니다.
마지막 큰 문제는 여러 피어와 동시에 통신하는 &lt;strong&gt;동시성(concurrency)&lt;/strong&gt; 을 처리하고
상호 작용하는 피어들의 &lt;strong&gt;상태&lt;/strong&gt;를 관리하는 것입니다.
둘 다 고전적으로 어려운 문제입니다.&lt;/p&gt;
&lt;h3 id=&#34;동시성-관리-채널channel을-큐queue로&#34;&gt;동시성 관리: 채널(channel)을 큐(queue)로&lt;/h3&gt;
&lt;p&gt;Go에서는 &lt;a href=&#34;https://blog.golang.org/share-memory-by-communicating&#34;&gt;통신을 통해 메모리를 공유&lt;/a&gt;하며
Go 채널을 비용이 적은 스레드-세이프 큐라고 생각할 수 있습니다.&lt;/p&gt;
&lt;p&gt;두 채널을 설정하여 동시적인 작업자들(concurrent workers)을 동기화합니다.
하나는 피어 간에 작업(다운로드할 조각)을 분배하기 위한 채널이고,
다른 하나는 다운로드한 조각들을 모으기 위한 채널입니다.
다운로드된 조각들이 결과 채널을 통해 들어올 때,
우리는 그것들을 버퍼에 복사해서 완전한 파일로 조립할 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// 작업자가 작업을 찾고 결과를 보낼 수 있도록 큐를 초기화합니다
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;workQueue := make(&lt;span style=&#34;color:#f00&#34;&gt;chan&lt;/span&gt; *pieceWork, len(t.PieceHashes))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;results := make(&lt;span style=&#34;color:#f00&#34;&gt;chan&lt;/span&gt; *pieceResult)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;for&lt;/span&gt; index, hash := &lt;span style=&#34;color:#f00&#34;&gt;range&lt;/span&gt; t.PieceHashes {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  length := t.&lt;span style=&#34;color:#ff0&#34;&gt;calculatePieceSize&lt;/span&gt;(index)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  workQueue &amp;lt;- &amp;amp;pieceWork{index, hash, length}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// 작업을 시작합니다
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;for&lt;/span&gt; _, peer := &lt;span style=&#34;color:#f00&#34;&gt;range&lt;/span&gt; t.Peers {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;go&lt;/span&gt; t.&lt;span style=&#34;color:#ff0&#34;&gt;startDownloadWorker&lt;/span&gt;(peer, workQueue, results)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// 결과가 가득 찰 때까지 버퍼로 결과를 수집합니다
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;buf := make([]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;, t.Length)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;donePieces := &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;for&lt;/span&gt; donePieces &amp;lt; len(t.PieceHashes) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  res := &amp;lt;-results
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  begin, end := t.&lt;span style=&#34;color:#ff0&#34;&gt;calculateBoundsForPiece&lt;/span&gt;(res.index)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  copy(buf[begin:end], res.buf)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  donePieces++
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;close(workQueue)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/p2p/p2p.go#L188-L214&#34;&gt;github.com/veggiedefender/torrent-client/p2p/p2p.go#L188-L214&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;트래커에서 받은 피어마다 작업자 고루틴을 생성합니다.
피어와 연결하고 핸드셰이크한 다음 &lt;code&gt;workQueue&lt;/code&gt;에서 작업을 검색하여 다운로드를 시도하고,
&lt;code&gt;results&lt;/code&gt; 채널을 통해 다운로드한 조각들을 다시 보냅니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/download.png&#34; alt=&#34;download&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; (t *Torrent) &lt;span style=&#34;color:#ff0&#34;&gt;startDownloadWorker&lt;/span&gt;(peer peers.Peer, workQueue &lt;span style=&#34;color:#f00&#34;&gt;chan&lt;/span&gt; *pieceWork, results &lt;span style=&#34;color:#f00&#34;&gt;chan&lt;/span&gt; *pieceResult) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  c, err := client.&lt;span style=&#34;color:#ff0&#34;&gt;New&lt;/span&gt;(peer, t.PeerID, t.InfoHash)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    log.&lt;span style=&#34;color:#ff0&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Could not handshake with %s. Disconnecting\n&amp;#34;&lt;/span&gt;, peer.IP)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;defer&lt;/span&gt; c.Conn.&lt;span style=&#34;color:#ff0&#34;&gt;Close&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  log.&lt;span style=&#34;color:#ff0&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Completed handshake with %s\n&amp;#34;&lt;/span&gt;, peer.IP)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  c.&lt;span style=&#34;color:#ff0&#34;&gt;SendUnchoke&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  c.&lt;span style=&#34;color:#ff0&#34;&gt;SendInterested&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;for&lt;/span&gt; pw := &lt;span style=&#34;color:#f00&#34;&gt;range&lt;/span&gt; workQueue {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; !c.Bitfield.&lt;span style=&#34;color:#ff0&#34;&gt;HasPiece&lt;/span&gt;(pw.index) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      workQueue &amp;lt;- pw &lt;span style=&#34;color:#0f0&#34;&gt;// 큐에 조각을 다시 넣습니다
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#f00&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0f0&#34;&gt;// 조각 다운로드
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;    buf, err := &lt;span style=&#34;color:#ff0&#34;&gt;attemptDownloadPiece&lt;/span&gt;(c, pw)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      log.&lt;span style=&#34;color:#ff0&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Exiting&amp;#34;&lt;/span&gt;, err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      workQueue &amp;lt;- pw &lt;span style=&#34;color:#0f0&#34;&gt;// 큐에 조각을 다시 넣습니다
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    err = &lt;span style=&#34;color:#ff0&#34;&gt;checkIntegrity&lt;/span&gt;(pw, buf)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      log.&lt;span style=&#34;color:#ff0&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Piece #%d failed integrity check\n&amp;#34;&lt;/span&gt;, pw.index)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      workQueue &amp;lt;- pw &lt;span style=&#34;color:#0f0&#34;&gt;// 큐에 조각을 다시 넣습니다
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#f00&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c.&lt;span style=&#34;color:#ff0&#34;&gt;SendHave&lt;/span&gt;(pw.index)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    results &amp;lt;- &amp;amp;pieceResult{pw.index, buf}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/p2p/p2p.go#L133-L169&#34;&gt;github.com/veggiedefender/torrent-client/p2p/p2p.go#L133-L169&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;상태-관리&#34;&gt;상태 관리&lt;/h3&gt;
&lt;p&gt;구조체에 있는 각 피어들을 추적하고 메시지를 읽을 때 해당 구조체의 필드값을 수정합니다.
피어에서 다운로드한 용량, 요청한 용량, 중단(choked) 여부 등의 데이터가 포함됩니다.
만약 더 확장하기를 원한다면 이것을 유한 상태 기계(FSM)로 형식화할 수 있습니다.
하지만 지금은 구조체와 스위치만으로 충분합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;type&lt;/span&gt; pieceProgress &lt;span style=&#34;color:#f00&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  index      &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  client     *client.Client
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  buf        []&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  downloaded &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  requested  &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  backlog    &lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; (state *pieceProgress) &lt;span style=&#34;color:#ff0&#34;&gt;readMessage&lt;/span&gt;() &lt;span style=&#34;color:#ee82ee&#34;&gt;error&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  msg, err := state.client.&lt;span style=&#34;color:#ff0&#34;&gt;Read&lt;/span&gt;() &lt;span style=&#34;color:#0f0&#34;&gt;// this call blocks
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;switch&lt;/span&gt; msg.ID {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;case&lt;/span&gt; message.MsgUnchoke:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    state.client.Choked = &lt;span style=&#34;color:#f00&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;case&lt;/span&gt; message.MsgChoke:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    state.client.Choked = &lt;span style=&#34;color:#f00&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;case&lt;/span&gt; message.MsgHave:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    index, err := message.&lt;span style=&#34;color:#ff0&#34;&gt;ParseHave&lt;/span&gt;(msg)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    state.client.Bitfield.&lt;span style=&#34;color:#ff0&#34;&gt;SetPiece&lt;/span&gt;(index)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;case&lt;/span&gt; message.MsgPiece:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    n, err := message.&lt;span style=&#34;color:#ff0&#34;&gt;ParsePiece&lt;/span&gt;(state.index, state.buf, msg)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    state.downloaded += n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    state.backlog--
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/p2p/p2p.go#L53-L83&#34;&gt;github.com/veggiedefender/torrent-client/p2p/p2p.go#L53-L83&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;요청을-보낼-시간입니다&#34;&gt;요청을 보낼 시간입니다!&lt;/h3&gt;
&lt;p&gt;파일, 조각 및 조각 해시는 전부가 아닙니다. 조각을 &lt;strong&gt;블록&lt;/strong&gt;으로 세분하여 더 발전시킬 수 있습니다.
블록은 조각의 일부입니다. 해당 블록이 속한 조각의 &lt;strong&gt;인덱스&lt;/strong&gt;,
조각에서 블록의 바이트 &lt;strong&gt;오프셋&lt;/strong&gt; 및 블록의 &lt;strong&gt;길이&lt;/strong&gt;를 통해 블록을 정의할 수 있습니다.
피어에서 데이터를 요청하면 실제로 블록을 요청합니다.
블록의 크기는 일반적으로 16KB이므로 256KB 조각 하나에 실제로 16개의 요청이 필요할 수 있습니다.&lt;/p&gt;
&lt;p&gt;피어가 16KB보다 큰 블록에 대한 요청을 수신하는 경우 연결을 끊어야 합니다.
제 경험상 요청을 128KB까지 처리하는 경우가 많았습니다.
하지만 규격보다 큰 크기의 블록을 요청할 때 전체 속도가 크게 향상되지는 않았으므로
규격을 준수하는 것이 더 나을 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;파이프라이닝&#34;&gt;파이프라이닝&lt;/h3&gt;
&lt;p&gt;네트워크 왕복 비용은 많이 들고, 각 블록을 하나씩 요청하면 다운로드 성능이 상당히 저하됩니다.
따라서 처리되지 않은 일부 요청들을 지속적으로 모으기 위해 &lt;strong&gt;파이프라인(pipeline)으로&lt;/strong&gt; 연결하는 것이 중요합니다.
이렇게 하면 연결 처리량을 상당히 증가시킬 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/go/bit-torrent/pipelining.png&#34; alt=&#34;pipelining&#34;&gt;&lt;/p&gt;
&lt;p&gt;일반적으로 비트토렌트 클라이언트는 5개의 파이프라인 요청 큐를 유지했으며, 이것이 제가 사용할 값입니다.
파이프라인을 늘리면 다운로드 속도가 최대 두 배까지 빨라진다는 것을 알았습니다.&lt;/p&gt;
&lt;p&gt;최신 클라이언트는 &lt;a href=&#34;https://luminarys.com/posts/writing-a-bittorrent-client.html&#34;&gt;적응형(adaptive)&lt;/a&gt; 큐 크기를
사용하여 최신 네트워크 속도와 조건을 더 잘 수용합니다.
이는 분명히 조정할 만한 가치가 있는 매개 변수이며, 향후 성능 최적화를 위한 쉬운 방법(low-hanging fruit)입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// MaxBlockSize 요청할 수 있는 최대 바이트 수
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; MaxBlockSize = &lt;span style=&#34;color:#f60&#34;&gt;16384&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// MaxBacklog 클라이언트가 파이프라인에서 수행할 수 없는 요청 수입니다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f00&#34;&gt;const&lt;/span&gt; MaxBacklog = &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;attemptDownloadPiece&lt;/span&gt;(c *client.Client, pw *pieceWork) ([]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#ee82ee&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  state := pieceProgress{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    index:  pw.index,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    client: c,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    buf:    make([]&lt;span style=&#34;color:#ee82ee&#34;&gt;byte&lt;/span&gt;, pw.length),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;// 데드라인을 설정하면 응답하지 않는 피어를 떼어내는 데 도움이 됩니다
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;// 262KB 조각을 다운로드하려면 30초가 충분합니다
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;  c.Conn.&lt;span style=&#34;color:#ff0&#34;&gt;SetDeadline&lt;/span&gt;(time.&lt;span style=&#34;color:#ff0&#34;&gt;Now&lt;/span&gt;().&lt;span style=&#34;color:#ff0&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;30&lt;/span&gt; * time.Second))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;defer&lt;/span&gt; c.Conn.&lt;span style=&#34;color:#ff0&#34;&gt;SetDeadline&lt;/span&gt;(time.Time{}) &lt;span style=&#34;color:#0f0&#34;&gt;// 데드라인 비활성화
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;for&lt;/span&gt; state.downloaded &amp;lt; pw.length {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#0f0&#34;&gt;// unchocked일 경우 완료되지 않은 요청이 충분히 쌓일 때까지 요청을 보냅니다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; !state.client.Choked {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00&#34;&gt;for&lt;/span&gt; state.backlog &amp;lt; MaxBacklog &amp;amp;&amp;amp; state.requested &amp;lt; pw.length {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        blockSize := MaxBlockSize
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0f0&#34;&gt;// 마지막 블록은 일반 블록보다 짧을 수 있습니다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; pw.length-state.requested &amp;lt; blockSize {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          blockSize = pw.length - state.requested
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        err := c.&lt;span style=&#34;color:#ff0&#34;&gt;SendRequest&lt;/span&gt;(pw.index, state.requested, blockSize)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;, err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        state.backlog++
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        state.requested += blockSize
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    err := state.&lt;span style=&#34;color:#ff0&#34;&gt;readMessage&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;, err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; state.buf, &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/p2p/p2p.go#L85-L123&#34;&gt;github.com/veggiedefender/torrent-client/p2p/p2p.go#L85-L123&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;maingo&#34;&gt;main.go&lt;/h3&gt;
&lt;p&gt;아주 간단합니다. 거의 다 왔어요.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;package&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;github.com/veggiedefender/torrent-client/torrentfile&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inPath := os.Args[&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  outPath := os.Args[&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tf, err := torrentfile.&lt;span style=&#34;color:#ff0&#34;&gt;Open&lt;/span&gt;(inPath)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      log.&lt;span style=&#34;color:#ff0&#34;&gt;Fatal&lt;/span&gt;(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  err = tf.&lt;span style=&#34;color:#ff0&#34;&gt;DownloadToFile&lt;/span&gt;(outPath)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#f00&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      log.&lt;span style=&#34;color:#ff0&#34;&gt;Fatal&lt;/span&gt;(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/veggiedefender/torrent-client/blob/2bde944888e1195e81cc5d5b686f6ec3a9f08c25/main.go&#34;&gt;github.com/veggiedefender/torrent-client/main.go&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/xqRSB0Jec8RN91Zt89rbb9PcL&#34;&gt;데모 영상&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;이것이-전부가-아닙니다&#34;&gt;이것이 전부가 아닙니다&lt;/h1&gt;
&lt;p&gt;간결함을 위해 몇 가지 중요한 부분 코드만 포함시켰습니다.
특히 글루 코드, 파싱, 유닛 테스트, 글자를 만드는 지루한 부분은 생략했습니다.
관심 있으시다면 &lt;a href=&#34;https://github.com/veggiedefender/torrent-client&#34;&gt;전체 소스 코드&lt;/a&gt;를 확인하세요.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;역자: 간단히 테스트 해보려면 아래의 명령어를 실행하세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# Go는 설치되어 있다고 가정합니다.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/veggiedefender/torrent-client.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd torrent-client
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# linux, darwin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -L http://bttracker.debian.org:6969/file/debian-10.0.0-amd64-netinst.iso.torrent?info_hash=7f9161c88883c639bcde80d7f0a6045ab9cf16bb -o debian.torrent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# windows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget http://bttracker.debian.org:6969/file/debian-10.0.0-amd64-netinst.iso.torrent?info_hash=7f9161c88883c639bcde80d7f0a6045ab9cf16bb -o debian.torrent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go run main.go debian.torrent debian.iso
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;일부 트래커는 대역폭을 절약하기 위해 &lt;a href=&#34;http://bittorrent.org/beps/bep_0015.html&#34;&gt;[UDP]&lt;/a&gt; 바이너리 프로토콜을 사용합니다&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;역주: network byte order -&amp;gt; big-endian / host byte order -&amp;gt; little-endian&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;동일한 바이트를 &lt;strong&gt;little-endian&lt;/strong&gt; 순서로 해석하면 0xE11A = 57626이 됩니다.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
- https://markruler.github.io/posts/go/building-bittorrent-client/ - Im Changsu 2020 - 2024</description>
        </item>
    
    
  </channel>
</rss> 