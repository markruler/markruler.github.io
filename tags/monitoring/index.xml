<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>monitoring on 임창수 블로그</title>
    <link>https://markruler.github.io/tags/monitoring/</link>
    <description>Recent content in monitoring on 임창수 블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <managingEditor>imcxsu@gmail.com (Im Changsu)</managingEditor>
    <webMaster>imcxsu@gmail.com (Im Changsu)</webMaster>
    <copyright>Im Changsu 2020 - 2024</copyright>
    <lastBuildDate>Tue, 23 Jul 2024 19:08:00 +0900</lastBuildDate><atom:link href="https://markruler.github.io/tags/monitoring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>네트워크 장비 모니터링을 위한 SNMP (Simple Network Management Protocol)</title>
      <link>https://markruler.github.io/posts/network/snmp/</link>
      <pubDate>Tue, 23 Jul 2024 19:08:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/network/snmp/</guid>
      <description>개요 주로 네트워크 장비의 Metric을 확인하는 모니터링 용도로 사용하지만, SNMP를 지원하는 컴퓨팅 머신이라면 모두 활용할 수 있다.
전제 조건  IP 네트워크 환경이 있다. 관리용 서버(SNMP 서버)가 있다. SNMP 프로토콜을 지원하는 기기다.  구성 요소  매니저 (SNMP 서버)  네트워크 감시 장치(서버)에 설치해서 사용하는 소프트웨어   에이전트 (네트워크 기기/서버)  네트워크 기기나 서버가 가진 기기의 상태 정보를 통보하는 기능   SNMP 프로토콜 (TCP/IP)  UDP 패킷에 실어서 주고받으며, 포트 번호는 161(SNMP), 162(TRAP)를 사용함.</description>
    </item>
    
    <item>
      <title>오라클 DBMS SE2 세션 사후 진단</title>
      <link>https://markruler.github.io/posts/db/oracle-dbms-session-diagnosis/</link>
      <pubDate>Sun, 30 Apr 2023 23:58:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/db/oracle-dbms-session-diagnosis/</guid>
      <description>개요 현재 팀에서 구독 중인 Oracle DBMS의 라이센스는 Standard Edition 2의 Processor 라이센스(이하 SE2)다. 이 라이센스는 프로세서 최대 2개, CPU Threads 최대 16개까지 사용 가능하다. 만약 트래픽이 많지 않다면 이 정도 사양으로도 충분하겠지만, 트래픽이 많아지거나 DB를 비효율적으로 사용하게 되면 성능 저하가 발생할 수 있다. 하지만 우리는 성능 저하가 발생했을 때 이를 진단할 방법이 없었다. SE2의 경우 AWR(Automatic Workload Repository), ASH(Active Session History)와 같은 Oracle Diagnostics Pack을 사용할 수 없다.
DB 진단 도구가 필요하다 연산이 오래 걸리는 쿼리의 경우 SQL을 튜닝해서 해결했다.</description>
    </item>
    
    <item>
      <title>JVM 모니터링</title>
      <link>https://markruler.github.io/posts/java/jvm-monitoring/</link>
      <pubDate>Mon, 23 May 2022 00:09:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/java/jvm-monitoring/</guid>
      <description>모니터링과 타임아웃의 중요성은 아무리 강조해도 지나치지 않는다. 최근 회사에서 아주 느린 API(약 15초)를 발견했는데 분명 매일 트래픽이 발생하는데도 2년동안 방치되고 있었다. 이런 레거시는 유지 보수할 일이 없다면 개발팀에서도 확인하기 어렵다. 사용자가 리포팅해주길 기대하는 것보다 모니터링 도구를 통해 파악하는 것이 좋다. 심지어 굉장히 간단한 문제여서 파악하고 수정하는 데에 1시간도 안걸렸지만 약 15초 걸리던 API를 100ms까지 줄였다.
 먼저 알아두면 좋은 명령어가 있다. jps는 JVM Process Status를 출력하는 명령어로 현재 머신에서 실행중인 JVM의 PID나 실행 옵션을 확인할 때 유용하다.</description>
    </item>
    
    <item>
      <title>모니터링과 타임아웃의 중요성</title>
      <link>https://markruler.github.io/posts/java/java-timeout-monitoring/</link>
      <pubDate>Wed, 11 May 2022 02:19:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/java/java-timeout-monitoring/</guid>
      <description>Observability 용어 정리
 상황  현재팀에서 만들고 있는 애플리케이션은 Spring Framework로 작성하고 있다. 계속 특정 애플리케이션과 함께 여러 애플리케이션에서 후속 장애가 발생했다. 장애가 발생할 때마다 특정 API의 커넥션이 끊기지 않고 오랜 시간 유지되고 있었다.  RedisSystemException은 해당 서버를 죽이면서 Redis와 커넥션이 끊어졌기 때문에 발생한 예외다. 만약 서버를 죽이지 않았다면 끝까지 물고 있었을 것이다.
분석 시간만 보고도 Timeout이 설정되어 있지 않다는 것을 확인할 수 있다. 설정하지 않으면 default 값은 -1 로 타임아웃이 발생하지 않는다.</description>
    </item>
    
  </channel>
</rss>
