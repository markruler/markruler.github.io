<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>batch on 임창수 블로그</title>
    <link>https://markruler.github.io/tags/batch/</link>
    <description>Recent content in batch on 임창수 블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <managingEditor>imcxsu@gmail.com (Im Changsu)</managingEditor>
    <webMaster>imcxsu@gmail.com (Im Changsu)</webMaster>
    <copyright>Im Changsu 2020 - 2024</copyright>
    <lastBuildDate>Wed, 21 Dec 2022 22:20:00 +0900</lastBuildDate><atom:link href="https://markruler.github.io/tags/batch/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>엘라스틱서치(Elasticsearch)와 데이터 인덱싱 전략</title>
      <link>https://markruler.github.io/posts/search/elasticsearch-indexing-strategy/</link>
      <pubDate>Wed, 21 Dec 2022 22:20:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/search/elasticsearch-indexing-strategy/</guid>
      <description>엘라스틱서치(Elasticsearch)는 문서 기반 검색 엔진으로 빠른 키워드 검색 속도를 제공한다. 엘라스틱서치가 빠른 이유는 문서의 단어(term)들을 역색인(inverted index)하기 때문이다. 책에서 특정 단어를 찾는 걸 상상해 보자. 관계형 데이터베이스(RDB, Relational Database)는 LIKE 검색을 통해 검색 키워드가 포함된 모든 페이지를 찾아야 한다. 엘라스틱서치는 책 뒷부분에 있는 색인(index)을 보고 필요한 페이지만 찾으면 된다. 이 글에서는 e커머스 서비스에서 검색 성능을 개선하기 위해 도입한 엘라스틱서치와 인덱싱 전략에 대해 소개한다.
 엘라스틱서치 도입 배경 RDB 데이터를 인덱싱하는 전략  1.</description>
    </item>
    
  </channel>
</rss>
