<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on 임창수</title>
    <link>https://markruler.github.io/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on 임창수</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <managingEditor>imcxsu@gmail.com (Im Changsu)</managingEditor>
    <webMaster>imcxsu@gmail.com (Im Changsu)</webMaster>
    <copyright>Im Changsu 2020 - 2024</copyright>
    <lastBuildDate>Sun, 21 Feb 2021 11:47:00 +0900</lastBuildDate>
    <atom:link href="https://markruler.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>책 &#34;컨테이너 보안&#34;</title>
      <link>https://markruler.github.io/posts/review/container-security/</link>
      <pubDate>Sun, 21 Feb 2021 11:47:00 +0900</pubDate><author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/review/container-security/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;한빛미디어의 지원을 받아 작성되었습니다.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h1 id=&#34;거두절미&#34;&gt;거두절미&lt;/h1&gt;&#xA;&lt;p&gt;컨테이너에 관심 있으신 분이라면 필수 소장 도서입니다.&#xA;저도 컨테이너, 쿠버네티스, 도커, 클라우드 관련 도서를 많이 읽어봤지만&#xA;컨테이너를 이렇게 간명하고 깊게 다루는 책은 없었습니다.&#xA;컨테이너 &amp;lsquo;보안&amp;rsquo;을 설명하기 위해 컨테이너가 어떻게 동작하는지&#xA;설명하는 데에 책의 대부분을 차지합니다.&#xA;다만 200 페이지에 많은 내용을 압축한 만큼 도해는 많지 않습니다.&lt;/p&gt;&#xA;&lt;p&gt;먼저 저자의 &lt;a href=&#34;https://www.katacoda.com/lizrice/courses/containers-and-go&#34;&gt;katacoda (An Introduction to Containers for Go programmers)&lt;/a&gt;로&#xA;실습해보시거나 &lt;a href=&#34;https://youtu.be/HPuvDm8IC-4&#34;&gt;발표(What is a container, really? Let&amp;rsquo;s write one in Go from scratch)&lt;/a&gt;를 보시길 추천드립니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>컨테이너 톺아보기</title>
      <link>https://markruler.github.io/posts/container/container-study-guide/</link>
      <pubDate>Wed, 17 Feb 2021 23:47:00 +0900</pubDate><author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/container/container-study-guide/</guid>
      <description>&lt;h1 id=&#34;거두절미&#34;&gt;거두절미&lt;/h1&gt;&#xA;&lt;p&gt;생각보다 컨테이너는 간단한 게 아닙니다.&#xA;컨테이너를 쉽게 생성하고 삭제할 수 있었던 이유는&#xA;도커와 같은 컨테이너 관리 도구가 복잡한 것들을 꽁꽁 감췄기 때문입니다.&#xA;컨테이너를 공부하면 할수록 알아야 할 게 더 늘어나고 있지만&#xA;이쯤에서 유익했던 자료들을 모아 보려 합니다.&lt;/p&gt;&#xA;&lt;h1 id=&#34;참고-자료&#34;&gt;참고 자료&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;👍 필수&#xA;&lt;ul&gt;&#xA;&lt;li&gt;책 - &lt;a href=&#34;https://www.hanbit.co.kr/store/books/look.php?p_code=B8383749156&#34;&gt;컨테이너 보안&lt;/a&gt;, Liz Rice&lt;/li&gt;&#xA;&lt;li&gt;katacoda - &lt;a href=&#34;https://www.katacoda.com/lizrice/courses/containers-and-go&#34;&gt;An Introduction to Containers for Go programmers&lt;/a&gt;, Liz Rice&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;컨테이너&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/&#34;&gt;A Practical Introduction to Container Terminology&lt;/a&gt;, Scott McCarty&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/build-a-container-golang/&#34;&gt;Build Your Own Container Using Less than 100 Lines of Go&lt;/a&gt;, Julian Friedman&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://iximiuz.com/en/posts/implementing-container-runtime-shim/&#34;&gt;Implementing Container Runtime Shim: runc&lt;/a&gt;, Ivan Velichko&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;컨테이너 런타임&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.44bits.io/ko/keyword/linux-container&#34;&gt;리눅스 컨테이너란?&lt;/a&gt;, Daegwon Nacyot Kim&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.samsungsds.com/kr/insights/docker.html&#34;&gt;흔들리는 도커(Docker)의 위상: OCI와 CRI 중심으로 재편되는 컨테이너 생태계&lt;/a&gt;, 김준석&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://developers.redhat.com/blog/2019/02/21/podman-and-buildah-for-docker-users/&#34;&gt;Podman and Buildah for Docker users&lt;/a&gt;, Red Hat&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://joejulian.name/post/kubernetes-container-engine-comparison/&#34;&gt;Selecting a container runtime for use with Kubernetes&lt;/a&gt;, Joe Julian&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;컨테이너 오케스트레이션&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.redhat.com/ko/topics/containers/what-is-container-orchestration&#34;&gt;컨테이너 오케스트레이션이란?&lt;/a&gt;, Red Hat&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;네임스페이스&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.44bits.io/ko/keyword/linux-namespace&#34;&gt;리눅스 네임스페이스란?&lt;/a&gt;, Daegwon Nacyot Kim&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://jake.dothome.co.kr/namespace/&#34;&gt;네임스페이스&lt;/a&gt;, 문영일&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://windsock.io/using-linux-namespaces-to-isolate-processes/&#34;&gt;Using Linux Namespaces to Isolate Processes&lt;/a&gt;, Scott McCarty&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.redhat.com/en/blog/whats-next-containers-user-namespaces&#34;&gt;What’s Next for Containers? User Namespaces&lt;/a&gt;, Scott McCarty&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://netflixtechblog.com/evolving-container-security-with-linux-user-namespaces-afbe3308c082&#34;&gt;Evolving Container Security With Linux User Namespaces&lt;/a&gt;, Netflix&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://kinvolk.io/blog/2020/12/improving-kubernetes-and-container-security-with-user-namespaces/&#34;&gt;Improving Kubernetes and container security with user namespaces&lt;/a&gt;, Alban Crequy&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;컨트롤 그룹&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.10/Documentation/admin-guide/cgroup-v1/&#34;&gt;Cgroup Documentation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/resource_management_guide/&#34;&gt;Red Hat Resource Management Guide&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://tech.kakao.com/2020/06/29/cgroup-driver/&#34;&gt;Cgroup Driver 선택하기&lt;/a&gt;, ssup&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://b.luavis.kr/server/missing-800mb&#34;&gt;사라진 800MB를 찾아서&lt;/a&gt;, Luavis&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;루트 파일세스템&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt&#34;&gt;Linux Kernel Documentation - ramfs, rootfs and initramfs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.44bits.io/ko/post/change-root-directory-by-using-chroot&#34;&gt;chroot를 사용한 프로세스의 루트 디렉터리 격리&lt;/a&gt;, Daegwon Nacyot Kim&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;유니온 마운트&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ahmet.im/blog/building-container-images-in-go/&#34;&gt;Building container images in Go&lt;/a&gt;, Ahmet Alp Balkan (번역중)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.44bits.io/ko/post/how-docker-image-work&#34;&gt;도커 이미지 빌드 원리와 OverlayFS&lt;/a&gt;, Daegwon Nacyot Kim&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://developers.redhat.com/blog/2016/01/13/a-practical-introduction-to-docker-container-terminology/&#34;&gt;A Practical Introduction to Docker Container Terminology&lt;/a&gt;, Scott McCarty / Joe Brockmeier&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.naver.com/alice_k106/221530340759&#34;&gt;투명 셀로판지 이론을 통한 Overlay FS 사용 방법과 유니온 마운트 이해하기&lt;/a&gt;, 최용호&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ssup2.github.io/theory_analysis/Union_Mount_AUFS_Docker_Image_Layer/&#34;&gt;Union Mount, AUFS, Docker Image Layer&lt;/a&gt;, ssup2&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/storage/storagedriver/aufs-driver&#34;&gt;Use the AUFS storage driver&lt;/a&gt;, Docker&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://lwn.net/Articles/312641/&#34;&gt;Unifying filesystems with union mounts&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;캐퍼빌리티&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man7/capabilities.7.html&#34;&gt;capabilities(7)&lt;/a&gt;, Linux manual page&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://archive.is/20130112225523/http://www.eros-os.org/essays/capintro.html&#34;&gt;What is a Capability, Anyway?&lt;/a&gt;, Jonathan Shapiro&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.epnc.co.kr/news/articleView.html?idxno=43405&#34;&gt;권한을 최소화시키는 리눅스 커널 자격&lt;/a&gt;, 이혜원&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.container-solutions.com/linux-capabilities-why-they-exist-and-how-they-work&#34;&gt;Linux Capabilities: Why They Exist and How They Work&lt;/a&gt;, Adrian Mouat&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.container-solutions.com/linux-capabilities-in-practice&#34;&gt;Linux Capabilities In Practice&lt;/a&gt;, Adrian Mouat&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;컨테이너 네트워크&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.44bits.io/ko/post/container-network-1-uts-namespace&#34;&gt;UTS 네임스페이스를 사용한 호스트네임 격리 - 컨테이너 네트워크 기초 1편&lt;/a&gt;, Daegwon Nacyot Kim&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.44bits.io/ko/post/container-network-2-ip-command-and-network-namespace&#34;&gt;ip로 직접 만들어보는 네트워크 네임스페이스와 브리지 네트워크 - 컨테이너 네트워크 기초 2편&lt;/a&gt;, Daegwon Nacyot Kim&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;리눅스-컨테이너&#34;&gt;리눅스 컨테이너&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;A Linux container is a set of 1 or more processes that are isolated from the rest of the system.&amp;rdquo;&#xA;&lt;a href=&#34;https://www.redhat.com/en/topics/containers/whats-a-linux-container&#34;&gt;Red Hat&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>쿠버네티스 레벨 트리거링 및 조정</title>
      <link>https://markruler.github.io/posts/kubernetes/level-triggering-and-reconciliation/</link>
      <pubDate>Wed, 13 Jan 2021 23:05:00 +0900</pubDate><author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/kubernetes/level-triggering-and-reconciliation/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;James Bowes(&lt;a href=&#34;https://twitter.com/jrbowes&#34;&gt;@jrbowes&lt;/a&gt;)의 &lt;a href=&#34;https://hackernoon.com/level-triggering-and-reconciliation-in-kubernetes-1f17fe30333d&#34;&gt;Level Triggering and Reconciliation in Kubernetes&lt;/a&gt;를 번역한 글입니다.&lt;/li&gt;&#xA;&lt;li&gt;저자의 허락을 받고 번역했습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&#xA;    &#xA;    &lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;&#xA;      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/tCht7FvIDdY?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;&#xA;      &gt;&lt;/iframe&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;&lt;h1 id=&#34;시스템-프로그래밍-개념으로-보는-쿠버네티스가-클러스터를-관리하는-방법&#34;&gt;시스템 프로그래밍 개념으로 보는 쿠버네티스가 클러스터를 관리하는 방법&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/&#34;&gt;쿠버네티스&lt;/a&gt;는 현재&#xA;&lt;a href=&#34;https://techcrunch.com/2017/12/18/as-kubernetes-surged-in-popularity-in-2017-it-created-a-vibrant-ecosystem/&#34;&gt;가장 있기 있는&lt;/a&gt;&#xA;컨테이너 오케스트레이터입니다. 이런 성공의 밑받침은 신뢰성입니다. 모든&#xA;소프트웨어에는 버그가 있죠. 그러나 컨테이너를 실행하는 데 있어서 쿠버네티스는&#xA;다른 소프트웨어보다 버그가 적습니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>쿠버네티스 컴포넌트를 로컬에서 직접 빌드 및 디버깅하기</title>
      <link>https://markruler.github.io/posts/kubernetes/local-build-kube/</link>
      <pubDate>Sun, 11 Oct 2020 14:48:00 +0900</pubDate><author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/kubernetes/local-build-kube/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;직접 빌드해서 사용한다면 쿠버네티스 기능을 확장해서 사용할 수 있다.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/release-1.19/build/README.md&#34;&gt;kubernetes/build/README.md&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;사용할-명령어&#34;&gt;사용할 명령어&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# master 브랜치&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone --depth &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; https://github.com/kubernetes/kubernetes.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 특정 브랜치&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone --depth &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; --single-branch --branch release-1.19 https://github.com/kubernetes/kubernetes.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# cmd 디렉터리에 있는 다른 컴포넌트도 같은 방식으로 빌드할 수 있다.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# cmd/kubeadm, kubectl, kubelet, kube-apiserver, kube-proxy, kube-controller-manager, kube-scheduler, ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make all &lt;span style=&#34;color:#eedd82&#34;&gt;WHAT&lt;/span&gt;=cmd/kubectl &lt;span style=&#34;color:#eedd82&#34;&gt;GOFLAGS&lt;/span&gt;=-v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;# 그냥 간단히 go build 명령도 가능하다.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go build -o k cmd/kubectl&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;빌드-실행-따라가기&#34;&gt;빌드 실행 따라가기&lt;/h2&gt;&#xA;&lt;h3 id=&#34;makefile&#34;&gt;Makefile&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;make 명령을 내릴 루트 디렉터리 Makefile을 보면 아래와 같이 다른 Makefile을 가리킨다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:2;-o-tab-size:2;tab-size:2;display:grid;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;build/root/Makefile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;실제로-빌드되는-makefile&#34;&gt;실제로 빌드되는 Makefile&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/release-1.19/build/root/Makefile&#34;&gt;build/root/Makefile&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>쿠버네티스 API 접근 제어</title>
      <link>https://markruler.github.io/posts/kubernetes/controlling-access-api/</link>
      <pubDate>Thu, 17 Sep 2020 06:58:08 +0900</pubDate><author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/kubernetes/controlling-access-api/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/controlling-access/&#34;&gt;쿠버네티스 공식 문서&lt;/a&gt;를 번역했습니다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!-- overview --&gt;&#xA;&lt;p&gt;이 페이지는 쿠버네티스 API에 대한 접근 제어의 개요를 제공한다.&lt;/p&gt;&#xA;&lt;!-- body --&gt;&#xA;&lt;p&gt;사용자는&lt;code&gt;kubectl&lt;/code&gt;, 클라이언트 라이브러리&#xA;또는 REST 요청을 통해&#xA;&lt;a href=&#34;https://kubernetes.io/docs/tasks/access-application-cluster/access-cluster/&#34;&gt;API에 접근한다&lt;/a&gt;.&#xA;사용자와 쿠버네티스 서비스 어카운트 모두 API에 접근할 수 있다.&#xA;요청이 API에 도달하면,&#xA;다음 다이어그램에 설명된 몇 가지 단계를 거친다.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://markruler.github.io/images/kubernetes/access-control-overview.svg&#34; alt=&#34;Diagram of request handling steps for Kubernetes API request&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;전송-보안&#34;&gt;전송 보안&lt;/h2&gt;&#xA;&lt;p&gt;일반적인 쿠버네티스 클러스터에서 API는 443번 포트에서 서비스한다.&#xA;API 서버는 인증서를 제시한다.&#xA;이 인증서는 종종 자체 서명되기 때문에 일반적으로 사용자 머신의 &lt;code&gt;$USER/.kube/config&lt;/code&gt;은&#xA;API 서버의 인증서에 대한 루트 인증서를 포함하며,&#xA;시스템 기본 루트 인증서 대신 사용된다.&#xA;&lt;code&gt;kube-up.sh&lt;/code&gt;을 사용하여 클러스터를 직접 생성할 때&#xA;이 인증서는 일반적으로 &lt;code&gt;$USER/.kube/config&lt;/code&gt;에 자동으로 기록된다.&#xA;클러스터에 여러 명의 사용자가 있는 경우, 작성자는 인증서를 다른 사용자와 공유해야 한다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
