<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>임창수 블로그</title>
    <link>https://markruler.github.io/tags/kubernetes/</link>
    <description>What, Why, How.</description>
    <generator>Hugo -- gohugo.io</generator>
    
      <language>ko-kr</language>
    
    
      <copyright>Im Changsu 2020 - 2023</copyright>
    
    
      <lastBuildDate>Sun, 21 Feb 2021 11:47:00 +0900</lastBuildDate>
    
    
    
      <atom:link href="https://markruler.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
      
    
    
    
    <item>
      <title>책 &#34;컨테이너 보안&#34;</title>
      <link>https://markruler.github.io/posts/review/container-security/</link>
      <pubDate>Sun, 21 Feb 2021 11:47:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/review/container-security/</guid>
      <description>
        한빛미디어의 지원을 받아 작성되었습니다.
 거두절미 컨테이너에 관심 있으신 분이라면 필수 소장 도서입니다. 저도 컨테이너, 쿠버네티스, 도커, 클라우드 관련 도서를 많이 읽어봤지만 컨테이너를 이렇게 간명하고 깊게 다루는 책은 없었습니다. 컨테이너 &amp;lsquo;보안&amp;rsquo;을 설명하기 위해 컨테이너가 어떻게 동작하는지 설명하는 데에 책의 대부분을 차지합니다. 다만 200 페이지에 많은 내용을 압축한 만큼 도해는 많지 않습니다.
먼저 저자의 katacoda (An Introduction to Containers for Go programmers)로 실습해보시거나 발표(What is a container, really? Let&amp;rsquo;s write one in Go from scratch)를 보시길 추천드립니다.
      </description>
    </item>
    
    
    
    <item>
      <title>컨테이너 톺아보기</title>
      <link>https://markruler.github.io/posts/container/container-study-guide/</link>
      <pubDate>Wed, 17 Feb 2021 23:47:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/container/container-study-guide/</guid>
      <description>
        거두절미 생각보다 컨테이너는 간단한 게 아닙니다. 컨테이너를 쉽게 생성하고 삭제할 수 있었던 이유는 도커와 같은 컨테이너 관리 도구가 복잡한 것들을 꽁꽁 감췄기 때문입니다. 컨테이너를 공부하면 할수록 알아야 할 게 더 늘어나고 있지만 이쯤에서 유익했던 자료들을 모아 보려 합니다.
참고 자료  👍 필수  책 - 컨테이너 보안, Liz Rice katacoda - An Introduction to Containers for Go programmers, Liz Rice   컨테이너  A Practical Introduction to Container Terminology, Scott McCarty Build Your Own Container Using Less than 100 Lines of Go, Julian Friedman Implementing Container Runtime Shim: runc, Ivan Velichko   컨테이너 런타임  리눅스 컨테이너란?
      </description>
    </item>
    
    
    
    <item>
      <title>쿠버네티스 레벨 트리거링 및 조정</title>
      <link>https://markruler.github.io/posts/kubernetes/level-triggering-and-reconciliation/</link>
      <pubDate>Wed, 13 Jan 2021 23:05:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/kubernetes/level-triggering-and-reconciliation/</guid>
      <description>
        James Bowes(@jrbowes)의 Level Triggering and Reconciliation in Kubernetes를 번역한 글입니다. 저자의 허락을 받고 번역했습니다.     시스템 프로그래밍 개념으로 보는 쿠버네티스가 클러스터를 관리하는 방법 쿠버네티스는 현재 가장 있기 있는 컨테이너 오케스트레이터입니다. 이런 성공의 밑받침은 신뢰성입니다. 모든 소프트웨어에는 버그가 있죠. 그러나 컨테이너를 실행하는 데 있어서 쿠버네티스는 다른 소프트웨어보다 버그가 적습니다.
쿠버네티스는 원하는 수의 컨테이너를 제때에 실행합니다. 그리고 그 숫자를 계속해서 유지하죠. 공식 문서에 따르면 쿠버네티스가 자가 치유(self-healing) 하는 것이라고 말합니다.
      </description>
    </item>
    
    
    
    <item>
      <title>쿠버네티스 컴포넌트를 로컬에서 직접 빌드 및 디버깅하기</title>
      <link>https://markruler.github.io/posts/kubernetes/local-build-kube/</link>
      <pubDate>Sun, 11 Oct 2020 14:48:00 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/kubernetes/local-build-kube/</guid>
      <description>
        직접 빌드해서 사용한다면 쿠버네티스 기능을 확장해서 사용할 수 있다.
 Reference  kubernetes/build/README.md  사용할 명령어 # master 브랜치 git clone --depth 1 https://github.com/kubernetes/kubernetes.git # 특정 브랜치 git clone --depth 1 --single-branch --branch release-1.19 https://github.com/kubernetes/kubernetes.git # cmd 디렉터리에 있는 다른 컴포넌트도 같은 방식으로 빌드할 수 있다. # cmd/kubeadm, kubectl, kubelet, kube-apiserver, kube-proxy, kube-controller-manager, kube-scheduler, ... make all WHAT=cmd/kubectl GOFLAGS=-v # 그냥 간단히 go build 명령도 가능하다. go build -o k cmd/kubectl 빌드 실행 따라가기 Makefile  make 명령을 내릴 루트 디렉터리 Makefile을 보면 아래와 같이 다른 Makefile을 가리킨다.
      </description>
    </item>
    
    
    
    <item>
      <title>쿠버네티스 API 접근 제어</title>
      <link>https://markruler.github.io/posts/kubernetes/controlling-access-api/</link>
      <pubDate>Thu, 17 Sep 2020 06:58:08 +0900</pubDate>
      <author>imcxsu@gmail.com (Im Changsu)</author>
      <guid>https://markruler.github.io/posts/kubernetes/controlling-access-api/</guid>
      <description>
        쿠버네티스 공식 문서를 번역했습니다.  이 페이지는 쿠버네티스 API에 대한 접근 제어의 개요를 제공한다.
사용자는kubectl, 클라이언트 라이브러리 또는 REST 요청을 통해 API에 접근한다. 사용자와 쿠버네티스 서비스 어카운트 모두 API에 접근할 수 있다. 요청이 API에 도달하면, 다음 다이어그램에 설명된 몇 가지 단계를 거친다.
전송 보안 일반적인 쿠버네티스 클러스터에서 API는 443번 포트에서 서비스한다. API 서버는 인증서를 제시한다. 이 인증서는 종종 자체 서명되기 때문에 일반적으로 사용자 머신의 $USER/.kube/config은 API 서버의 인증서에 대한 루트 인증서를 포함하며, 시스템 기본 루트 인증서 대신 사용된다.
      </description>
    </item>
    
    
  </channel>
</rss>
