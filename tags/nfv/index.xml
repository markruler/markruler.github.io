<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nfv on Changsu</title>
    <link>https://cxsu.github.io/tags/nfv/</link>
    <description>Recent content in nfv on Changsu</description>
    <generator>Hugo -- gohugo.io</generator>
    
      <language>ko-kr</language>
    
    
      <managingEditor>imcxsu@gmail.com (Changsu)</managingEditor>
    
    
      <webMaster>imcxsu@gmail.com (Changsu)</webMaster>
    
    
      <copyright>2020 Changsu</copyright>
    
    
      <lastBuildDate>Mon, 16 Nov 2020 22:40:00 +0900</lastBuildDate>
    
    
    <atom:link rel="canonical" type="text/html" href="https://cxsu.github.io/tags/nfv/" title="Changsu" />
    
    
    
    <item>
      <title>NFV 도커 컨테이너 초심자 가이드</title>
      <link>https://cxsu.github.io/posts/nfv/beginners-guide-docker-container-nfv/</link>
      <pubDate>Mon, 16 Nov 2020 22:40:00 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/nfv/beginners-guide-docker-container-nfv/</guid>
      <description>
        Faisal Khan의 A Beginner’s Guide to Docker Container in NFV를 번역한 글입니다. 저자의 허락을 받고 번역한 글입니다. 2016년 3월 3일에 쓰여진 글로 현재와 다를 수 있습니다.   새롭게 등장한 도커(Docker) 컨테이너는 NFV를 혁신할 수 있는 잠재력을 가지고 있습니다.
무엇보다 도커 컨테이너는 가상 머신에 비해 가볍고, 적은 오버헤드와 리소스만을 요구하며, 동일한 운영 체제에서 실행되는 애플리케이션을 격리시킬 수 있습니다.
즉, NFV의 VNF(가상 네트워크 기능)를 완전히 격리시켜 도커 컨테이너에서 실행할 수 있다면 가상 머신이 필요 없을 지도 모릅니다.
      </description>
    </item>
    
    
    
    <item>
      <title>NFV의 컴퓨팅 도메인에 대한 오해!</title>
      <link>https://cxsu.github.io/posts/nfv/the-misunderstood-facts-about-compute-domain-in-nfv/</link>
      <pubDate>Thu, 01 Oct 2020 22:23:00 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/nfv/the-misunderstood-facts-about-compute-domain-in-nfv/</guid>
      <description>
        Faisal Khan의 The Misunderstood Facts about Compute Domain in NFV!를 번역한 글입니다. 저자의 허락을 받고 번역한 글입니다.   NFV에 대해 생각해 보세요! 그리고 x86 프로세서를 생각해 보세요&amp;hellip; 둘은 뗄 수 없는 사이입니다. 그렇죠?
프로세서(컴퓨팅 파트)가 아무리 단순하게 들리더라도 NFV의 컴퓨팅 도메인(compute domain)이 노드의 컴퓨팅 프로세서(compute processor)가 같지 않다는 사실을 모르는 사람이 많을 것입니다. 사실&amp;hellip; 훨씬 더 많습니다.
NFV의 &amp;ldquo;Compute Domain&amp;quot;과 &amp;ldquo;Compute Node&amp;quot;는 ETSI 정의에 따르면 동일한 것을 의미하지 않습니다.
      </description>
    </item>
    
    
    
    <item>
      <title>NFV MANO 초심자 가이드</title>
      <link>https://cxsu.github.io/posts/nfv/beginners-guide-to-nfv-mano/</link>
      <pubDate>Wed, 23 Sep 2020 00:58:08 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/nfv/beginners-guide-to-nfv-mano/</guid>
      <description>
        Faisal Khan의 A Beginner’s Guide to NFV Management &amp;amp; Orchestration (MANO)을 번역한 글입니다. 저자의 허락을 받고 번역한 글입니다.   NFV 여행의 초심자는 NFV Management &amp;amp; Orchestration (NFV MANO)를 이해하려고 할 때 다음과 같은 두 가지 걸림돌이 있습니다.
첫번째로 초심자는 기존의 네트워크가 EMS, NMS, 또는 OSS가 지원하는 것들처럼 하나의 관리 시스템만 필요하다고 알고 있습니다. 반면에 NFV 네트워크는 VIM 관리자, VNF 관리자, 오케스트레이터와 같은 여러 관리자를 필요로 합니다.
관리자가 충분하지 않다면 기존 EMS와 OSS/BSS도 있습니다.
      </description>
    </item>
    
    
    
    <item>
      <title>&#34;NFV 아키텍처&#34; 이해를 위한 치트 시트</title>
      <link>https://cxsu.github.io/posts/nfv/cheat-sheet-understanding-nfv-architecture/</link>
      <pubDate>Tue, 22 Sep 2020 21:58:08 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/nfv/cheat-sheet-understanding-nfv-architecture/</guid>
      <description>
        Faisal Khan의 A Cheat Sheet for Understanding &amp;ldquo;NFV Architecture&amp;rdquo;를 번역한 글입니다. 저자의 허락을 받고 번역한 글입니다.   시간이 없으신가요?
쉽게 이해할 수 있는 NFV 용어/아키텍처에 대한 빠른 업데이트가 필요하신가요?
그렇다면 NFV 아키텍처를 시작하는 데 필요한 모든 정보를 얻을 수 있는 아래 7가지 주요 블록을 보세요. 블록 번호 및 정의를 따라가세요.
1. VNF (Virtual Network Function) VNF는 가상화된 네트워크 요소로 NFV 아키텍처의 기본 블록입니다. 예를 들어 라우터를 가상화하면 라우터 VNF라고 부르고, 다른 예는 기지국(base station) VNF도 있습니다.
      </description>
    </item>
    
    
    
    <item>
      <title>쿠버네티스 API 접근 제어</title>
      <link>https://cxsu.github.io/posts/kubernetes/controlling-access-api/</link>
      <pubDate>Thu, 17 Sep 2020 06:58:08 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/kubernetes/controlling-access-api/</guid>
      <description>
        원문  이 페이지는 쿠버네티스 API에 대한 접근 제어의 개요를 제공한다.
사용자는kubectl, 클라이언트 라이브러리 또는 REST 요청을 통해 API에 접근한다. 사용자와 쿠버네티스 서비스 어카운트 모두 API에 접근할 수 있다. 요청이 API에 도달하면, 다음 다이어그램에 설명된 몇 가지 단계를 거친다.
전송 보안 일반적인 쿠버네티스 클러스터에서 API는 443번 포트에서 서비스한다. API 서버는 인증서를 제시한다. 이 인증서는 종종 자체 서명되기 때문에 일반적으로 사용자 머신의 $USER/.kube/config은 API 서버의 인증서에 대한 루트 인증서를 포함하며, 시스템 기본 루트 인증서 대신 사용된다.
      </description>
    </item>
    
    
    
    <item>
      <title>MEC 아키텍처 초심자 가이드</title>
      <link>https://cxsu.github.io/posts/mec/beginners-guide-to-mec-architecture/</link>
      <pubDate>Sun, 13 Sep 2020 20:58:08 +0900</pubDate>
    
      <author>imcxsu@gmail.com (Changsu)</author>
    
      <guid>https://cxsu.github.io/posts/mec/beginners-guide-to-mec-architecture/</guid>
      <description>
        Faisal Khan의 Beginners Guide to MEC Architecture (Multi-access Edge Computing)을 번역한 글입니다. 저자의 허락을 받고 번역한 글입니다. 처음에는 MEC가 Mobile Edge Computing 의 줄임말이었지만 현재는 Multi-access Edge Computing 입니다.   MEC 아키텍처 가이드에 오신 것을 환영합니다!
MEC는 5G의 저지연(low-latency) 서비스를 활용하려는 모바일 사업자들에 의해 새로운 투자 물결을 가져올 것입니다. 이는 소비자와 더 가까운 곳(무선 기지국)에서 서비스를 운영하겠다는 것을 의미합니다.
MEC는 서비스 사업자들에게 새로운 서비스 분야와 수익 창출의 수단입니다.
      </description>
    </item>
    
    
  </channel>
</rss>
